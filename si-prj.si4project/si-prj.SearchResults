---- LOG_ Matches (4086 in 251 files) ----
a00184.html (rt-thread\components\net\uip\doc\html) line 292 : <a name="l00272"></a>00272   <span class="comment">/*  httpd_log_file(uip_conn-&gt;ripaddr, s-&gt;filename);*/</span>
a00185.html (rt-thread\components\net\uip\doc\html) line 80 : <a name="l00060"></a>00060 <span class="keywordtype">void</span> httpd_log_file(<a class="code" href="a00153.html#g77570ac4fcab86864fa1916e55676da2">u16_t</a> *requester, <span class="keywordtype">char</span> *file);
mbedtls_aes_init in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("aes init ctx[%08x]", *ctx);
mbedtls_aes_init in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("aes init. but ctx is null");
mbedtls_aes_free in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("aes free ctx[%08x]", *ctx);
mbedtls_aes_free in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("aes free. but ctx is null");
mbedtls_aes_setkey_enc in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("aes enc setkey ctx[%08x] key:%08x keybits:%d",
mbedtls_aes_setkey_enc in aes_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("aes enc setkey err");
mbedtls_aes_setkey_enc in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("aes enc setkey. but ctx is null");
mbedtls_aes_setkey_dec in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("aes dec setkey ctx[%08x] key:%08x keybits:%d",
mbedtls_aes_setkey_dec in aes_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("aes dec setkey err");
mbedtls_aes_setkey_dec in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("aes dec setkey. but ctx is null");
mbedtls_aes_crypt_ecb in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("aes crypt ecb ctx[%08x] mode:%d in:%08x out:%08x",
mbedtls_aes_crypt_ecb in aes_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("aes crypt ecb err");
mbedtls_aes_crypt_ecb in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("aes crypt ecb. but ctx is null");
mbedtls_aes_crypt_cbc in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("aes crypt cbc ctx[%08x] mode:%d len:%d iv:%08x in:%08x out:%08x",
mbedtls_aes_crypt_cbc in aes_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("aes crypt cbc err");
mbedtls_aes_crypt_cbc in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("aes crypt cbc. but ctx is null");
mbedtls_aes_crypt_cfb128 in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("aes crypt cfb128 ctx[%08x] mode:%d len:%d iv_off:%d "
mbedtls_aes_crypt_cfb128 in aes_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("aes crypt cbc err");
mbedtls_aes_crypt_cfb128 in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("aes crypt cbc. but ctx is null");
mbedtls_aes_crypt_cfb8 in aes_alt.c (packages\mbedtls-latest\ports\src) :     LOG_E("fun[%s] is run. but this fun no entity", __FUNCTION__);
mbedtls_aes_crypt_ofb in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("aes crypt ofb ctx[%08x] len:%d iv_off:%d iv:%08x in:%08x out:%08x",
mbedtls_aes_crypt_ofb in aes_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("aes crypt ofb err");
mbedtls_aes_crypt_ofb in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("aes crypt ofb. but ctx is null");
mbedtls_aes_crypt_ctr in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("aes crypt ctr ctx[%08x] off:%d cnt:%08x blk:%08x in:%08x out:%08x",
mbedtls_aes_crypt_ctr in aes_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("aes crypt ctr err");
mbedtls_aes_crypt_ctr in aes_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("aes crypt ctr. but ctx is null");
alcs_server.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\alcs) line 10 : #ifdef LOG_REPORT_TO_CLOUD
alcs_server.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\alcs) line 11 :     #include "iotx_log_report.h"
call_cb in alcs_server.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\alcs) : #ifdef LOG_REPORT_TO_CLOUD
altcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 326 :  * @see tcp_listen_with_backlog_and_err()
altcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 329 : altcp_listen_with_backlog_and_err(struct altcp_pcb *conn, u8_t backlog, err_t *err)
altcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 107 : struct altcp_pcb *altcp_listen_with_backlog_and_err(struct altcp_pcb *conn, u8_t backlog, err_t *err);
altcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 108 : #define altcp_listen_with_backlog(conn, backlog) altcp_listen_with_backlog_and_err(conn, backlog, NULL)
altcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 110 : #define altcp_listen(conn) altcp_listen_with_backlog_and_err(conn, TCP_DEFAULT_LISTEN_BACKLOG, NULL)
altcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 173 : #define altcp_listen_with_backlog_and_err tcp_listen_with_backlog_and_err
altcp_tcp_listen in altcp_tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) :   lpcb = tcp_listen_with_backlog_and_err(pcb, backlog, err);
altcp_mbedtls_listen in altcp_tls_mbedtls.c (rt-thread\components\net\lwip-2.1.0\src\apps\altcp_tls) :   lpcb = altcp_listen_with_backlog_and_err(conn->inner_conn, backlog, err);
accept_function in api_msg.c (rt-thread\components\net\lwip-2.0.2\src\api) :   tcp_backlog_delayed(newpcb);
lwip_netconn_do_listen in api_msg.c (rt-thread\components\net\lwip-2.0.2\src\api) :             lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
lwip_netconn_do_listen in api_msg.c (rt-thread\components\net\lwip-2.0.2\src\api) :           tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
lwip_netconn_do_accepted in api_msg.c (rt-thread\components\net\lwip-2.0.2\src\api) :       tcp_backlog_accepted(msg->conn->pcb.tcp);
accept_function in api_msg.c (rt-thread\components\net\lwip-2.1.0\src\api) :   tcp_backlog_delayed(newpcb);
lwip_netconn_do_listen in api_msg.c (rt-thread\components\net\lwip-2.1.0\src\api) :           lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
lwip_netconn_do_listen in api_msg.c (rt-thread\components\net\lwip-2.1.0\src\api) :         tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
lwip_netconn_do_accepted in api_msg.c (rt-thread\components\net\lwip-2.1.0\src\api) :       tcp_backlog_accepted(msg->conn->pcb.tcp);
app_log.h (applications) line 15 : #ifndef LOG_TAG
app_log.h (applications) line 17 : #endif /* LOG_TAG */
mbedtls_arc4_init in arc4_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("rc4 init ctx[%08x]", *ctx);
mbedtls_arc4_init in arc4_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("rc4 init. but ctx is null");
mbedtls_arc4_free in arc4_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("rc4 free ctx[%08x]", *ctx);
mbedtls_arc4_free in arc4_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("rc4 free. but ctx is null");
mbedtls_arc4_setup in arc4_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("rc4 setup ctx[%08x] key:%08x keylen:%d",
mbedtls_arc4_setup in arc4_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("rc4 setup err");
mbedtls_arc4_setup in arc4_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("rc4 setup. but ctx is null");
mbedtls_arc4_crypt in arc4_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("rc4 crypt ctx[%08x] len:%d in:%08x out:%08x",
mbedtls_arc4_crypt in arc4_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("rc4 crypt err");
mbedtls_arc4_crypt in arc4_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("rc4 crypt. but ctx is null");
at_client.c (rt-thread\components\net\at\src) line 18 : #define LOG_TAG              "at.clnt"
at_create_resp in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT create response object failed! No memory for response object!");
at_create_resp in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT create response object failed! No memory for response buffer!");
at_resp_set_info in at_client.c (rt-thread\components\net\at\src) :             LOG_D("No memory for realloc response buffer size(%d).", buf_size);
at_resp_get_line in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT response get line failed! Input response line(%d) error!", resp_line);
at_obj_exec_cmd in at_client.c (rt-thread\components\net\at\src) :         LOG_E("input AT Client object is NULL, please create or get AT Client object!");
at_obj_exec_cmd in at_client.c (rt-thread\components\net\at\src) :             LOG_D("execute command (%.*s) timeout (%d ticks)!", cmd_size, cmd, resp->timeout);
at_obj_exec_cmd in at_client.c (rt-thread\components\net\at\src) :             LOG_E("execute command (%.*s) failed!", cmd_size, cmd);
at_client_obj_wait_connect in at_client.c (rt-thread\components\net\at\src) :         LOG_E("input AT client object is NULL, please create or get AT Client object!");
at_client_obj_wait_connect in at_client.c (rt-thread\components\net\at\src) :         LOG_E("no memory for AT client(%s) response object.", client_name);
at_client_obj_wait_connect in at_client.c (rt-thread\components\net\at\src) :             LOG_E("wait AT client(%s) connect timeout(%d tick).", client_name, timeout);
at_client_obj_send in at_client.c (rt-thread\components\net\at\src) :         LOG_E("input AT Client object is NULL, please create or get AT Client object!");
at_client_obj_recv in at_client.c (rt-thread\components\net\at\src) :         LOG_E("input AT Client object is NULL, please create or get AT Client object!");
at_client_obj_recv in at_client.c (rt-thread\components\net\at\src) :                 LOG_E("AT Client receive failed, uart device get data error(%d)", result);
at_obj_set_end_sign in at_client.c (rt-thread\components\net\at\src) :         LOG_E("input AT Client object is NULL, please create or get AT Client object!");
at_obj_set_urc_table in at_client.c (rt-thread\components\net\at\src) :         LOG_E("input AT Client object is NULL, please create or get AT Client object!");
at_recv_readline in at_client.c (rt-thread\components\net\at\src) :                 LOG_E("read line failed. The line data length is out of buffer size(%d)!", client->recv_bufsz);
client_parser in at_client.c (rt-thread\components\net\at\src) :                     LOG_E("Read response buffer failed. The Response buffer size is out of buffer size(%d)!", resp->buf_size);
client_parser in at_client.c (rt-thread\components\net\at\src) : //                log_d("unrecognized line: %.*s", client->recv_line_len, client->recv_line_buf);
at_client_para_init in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT client initialize failed! No memory for receive buffer.");
at_client_para_init in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT client initialize failed! at_client_recv_lock create failed!");
at_client_para_init in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT client initialize failed! at_client_notice semaphore create failed!");
at_client_para_init in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT client initialize failed! at_client_resp semaphore create failed!");
at_client_init in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT client initialize failed! Check the maximum number(%d) of AT client.", AT_CLIENT_NUM_MAX);
at_client_init in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT client initialize failed! Not find the device(%s).", dev_name);
at_client_init in at_client.c (rt-thread\components\net\at\src) :         LOG_I("AT client(V%s) on device %s initialize success.", AT_SW_VERSION, dev_name);
at_client_init in at_client.c (rt-thread\components\net\at\src) :         LOG_E("AT client(V%s) on device %s initialize failed(%d).", AT_SW_VERSION, dev_name, result);
at_device_control in at_device.c (packages\at_device-latest\src) :         LOG_W("AT device(%s) not support control operations.", device->name);
at_device_register in at_device.c (packages\at_device-latest\src) :         LOG_E("get AT device class(%d) failed.", class_id);
at_device_register in at_device.c (packages\at_device-latest\src) :         LOG_E("no memory for AT Socket number(%d) create.", class->socket_num);
at_device_register in at_device.c (packages\at_device-latest\src) :         LOG_E("no memory for AT device(%s) socket event create.", device_name);
at_device_sim800c.c (packages\at_device-latest\class\sim800c) line 32 : #define LOG_TAG                        "at.dev"
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("input network interface device is NULL.");
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get sim800c device by netdev name(%s) failed.", netdev->name);
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) set IP address failed, no memory for response object.", device->name);
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("sim800c device(%s) prase \"AT+GSN\" commands resposne data error.", device->name);
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_D("sim800c device(%s) IEMI number: %s", device->name, iemi);
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("sim800c device(%s) prase \"AT+CIFSR\" commands resposne data error!", device->name);
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_D("sim800c device(%s) IP address: %s", device->name, ipaddr);
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("Prase \"AT+CDNSCFG?\" commands resposne data error!");
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_D("sim800c device(%s) primary DNS server address: %s", device->name, dns_server1);
sim800c_netdev_set_info in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_D("sim800c device(%s) secondary DNS server address: %s", device->name, dns_server2);
check_link_status_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get sim800c device by netdev name(%s) failed.", netdev->name);
check_link_status_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) set check link status failed, no memory for response object.", device->name);
check_link_status_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) : 			LOG_D("signal strength: %d@%d.", rssi_code, ber_code);
sim800c_netdev_check_link_status in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("input network interface device is NULL.\n");
sim800c_netdev_set_up in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get sim800c device by netdev name(%s) failed.", netdev->name);
sim800c_netdev_set_up in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_D("the network interface device(%s) set up status.", netdev->name);
sim800c_netdev_set_down in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get sim800c device by netdev name(%s) failed.", netdev->name);
sim800c_netdev_set_down in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_D("the network interface device(%s) set down status.", netdev->name);
sim800c_netdev_set_dns_server in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get sim800c device by netdev name(%s) failed.", netdev->name);
sim800c_netdev_set_dns_server in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_D("sim800c set dns server failed, no memory for response object.");
sim800c_ping_domain_resolve in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("no memory for sim800c device(%s) response structure.", device->name);
sim800c_netdev_ping in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get sim800c device by netdev name(%s) failed.", netdev->name);
sim800c_netdev_ping in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) set dns server failed, no memory for response object.", device->name);
sim800c_netdev_add in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("no memory for sim800c device(%s) netdev structure.", netdev_name);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("no memory for sim800c device(%s) response structure.", device->name);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :     LOG_D("start initializing the sim800c device(%s)", device->name);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_D("%s", at_resp_get_line(resp, i + 1));
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :                 LOG_D("sim800c device(%s) SIM card detection success.", device->name);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("sim800c device(%s) SIM card detection failed.", device->name);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :                 LOG_D("sim800c device(%s) GSM network is registered(%s),", device->name, parsed_data);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("sim800c device(%s) GSM network is register failed(%s).", device->name, parsed_data);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :                 LOG_D("sim800c device(%s) GPRS network is registered(%s).", device->name, parsed_data);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("sim800c device(%s) GPRS network is register failed(%s).", device->name, parsed_data);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :                 LOG_D("sim800c device(%s) signal strength: %s", device->name, parsed_data);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("sim800c device(%s) signal strength check failed (%s)", device->name, parsed_data);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_I("sim800c device(%s) network operator: %s", device->name, parsed_data);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_I("sim800c device(%s) network operator: %s", device->name, parsed_data);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_I("sim800c device(%s) network operator: %s", device->name, parsed_data);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("sim800c device(%s) get the local address failed.", device->name);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_I("sim800c device(%s) initialize retry...", device->name);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_I("sim800c device(%s) network initialize success!", device->name);
sim800c_init_thread_entry in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) network initialize failed(%d)!", device->name, result);
sim800c_net_init in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("create sim800c device(%s) initialization thread failed.", device->name);
urc_func in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :     LOG_I("URC data : %.*s", size, data);
sim800c_init in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) initialize failed, get AT client(%s) failed.", sim800c->device_name, sim800c->client_name);
sim800c_init in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) initialize failed, get network interface device failed.", sim800c->device_name);
sim800c_control in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_W("sim800c not support the control command(%d).", cmd);
sim800c_control in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("input error control command(%d).", cmd);
sim800c_device_class_register in at_device_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("no memory for sim800c device class create.");
at_log.h (rt-thread\components\net\at\include) line 15 : #ifndef LOG_TAG
at_log.h (rt-thread\components\net\at\include) line 18 : #define DBG_TAG               LOG_TAG
at_log.h (rt-thread\components\net\at\include) line 19 : #endif /* LOG_TAG */
at_sample_client.c (packages\at_device-latest\samples) line 31 : #define LOG_TAG              "at.sample"
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :         LOG_E("at_client_test  - AT client send commands to AT server.");
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :         LOG_E("No memory for response structure!");
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :         LOG_E("AT client send commands failed or return response error!");
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :         LOG_D("Response buffer");
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :                 LOG_D("line %d buffer : %s", line_num, line_buffer);
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :                 LOG_E("Parse line buffer error!");
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :         LOG_D(" Parse arguments");
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :             LOG_D("Station IP  : %s", resp_arg);
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :             LOG_E("Parse error, current line buff : %s", at_resp_get_line(resp, 4));
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :             LOG_D("Station MAC : %s", resp_arg);
at_client_test in at_sample_client.c (packages\at_device-latest\samples) :             LOG_E("Parse error, current line buff : %s", at_resp_get_line(resp, 5));
at_sample_ec20.c (packages\at_device-latest\samples) line 27 : #define LOG_TAG                        "at.sample"
at_sample_esp8266.c (packages\at_device-latest\samples) line 27 : #define LOG_TAG                        "at.sample"
at_sample_m26.c (packages\at_device-latest\samples) line 27 : #define LOG_TAG                        "at.sample"
at_sample_mw31.c (packages\at_device-latest\samples) line 27 : #define LOG_TAG                        "at.sample"
at_sample_rw007.c (packages\at_device-latest\samples) line 27 : #define LOG_TAG                        "at.sample"
at_sample_sim76xx.c (packages\at_device-latest\samples) line 27 : #define LOG_TAG                        "at.sample"
at_sample_sim800c.c (packages\at_device-latest\samples) line 27 : #define LOG_TAG                        "at.app"
at_server.c (rt-thread\components\net\at\src) line 19 : #define LOG_TAG              "at.svr"
at_server_init in at_server.c (rt-thread\components\net\at\src) :         LOG_E("AT server session initialize failed! No memory for at_server structure !");
at_server_init in at_server.c (rt-thread\components\net\at\src) :         LOG_E("AT server session initialize failed! at_rx_notice semaphore create failed!");
at_server_init in at_server.c (rt-thread\components\net\at\src) :         LOG_E("AT device initialize failed! Not find the device : %s.", AT_SERVER_DEVICE);
at_server_init in at_server.c (rt-thread\components\net\at\src) :         LOG_I("RT-Thread AT server (V%s) initialize success.", AT_SW_VERSION);
at_server_init in at_server.c (rt-thread\components\net\at\src) :         LOG_E("RT-Thread AT server (V%s) initialize failed(%d).", AT_SW_VERSION, result);
at_port_reset in at_server.c (rt-thread\components\net\at\src) :     LOG_E("The reset for AT server is not implement.");
at_port_factory_reset in at_server.c (rt-thread\components\net\at\src) :     LOG_E("The factory reset for AT server is not implement.");
at_socket.c (rt-thread\components\net\at\at_socket) line 27 : #define LOG_TAG              "at.skt"
at_recvpkt_put in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("No memory for receive packet table!");
at_do_event_changes in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("Not supported event (%d)", event);
at_do_event_clean in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("Not supported event (%d)", event);
alloc_socket_by_device in at_socket.c (rt-thread\components\net\at\at_socket) :             LOG_E("No memory for socket allocation lock!");
alloc_socket_by_device in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("No memory socket receive notic semaphore create.");
alloc_socket_by_device in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("No memory for socket receive mutex create.");
at_socket in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("Don't support socket type (%d)!", type);
at_connect in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("Socket(%d) connect state is %d.", sock->socket, sock->state);
at_recvfrom in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("AT recvfrom input data or length error!");
at_recvfrom in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("received data error, current socket (%d) state (%d) is error.", socket, sock->state);
at_recvfrom in at_socket.c (rt-thread\components\net\at\at_socket) :             LOG_E("AT socket (%d) receive timeout (%d)!", socket, timeout);
at_recvfrom in at_socket.c (rt-thread\components\net\at\at_socket) :                 LOG_D("received data exit, current socket (%d) is closed by remote.", socket);
at_sendto in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("AT sendto input data or size error!");
at_sendto in at_socket.c (rt-thread\components\net\at\at_socket) :             LOG_E("send data error, current socket (%d) state (%d) is error.", socket, sock->state);
at_sendto in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("Socket (%d) type %d is not support.", socket, sock->type);
at_getsockopt in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("AT getsocketopt input option value or option length error!");
at_getsockopt in at_socket.c (rt-thread\components\net\at\at_socket) :             LOG_E("AT socket (%d) not support option name : %d.", socket, optname);
at_getsockopt in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("AT socket (%d) not support option level : %d.", socket, level);
at_setsockopt in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("AT setsockopt input option value error!");
at_setsockopt in at_socket.c (rt-thread\components\net\at\at_socket) :             LOG_E("AT socket (%d) not support option name : %d.", socket, optname);
at_setsockopt in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("AT socket (%d) not support option level : %d.", socket, level);
at_gethostbyname in at_socket.c (rt-thread\components\net\at\at_socket) :         LOG_E("AT gethostbyname input name error!");
at_socket_sim800c.c (packages\at_device-latest\class\sim800c) line 31 : #define LOG_TAG                        "at.skt"
sim800c_socket_close in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("no memory for sim800c device(%s) response structure.", device->name);
sim800c_socket_close in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) socket(%d) close failed, wait close OK timeout.", device->name, device_socket);
sim800c_socket_connect in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("no memory for sim800c device(%s) response structure.", device->name);
sim800c_socket_connect in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("sim800c device(%s) not supported connect type : %d.", device->name, type);
sim800c_socket_connect in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) socket(%d) connect failed, wait connect result timeout.",device->name, device_socket);
sim800c_socket_connect in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) socket(%d) connect failed, wait connect OK|FAIL timeout.", device->name, device_socket);
sim800c_socket_connect in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_D("sim800c device(%s) socket(%d) connect failed, maybe the socket was not be closed at the last time and now will retry.", 
sim800c_socket_connect in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) socket(%d) connect failed.", device->name, device_socket);
sim800c_socket_send in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("no memory for sim800c device(%s) response structure.", device->name);
sim800c_socket_send in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("sim800c device(%s) socket(%d) send failed, wait connect result timeout.", device->name, device_socket);
sim800c_socket_send in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("simm800c device(%s) socket(%d) send failed, wait connect OK|FAIL timeout.", device->name, device_socket);
sim800c_socket_send in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :             LOG_E("simm800c device(%s) socket(%d) send failed.",device->name, device_socket);
sim800c_domain_resolve in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get first initialization sim800c device failed.");
sim800c_domain_resolve in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("no memory for sim800c device(%s) response structure.", device->name);
urc_connect_func in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get sim800c device by client name(%s) failed.", client_name);
urc_send_func in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get sim800c device by client name(%s) failed.", client_name);
urc_close_func in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get sim800c device by client name(%s) failed.", client_name);
urc_recv_func in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("get m26 device by client name(%s) failed.", client_name);
urc_recv_func in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("no memory for sim800c device(%s) URC receive buffer (%d).", device->name, bfsz);
urc_recv_func in at_socket_sim800c.c (packages\at_device-latest\class\sim800c) :         LOG_E("sim800c device(%s) receive size(%d) data failed.", device->name, bfsz);
link_required in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("link_required: %d\n", unit));
link_terminated in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("link_terminated: %d\n", unit));
link_terminated in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_NOTICE, ("Connection terminated.\n"));
link_down in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("link_down: %d\n", unit));
link_established in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("link_established: unit %d; Lowering up all protocols...\n", unit));
link_established in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       AUTHDEBUG(LOG_WARNING, ("peer refused to authenticate\n"));
link_established in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         AUTHDEBUG(LOG_ERR, ("No secret found for PAP login\n"));
auth_peer_fail in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("auth_peer_fail: %d proto=%X\n", unit, protocol));
auth_peer_success in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("auth_peer_success: %d proto=%X\n", unit, protocol));
auth_peer_success in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       AUTHDEBUG(LOG_WARNING, ("auth_peer_success: unknown protocol %x\n", protocol));
auth_withpeer_fail in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("auth_withpeer_fail: %d proto=%X\n", unit, protocol));
auth_withpeer_success in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("auth_withpeer_success: %d proto=%X\n", unit, protocol));
auth_withpeer_success in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       AUTHDEBUG(LOG_WARNING, ("auth_peer_success: unknown protocol %x\n", protocol));
np_up in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("np_up: %d proto=%X\n", unit, proto));
np_up in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     AUTHDEBUG(LOG_INFO, ("np_up: maxconnect=%d idle_time_limit=%d\n",ppp_settings.maxconnect,ppp_settings.idle_time_limit));
np_down in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("np_down: %d proto=%X\n", unit, proto));
np_finished in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("np_finished: %d proto=%X\n", unit, proto));
check_idle in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     AUTHDEBUG(LOG_INFO, ("Terminating connection due to lack of activity.\n"));
connect_time_expired in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("Connect time expired\n"));
auth_reset in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   AUTHDEBUG(LOG_INFO, ("auth_reset: %d\n", unit));
check_passwd in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       AUTHDEBUG(LOG_WARNING, ("%d LOGIN FAILURES BY %s\n", attempts, user));
get_secret in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     AUTHDEBUG(LOG_ERR, ("Secret for %s on %s is too long\n", client, server));
get_secret in auth.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     AUTHDEBUG(LOG_ERR, ("Secret for %s on %s is too long\n", client, server));
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     int log_buf_len = AWSS_STATIS_DB_BUF_LEN + strlen(AWSS_STATIS_FMT) + 21;
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     char *log_content = NULL;
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     char *log_buf = NULL;
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     log_content = os_zalloc(AWSS_STATIS_DB_BUF_LEN + 1);
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     if (log_content == NULL) {
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     log_buf = os_zalloc(log_buf_len + 1);
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     if (log_buf == NULL) {
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :         len += HAL_Snprintf(log_buf + len, log_buf_len - len, elem_fmt, "SyncToken",
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :         HAL_Snprintf(log_content, AWSS_STATIS_DB_BUF_LEN, AWSS_STATIS_FMT, (uint32_t)HAL_UptimeMs(), "BIND_TRACE",
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :                      module == NULL ? "default" : module, awss_statis_db_trace_id, log_buf);
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :         awss_build_packet(AWSS_CMP_PKT_TYPE_REQ, id_str, ILOP_VER, METHOD_LOG_POST, log_content, 0,
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :                           log_buf, &log_buf_len);
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :         awss_debug("%s\n", log_buf);
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :         ret = awss_cmp_mqtt_send(statis_topic, log_buf, strlen(log_buf), 0);
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     HAL_Free(log_buf);
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     HAL_Free(log_content);
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     if (log_content) {
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :         HAL_Free(log_content);
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :     if (log_buf) {
awss_bind_report_statis in awss_bind_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) :         HAL_Free(log_buf);
awss_check_reset in awss_dev_reset.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl\awss_reset) :     log_info("[RST]", "need report rst\r\n");
awss_dev_reset_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl\awss_reset) line 8 : #define devrst_err(...)               log_err("devrst", __VA_ARGS__)
awss_dev_reset_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl\awss_reset) line 9 : #define devrst_info(...)              log_info("devrst", __VA_ARGS__)
awss_dev_reset_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl\awss_reset) line 10 : #define devrst_debug(...)             log_debug("devrst", __VA_ARGS__)
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 5 : #ifndef __AWSS_LOG_H__
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 6 : #define __AWSS_LOG_H__
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 10 : #define awss_flow(...)      log_flow("awss", __VA_ARGS__)
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 11 : #define awss_debug(...)     log_debug("awss", __VA_ARGS__)
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 12 : #define awss_info(...)      log_info("awss", __VA_ARGS__)
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 13 : #define awss_warn(...)      log_warning("awss", __VA_ARGS__)
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 14 : #define awss_err(...)       log_err("awss", __VA_ARGS__)
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 15 : #define awss_crit(...)      log_crit("awss", __VA_ARGS__)
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 16 : #define awss_emerg(...)     log_emerg("awss", __VA_ARGS__)
awss_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 17 : #define awss_trace(...)     log_crit("awss", __VA_ARGS__)
awss_packet.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_bind\impl) line 50 : #define METHOD_LOG_POST                      "things.log.post"
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     int log_buf_len = AWSS_STATIS_BUF_LEN + strlen(AWSS_STATIS_FMT) + 21;
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     char *log_content = NULL;
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     char *log_buf = NULL;
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     log_content = os_zalloc(AWSS_STATIS_BUF_LEN + 1);
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     if (log_content == NULL)
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     log_buf = os_zalloc(log_buf_len + 1);
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     if (log_buf == NULL)
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         len += HAL_Snprintf(log_buf + len, log_buf_len - len, elem_fmt, "ConnRouter",
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         len += HAL_Snprintf(log_buf + len, log_buf_len - len, elem_fmt, "Smartconfig",
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         len += HAL_Snprintf(log_buf + len, log_buf_len - len, elem_fmt, "Smartconfig-wps",
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         len += HAL_Snprintf(log_buf + len, log_buf_len - len, elem_fmt, "Aha",
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         len += HAL_Snprintf(log_buf + len, log_buf_len - len, elem_fmt, "Adha",
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         len += HAL_Snprintf(log_buf + len, log_buf_len - len, elem_fmt, "Zconfig",
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         len += HAL_Snprintf(log_buf + len, log_buf_len - len, elem_fmt, "Dev-ap",
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         log_buf[len - 1] = '\0';  /* remove end of ',' */
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         HAL_Snprintf(log_content, AWSS_STATIS_BUF_LEN, AWSS_STATIS_FMT, (uint32_t)HAL_UptimeMs(), "AWSS_TRACE",
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :                 module == NULL ? "default" : module, awss_statis_trace_id, log_buf);
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         awss_build_packet(AWSS_CMP_PKT_TYPE_REQ, id_str, ILOP_VER, METHOD_LOG_POST, log_content, 0,
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :                 log_buf, &log_buf_len);
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         awss_debug("%s\n", log_buf);
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :         ret = awss_cmp_mqtt_send(statis_topic, log_buf, strlen(log_buf), 0);
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     HAL_Free(log_buf);
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     HAL_Free(log_content);
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     if (log_content) HAL_Free(log_content);
awss_report_statis in awss_statis.c (packages\ali-iotkit-latest\iotkit-embedded\src\wifi_provision\frameworks\statics) :     if (log_buf) HAL_Free(log_buf);
beep.c (applications) line 28 : #define LOG_TAG              	"app.beep"    
beep_init in beep.c (applications) :         LOG_D("pwm device %s not found!\n", BEEP_PWM_DEVICE);
beep_song_thread in beep.c (applications) : 		LOG_D("beep driver initial failed.");
beep_song_thread in beep.c (applications) : 		LOG_D("beep mailbox create failed.");
rt_mmcsd_req_blk in block_dev.c (rt-thread\components\drivers\sdio) :                 LOG_E("error %d requesting status", err);
rt_mmcsd_req_blk in block_dev.c (rt-thread\components\drivers\sdio) :         LOG_E("mmcsd request blocks error");
rt_mmcsd_req_blk in block_dev.c (rt-thread\components\drivers\sdio) :         LOG_E("%d,%d,%d, 0x%08x,0x%08x",
mmcsd_set_blksize in block_dev.c (rt-thread\components\drivers\sdio) :         LOG_E("MMCSD: unable to set block size to %d: %d", cmd.arg, err);
rt_mmcsd_blk_probe in block_dev.c (rt-thread\components\drivers\sdio) :     LOG_D("probe mmcsd block device!");
rt_mmcsd_blk_probe in block_dev.c (rt-thread\components\drivers\sdio) :         LOG_E("allocate partition sector buffer failed!");
rt_mmcsd_blk_probe in block_dev.c (rt-thread\components\drivers\sdio) :                 LOG_E("mmcsd:malloc memory failed!");
rt_mmcsd_blk_probe in block_dev.c (rt-thread\components\drivers\sdio) :             	LOG_I("try to mount file system!");
rt_mmcsd_blk_probe in block_dev.c (rt-thread\components\drivers\sdio) :         LOG_E("read mmcsd first sector failed");
ChapChallengeTimeout in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_ERR, ("Peer failed to respond to CHAP challenge\n"));
ChapInput in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapInput: rcvd short header.\n"));
ChapInput in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapInput: rcvd illegal length.\n"));
ChapInput in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapInput: rcvd short packet.\n"));
ChapInput in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       CHAPDEBUG(LOG_WARNING, ("Unknown CHAP code (%d) received.\n", code));
ChapReceiveChallenge in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: Rcvd id %d.\n", id));
ChapReceiveChallenge in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: in state %d\n",
ChapReceiveChallenge in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: rcvd short packet.\n"));
ChapReceiveChallenge in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: rcvd short packet.\n"));
ChapReceiveChallenge in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: received name field '%s'\n",
ChapReceiveChallenge in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: using '%s' as remote name\n",
ChapReceiveChallenge in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_WARNING, ("No CHAP secret found for authenticating us to %s\n",
ChapReceiveChallenge in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("unknown digest type %d\n", cstate->resp_type));
ChapReceiveResponse in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("ChapReceiveResponse: Rcvd id %d.\n", id));
ChapReceiveResponse in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapReceiveResponse: in state %d\n",
ChapReceiveResponse in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapReceiveResponse: rcvd short packet.\n"));
ChapReceiveResponse in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapReceiveResponse: rcvd short packet.\n"));
ChapReceiveResponse in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("ChapReceiveResponse: received name field: %s\n",
ChapReceiveResponse in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_WARNING, ("No CHAP secret found for authenticating %s\n",
ChapReceiveResponse in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         CHAPDEBUG(LOG_INFO, ("unknown digest type %d\n", cstate->chal_type));
ChapReceiveResponse in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_ERR, ("CHAP peer authentication failed\n"));
ChapReceiveSuccess in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("ChapReceiveSuccess: Rcvd id %d.\n", id));
ChapReceiveSuccess in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapReceiveSuccess: in state %d\n",
ChapReceiveFailure in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("ChapReceiveFailure: Rcvd id %d.\n", id));
ChapReceiveFailure in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     CHAPDEBUG(LOG_INFO, ("ChapReceiveFailure: in state %d\n",
ChapReceiveFailure in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_ERR, ("CHAP authentication failed\n"));
ChapSendChallenge in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("ChapSendChallenge: Sent id %d.\n", cstate->chal_id));
ChapSendStatus in chap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("ChapSendStatus: Sent code %d, id %d.\n", code,
ChallengeResponse in chpms.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   log_packet(ZPasswordHash, sizeof(ZPasswordHash), "ChallengeResponse - ZPasswordHash", LOG_DEBUG);
ChallengeResponse in chpms.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   log_packet(response, 24, "ChallengeResponse - response", LOG_DEBUG);
DesEncrypt in chpms.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",
DesEncrypt in chpms.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",
DesEncrypt in chpms.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",
DesEncrypt in chpms.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",
MakeKey in chpms.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("MakeKey: 56-bit input : %02X%02X%02X%02X%02X%02X%02X\n",
MakeKey in chpms.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("MakeKey: 64-bit output: %02X%02X%02X%02X%02X%02X%02X%02X\n",
ChapMS in chpms.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   CHAPDEBUG(LOG_INFO, ("ChapMS: secret is '%.*s'\n", secret_len, secret));
Cloud_CoAPExport.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) line 60 : #define COAP_TRC(...)     log_debug("coap_cloud", __VA_ARGS__)
Cloud_CoAPExport.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) line 61 : #define COAP_DUMP(...)    log_debug("coap_cloud", __VA_ARGS__)
Cloud_CoAPExport.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) line 62 : #define COAP_DEBUG(...)   log_debug("coap_cloud", __VA_ARGS__)
Cloud_CoAPExport.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) line 63 : #define COAP_INFO(...)    log_info("coap_cloud", __VA_ARGS__)
Cloud_CoAPExport.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) line 64 : #define COAP_WRN(...)     log_warning("coap_cloud", __VA_ARGS__)
Cloud_CoAPExport.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) line 65 : #define COAP_ERR(...)     log_err("coap_cloud", __VA_ARGS__)
Cloud_CoAPRespMessage_handle in CoAPMessage.c (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) : #ifdef INFRA_LOG_NETWORK_PAYLOAD
Cloud_CoAPRespMessage_handle in CoAPMessage.c (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) :             iotx_facility_json_print((const char *)message->payload, LOG_INFO_LEVEL, '<');
CoAPPlatform.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\CoAPPacket) line 26 :     #define COAP_ERR(...)           log_err("coap_local", __VA_ARGS__)
CoAPPlatform.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\CoAPPacket) line 27 :     #define COAP_WRN(...)           log_warning("coap_local", __VA_ARGS__)
CoAPPlatform.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\CoAPPacket) line 28 :     #define COAP_INFO(...)          log_info("coap_local", __VA_ARGS__)
CoAPPlatform.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\CoAPPacket) line 29 :     #define COAP_TRC(...)           log_debug("coap_local", __VA_ARGS__)
CoAPPlatform.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\CoAPPacket) line 30 :     #define COAP_DUMP(...)          log_debug("coap_local", __VA_ARGS__)
CoAPPlatform.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\CoAPPacket) line 31 :     #define COAP_DEBUG(...)         log_debug("coap_local", __VA_ARGS__)
CoAPPlatform.h (packages\ali-iotkit-latest\iotkit-embedded\src\coap\CoAPPacket) line 32 :     #define COAP_FLOW(...)          log_flow("coap_local", __VA_ARGS__)
main in coap_example.c (packages\ali-iotkit-latest\iotkit-embedded\src\coap\examples) :     IOT_SetLogLevel(IOT_LOG_DEBUG);
main in coap_example.c (packages\ali-iotkit-latest\iotkit-embedded\src\coap\examples) :             IOT_SetLogLevel(IOT_LOG_NONE);
main in coap_example.c (packages\ali-iotkit-latest\iotkit-embedded\src\coap\examples) :     IOT_DumpMemoryStats(IOT_LOG_DEBUG);
main in coap_example.c (packages\ali-iotkit-latest\iotkit-embedded\src\coap\examples) :     IOT_SetLogLevel(IOT_LOG_NONE);
console_be.c (rt-thread\components\utilities\ulog\backend) line 14 : #ifdef ULOG_BACKEND_USING_CONSOLE
console_be.c (rt-thread\components\utilities\ulog\backend) line 16 : #if defined(ULOG_ASYNC_OUTPUT_BY_THREAD) && ULOG_ASYNC_OUTPUT_THREAD_STACK < 384
console_be.c (rt-thread\components\utilities\ulog\backend) line 17 : #error "The thread stack size must more than 384 when using async output by thread (ULOG_ASYNC_OUTPUT_BY_THREAD)"
console_be.c (rt-thread\components\utilities\ulog\backend) line 20 : static struct ulog_backend console;
console_be.c (rt-thread\components\utilities\ulog\backend) line 22 : void ulog_console_backend_output(struct ulog_backend *backend, rt_uint32_t level, const char *tag, rt_bool_t is_raw,
console_be.c (rt-thread\components\utilities\ulog\backend) line 46 : int ulog_console_backend_init(void)
ulog_console_backend_init in console_be.c (rt-thread\components\utilities\ulog\backend) :     ulog_init();
ulog_console_backend_init in console_be.c (rt-thread\components\utilities\ulog\backend) :     console.output = ulog_console_backend_output;
ulog_console_backend_init in console_be.c (rt-thread\components\utilities\ulog\backend) :     ulog_backend_register(&console, "console", RT_TRUE);
console_be.c (rt-thread\components\utilities\ulog\backend) line 55 : INIT_PREV_EXPORT(ulog_console_backend_init);
console_be.c (rt-thread\components\utilities\ulog\backend) line 57 : #endif /* ULOG_BACKEND_USING_CONSOLE */
demand_rexmit in demand.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 		    syslog(LOG_INFO,"Open ICMP %s -> %s\n",
demand_rexmit in demand.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 		    syslog(LOG_INFO,"Open %s %s:%d -> %s:%d\n",
demand_rexmit in demand.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 		    syslog(LOG_INFO,"Open ICMP %s -> %s\n",
demand_rexmit in demand.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 		    syslog(LOG_INFO,"Open %s %s:%d -> %s:%d\n",
mbedtls_des_init in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des init ctx[%08x]", ctx->des_context);
mbedtls_des_init in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des init. but ctx is null");
mbedtls_des_free in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des free ctx[%08x]", ctx->des_context);
mbedtls_des_free in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des free. but ctx is null");
mbedtls_des3_init in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("3des init ctx[%08x]", ctx->des3_context);
mbedtls_des3_init in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("3des init. but ctx is null");
mbedtls_des3_free in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("3des free ctx[%08x]", ctx->des3_context);
mbedtls_des3_free in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("3des free. but ctx is null");
mbedtls_des_key_set_parity in des_alt.c (packages\mbedtls-latest\ports\src) :     LOG_E("fun[%s] is run. but this fun no entity", __FUNCTION__);
mbedtls_des_key_check_key_parity in des_alt.c (packages\mbedtls-latest\ports\src) :     LOG_E("fun[%s] is run. but this fun no entity", __FUNCTION__);
mbedtls_des_key_check_weak in des_alt.c (packages\mbedtls-latest\ports\src) :     LOG_E("fun[%s] is run. but this fun no entity", __FUNCTION__);
mbedtls_des_setkey in des_alt.c (packages\mbedtls-latest\ports\src) :     LOG_E("fun[%s] is run. but this fun no entity", __FUNCTION__);
mbedtls_des_setkey_enc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des enc setkey ctx[%08x] key:%08x len:%d",
mbedtls_des_setkey_enc in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("des enc setkey err");
mbedtls_des_setkey_enc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des enc setkey. but ctx is null");
mbedtls_des_setkey_dec in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des dec setkey ctx[%08x] key:%08x len:%d",
mbedtls_des_setkey_dec in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("des dec setkey err");
mbedtls_des_setkey_dec in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des dec setkey. but ctx is null");
mbedtls_des3_set2key_enc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des3 enc setkey ctx[%08x] key:%08x len:%d",
mbedtls_des3_set2key_enc in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("des3 enc setkey err");
mbedtls_des3_set2key_enc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des enc setkey. but ctx is null");
mbedtls_des3_set2key_dec in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des3 dec setkey ctx[%08x] key:%08x len:%d",
mbedtls_des3_set2key_dec in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("des3 dec setkey err");
mbedtls_des3_set2key_dec in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des3 dec setkey. but ctx is null");
mbedtls_des3_set3key_enc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des3 enc setkey ctx[%08x] key:%08x len:%d",
mbedtls_des3_set3key_enc in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("des3 enc setkey err");
mbedtls_des3_set3key_enc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des enc setkey. but ctx is null");
mbedtls_des3_set3key_dec in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des3 dec setkey ctx[%08x] key:%08x len:%d",
mbedtls_des3_set3key_dec in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("des3 dec setkey err");
mbedtls_des3_set3key_dec in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des3 dec setkey. but ctx is null");
mbedtls_des_crypt_ecb in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des crypt ecb ctx[%08x] mode:%d in:%08x out:%08x",
mbedtls_des_crypt_ecb in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("des crypt ecb err");
mbedtls_des_crypt_ecb in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des crypt ecb. but ctx is null");
mbedtls_des_crypt_cbc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("des crypt cbc ctx[%08x] mode:%d len:%d iv:%08x in:%08x out:%08x",
mbedtls_des_crypt_cbc in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("des crypt cbc err");
mbedtls_des_crypt_cbc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("des crypt cbc. but ctx is null");
mbedtls_des3_crypt_ecb in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("3des crypt ecb ctx[%08x] mode:%d in:%08x out:%08x",
mbedtls_des3_crypt_ecb in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("3des crypt ecb err");
mbedtls_des3_crypt_ecb in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("3des crypt ecb. but ctx is null");
mbedtls_des3_crypt_cbc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("3des crypt cbc ctx[%08x] mode:%d len:%d iv:%08x in:%08x out:%08x",
mbedtls_des3_crypt_cbc in des_alt.c (packages\mbedtls-latest\ports\src) :             LOG_E("3des crypt cbc err");
mbedtls_des3_crypt_cbc in des_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("3des crypt cbc. but ctx is null");
dev_modbus_rtu.c (applications) line 72 : #define LOG_TAG              "modbus.rtu"    
dev_modbus_rtu.c (applications) line 73 : #define LOG_LVL              LOG_LVL_ASSERT
dev_modbus_thread in dev_modbus_rtu.c (applications) : 								LOG_D("door control message have some error to igiore.");
dev_modbus_thread in dev_modbus_rtu.c (applications) : 								LOG_D("door control message have some error to igiore.");
dev_modbus_thread in dev_modbus_rtu.c (applications) : 							LOG_D("modbus device[%d] write success.", i + 1);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 							LOG_D("modbus device[%d] write failed.", i + 1);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 							LOG_D("modbus device[%d] read success.", i + 1);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 									LOG_D("door[%d] open failed.", (i * device_chn_num) + j + 1);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 							LOG_D("modbus device[%d] read failed.", i + 1);                            
dev_modbus_thread in dev_modbus_rtu.c (applications) : 						LOG_I("set door max open time: %dsec", open_time);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 								LOG_D("modbus device[%d] door max open time write failed.", i + 1);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 						LOG_I("set door max power time: %dsec", power_time);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 								LOG_D("modbus device[%d] door max power time write failed.", i + 1);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 					LOG_D("modbus device[%d] door status read failed.", i + 1);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 					LOG_D("modbus device[%d] door alarm read failed.", i + 1);
dev_modbus_thread in dev_modbus_rtu.c (applications) : 			LOG_D("queue recv error.");
dev_reset_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_reset) line 17 : #define devrst_err(...)               log_err("devrst", __VA_ARGS__)
dev_reset_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_reset) line 18 : #define devrst_info(...)              log_info("devrst", __VA_ARGS__)
dev_reset_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_reset) line 19 : #define devrst_debug(...)             log_debug("devrst", __VA_ARGS__)
fd_new in dfs.c (rt-thread\components\dfs\src) :         LOG_E("DFS fd new is failed! Could not found an empty fd entry.");
dfs_file_open in dfs_file.c (rt-thread\components\dfs\src) :     LOG_D("open file:%s", fullpath);
dfs_file_open in dfs_file.c (rt-thread\components\dfs\src) :     LOG_D("open in filesystem:%s", fs->ops->name);
dfs_file_open in dfs_file.c (rt-thread\components\dfs\src) :         LOG_D("Actual file path: %s", fd->path);
dfs_file_open in dfs_file.c (rt-thread\components\dfs\src) :         LOG_D("%s open failed", fullpath);
dfs_file_open in dfs_file.c (rt-thread\components\dfs\src) :     LOG_D("open successful");
dfs_file_stat in dfs_file.c (rt-thread\components\dfs\src) :         LOG_E(
dfs_file_stat in dfs_file.c (rt-thread\components\dfs\src) :             LOG_E(
dfs_register in dfs_fs.c (rt-thread\components\dfs\src) :         LOG_E("There is no space to register this file system (%s).", ops->name);
dfs_mount in dfs_fs.c (rt-thread\components\dfs\src) :         LOG_E("There is no space to mount this file system (%s).", filesystemtype);
dfs_mkfs in dfs_fs.c (rt-thread\components\dfs\src) :         LOG_E("Device (%s) was not found", device_name);
dfs_mkfs in dfs_fs.c (rt-thread\components\dfs\src) :             LOG_E("The file system (%s) mkfs function was not implement", fs_name);
dfs_mkfs in dfs_fs.c (rt-thread\components\dfs\src) :     LOG_E("File system (%s) was not found.", fs_name);
dlmodule_load_shared_object in dlelf.c (rt-thread\components\libc\libdl) :         LOG_D("LOAD segment: %d, 0x%p, 0x%08x", index, phdr[index].p_vaddr, phdr[index].p_memsz);
dlmodule_load_shared_object in dlelf.c (rt-thread\components\libc\libdl) :                 LOG_W("warning: too much padding before segment %d", index);
dlmodule_load_shared_object in dlelf.c (rt-thread\components\libc\libdl) :     LOG_D("module size: %d, vstart_addr: 0x%p", module_size, vstart_addr);
dlmodule_load_shared_object in dlelf.c (rt-thread\components\libc\libdl) :             LOG_D("relocate symbol %s shndx %d", strtab + sym->st_name, sym->st_shndx);
dlmodule_load_shared_object in dlelf.c (rt-thread\components\libc\libdl) :                 LOG_D("relocate symbol: %s", strtab + sym->st_name);
dlmodule_load_shared_object in dlelf.c (rt-thread\components\libc\libdl) :                     LOG_E("Module: can't find %s in kernel symbol table", strtab + sym->st_name);
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :             LOG_D("load text 0x%x, size %d", ptr, shdr[index].sh_size);
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :             LOG_D("load rodata 0x%x, size %d, rodata 0x%x", ptr, 
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :             LOG_D("load data 0x%x, size %d, data 0x%x", ptr, 
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :             LOG_D("load bss 0x%x, size %d", ptr, shdr[index].sh_size);
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :             LOG_D("relocate symbol: %s", strtab + sym->st_name);
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :                         LOG_D("rodata");
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :                         LOG_D("bss");
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :                         LOG_D("data");
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :                     LOG_D("relocate symbol: %s", strtab + sym->st_name);
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :                         LOG_D("symbol addr 0x%x", addr);
dlmodule_load_relocated_object in dlelf.c (rt-thread\components\libc\libdl) :                         LOG_E("Module: can't find %s in kernel symbol table",
_dlmodule_thread_entry in dlmodule.c (rt-thread\components\libc\libdl) :     LOG_D("run main entry: 0x%p with %s",
dlmodule_destroy in dlmodule.c (rt-thread\components\libc\libdl) :                     LOG_E("Unsupported oject type in module.");
dlmodule_destroy in dlmodule.c (rt-thread\components\libc\libdl) :                     LOG_E("Unsupported oject type in module.");
dlmodule_load in dlmodule.c (rt-thread\components\libc\libdl) :     LOG_D("rt_module_load: %.*s", RT_NAME_MAX, module->parent.name);
iotx_dm_subscribe in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("Devid %d Sub Completed", devid);
iotx_dm_close in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) : #ifdef LOG_REPORT_TO_CLOUD
iotx_dm_close in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     remove_log_poll();
dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 374 : #ifdef LOG_REPORT_TO_CLOUD
dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 375 : int iotx_dm_log_post(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len)
iotx_dm_log_post in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     res = dm_mgr_upstream_thing_log_post(devid, payload, payload_len, 0);
iotx_dm_send_service_response in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Service Response Payload, Length: %d, Payload: %.*s", payload_len, payload_len, payload);
iotx_dm_send_property_get_response in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Property Get Response Payload, Length: %d, Payload: %.*s", payload_len, payload_len, payload);
iotx_dm_deprecated_post_property_end in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Property Post Payload, Length: %d, Payload: %s", strlen(payload), payload);
iotx_dm_deprecated_post_event in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Event Post Payload, Length: %d, Payload: %s", strlen(payload), payload);
iotx_dm_deprecated_post_event in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Event Method: %s", method);
iotx_dm_deprecated_send_service_response in dm_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Service Response Payload, Length: %d, Payload: %s", strlen(payload), payload);
dm_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) line 6 : #ifdef LOG_REPORT_TO_CLOUD
dm_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) line 7 :     #include "iotx_log_report.h"
dm_client_subscribe_all in dm_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) :         dm_log_info("index: %d", index);
_dm_client_event_cloud_connected_handle in dm_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) :     dm_log_info("IOTX_CM_EVENT_CLOUD_CONNECTED");
_dm_client_event_cloud_disconnect_handle in dm_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) :     dm_log_info("IOTX_CM_EVENT_CLOUD_DISCONNECT");
dm_client_thing_service_property_set in dm_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) : #ifdef LOG_REPORT_TO_CLOUD
dm_client_open in dm_client_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) :     dm_log_info("CM Fd: %d", ctx->fd);
dm_client_subscribe in dm_client_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) :     dm_log_info("Subscribe Result: %d", res);
dm_client_unsubscribe in dm_client_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) :     dm_log_info("Unsubscribe Result: %d", res);
dm_client_publish in dm_client_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\client) :     dm_log_info("Publish Result: %d", res);
_dm_cota_send_new_config_to_user in dm_cota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("Send To User: %s", message);
dm_cota_status_check in dm_cota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_debug("Cota Status Check");
_dm_fota_send_new_config_to_user in dm_fota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("Send To User: %s", message);
dm_fota_perform_sync in dm_fota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_err("Fota write firmware failed");
dm_fota_status_check in dm_fota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_debug("Fota Status Check");
dm_fota_request_image in dm_fota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("invalid input");
dm_fota_request_image in dm_fota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("failed to malloc");
dm_ipc_msg_insert in dm_ipc.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("dm msg list size: %d, max size: %d", ctx->msg_list.size, ctx->msg_list.max_size);
dm_ipc_msg_insert in dm_ipc.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_warning("dm ipc list full");
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 7 : #ifdef LOG_REPORT_TO_CLOUD
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 11 : const char THING_LOG_POST_PARAMS_HEAD[] =
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 13 : const char THING_LOG_POST_PARAMS_BODY[] =
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 15 : const char THING_LOG_POST_PARAMS_END[] =
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 18 : char *g_log_poll = NULL;
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 19 : static char *current_log_pos = NULL;
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 21 : int remove_log_poll()
remove_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     if (NULL != g_log_poll) {
remove_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         HAL_Free(g_log_poll);
remove_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         g_log_poll = NULL;
remove_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         current_log_pos = NULL;
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 32 : unsigned int push_log(const char *input_log, int input_log_size)
push_log in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     if (NULL == current_log_pos || NULL == input_log || input_log_size <= 0) {
push_log in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("invalid params");
push_log in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     memcpy(current_log_pos, input_log, input_log_size);
push_log in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     current_log_pos += input_log_size;
push_log in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     return (current_log_pos - g_log_poll);
add_tail in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     current_log_pos -= 1;
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 50 : void add_log_header()
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 57 : int reset_log_poll()
reset_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     if (NULL == g_log_poll) {
reset_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("log buffer is NULL");
reset_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     memset(g_log_poll, 0, LOG_POLL_SIZE);
reset_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     current_log_pos = g_log_poll;
reset_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     add_log_header();
dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 69 : int create_log_poll()
create_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     remove_log_poll();
create_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     g_log_poll = HAL_Malloc(LOG_POLL_SIZE);
create_log_poll in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     ret = reset_log_poll();
check_target_msg in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("invalid params");
set_target_msg in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_err("invalid params");
stop_sample in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     if (current_log_pos > g_log_poll) {
stop_sample in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_mgr_upstream_thing_log_post(0, NULL, 0, 1);
stop_sample in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("stop sample");
stop_sample in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     return remove_log_poll();
parse_switch_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("switch count is %d, interval is %d, target is %.*s\n", sample_count, sample_interval,
parse_switch_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("target is not propSet, return\n");
parse_switch_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("invalid sample interval\n");
parse_switch_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         ret = create_log_poll();
parse_switch_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("log switch run status is %d\n", ret);
send_permance_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("invalid params");
send_permance_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             format = THING_LOG_POST_PARAMS_HEAD;
send_permance_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             format = THING_LOG_POST_PARAMS_BODY;
send_permance_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             format = THING_LOG_POST_PARAMS_END;
send_permance_info in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     iotx_dm_log_post(0,  data, strlen((const char *)data));
get_msgid in dm_log_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("current working on a sample, return");
_dm_mgr_search_dev_by_devid in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("Device Found, devid: %d", devid); */
_dm_mgr_search_dev_by_devid in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Device Not Found, devid: %d", devid);
_dm_mgr_search_dev_by_pkdn in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("Device Found, Product Key: %s, Device Name: %s", product_key, device_name); */
_dm_mgr_search_dev_by_pkdn in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Device Not Found, Product Key: %s, Device Name: %s", product_key, device_name);
dm_mgr_upstream_thing_firmware_version_update in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("DM Send Raw Data:");
dm_mgr_upstream_thing_firmware_version_update in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("res of pub is %d:", res);
dm_mgr_upstream_thing_model_up_raw in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("DM Send Raw Data:");
dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 1217 : #ifdef LOG_REPORT_TO_CLOUD
dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 1218 : static unsigned int log_size = 0;
dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 1219 : int dm_mgr_upstream_thing_log_post(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len, int force_upload)
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     extern char *g_log_poll;
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         if (log_size + payload_len < OVERFLOW_LEN) {
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             log_size = push_log(payload, payload_len);
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             reset_log_poll();
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_err("it it too late to upload log, reset pool");
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("push log, len is %d, log_size is %d\n", payload_len, log_size);
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         if (!(log_size > REPORT_LEN && DONE == g_report_status)) {
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     log_size = add_tail();
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX, DM_URI_THING_LOG_POST,
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                                             g_log_poll, log_size + 1, "thing.log.post", &request);
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         reset_log_poll();
dm_mgr_upstream_thing_log_post in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     reset_log_poll();
dm_mgr_upstream_thing_service_response in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Service Name: %s", service_name);
dm_mgr_upstream_thing_property_get_response in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Service Name: %s", reply_service_name);
dm_mgr_upstream_rrpc_response in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Service Name: %s", service_name);
dm_mgr_deprecated_search_devid_by_node in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("Device Found, node: %p", node); */
dm_mgr_deprecated_search_devid_by_node in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Device Not Found, node: %p", node);
dm_mgr_deprecated_upstream_thing_service_response in dm_manager.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Service Name: %s", service_name);
dm_manager.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 73 : #ifdef LOG_REPORT_TO_CLOUD
dm_manager.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 74 :     int dm_mgr_upstream_thing_log_post(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len, int force_update);
dm_msg_uri_parse_pkdn in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("URI Product Key: %.*s, Device Name: %.*s", slice - start - 1, uri + start + 1, end - slice - 1,
dm_msg_request_parse in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Request Message ID: %.*s", request->id.value_length, request->id.value);
dm_msg_request_parse in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Request Message Version: %.*s", request->version.value_length, request->version.value);
dm_msg_request_parse in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Request Message Method: %.*s", request->method.value_length, request->method.value);
dm_msg_request_parse in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Request Message Params: %.*s", request->params.value_length, request->params.value);
dm_msg_response_parse in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Request Message ID: %.*s", response->id.value_length, response->id.value);
dm_msg_response_parse in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Request Message Code: %d", response->code.value_int);
dm_msg_response_parse in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Request Message Data: %.*s", response->data.value_length, response->data.value);
dm_msg_response_parse in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Current Request Message Desc: %.*s", response->message.value_length, response->message.value);
dm_msg_request in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("Wrong JSON Format, URI: %s, Payload: %s", uri, payload);
dm_msg_request in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("DM Send Message, URI: %s, Payload: %s", uri, payload);
dm_msg_response in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("Wrong JSON Format, URI: %s, Payload: %s", uri, payload);
dm_msg_response in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("Send URI: %s, Payload: %s", uri, payload);
dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 381 : #ifdef LOG_REPORT_TO_CLOUD
dm_msg_property_set in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) : #ifdef LOG_REPORT_TO_CLOUD
dm_msg_property_get in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /*  dm_log_debug("ctx: %p", ctx);
dm_msg_property_get in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :      dm_log_debug("ctx_addr_num: %0x016llX", ctx_addr_num); */
dm_msg_property_get in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("ctx_addr_str: %s", ctx_addr_str); */
dm_msg_thing_service_request in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) : #ifdef LOG_REPORT_TO_CLOUD
dm_msg_rrpc_request in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_info("Current RRPC Service ID: %.*s", serviceid_len, serviceid); */
dm_msg_thing_event_property_post_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_thing_event_post_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_thing_deviceinfo_update_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_thing_deviceinfo_delete_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_thing_dsltemplate_get_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_thing_dynamictsl_get_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_ntp_response in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("NTP Time In String: %.*s", lite_item_server_send_time.value_length, lite_item_server_send_time.value); */
dm_msg_ext_error_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("log in again test\r\n");
dm_msg_topo_add_notify in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("Current Product Key: %.*s, Device Name: %.*s",
dm_msg_thing_sub_register_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("Current Index: %d", index); */
dm_msg_thing_sub_register_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("Current Product Key: %.*s", lite_item_pk.value_length, lite_item_pk.value); */
dm_msg_thing_sub_register_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("Current Device Name: %.*s", lite_item_dn.value_length, lite_item_dn.value); */
dm_msg_thing_sub_register_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("Current Device Secret: %.*s", lite_item_ds.value_length, lite_item_ds.value); */
dm_msg_thing_sub_register_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_warning("Memory Not Enough");
dm_msg_thing_sub_unregister_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_thing_topo_add_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_thing_topo_delete_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_topo_get_reply in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_thing_topo_add in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Time Stamp: %s", timestamp); */
dm_msg_thing_topo_add in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Sign Srouce: %s", sign_source); */
dm_msg_thing_topo_add in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Sign : %s", sign); */
dm_msg_combine_login in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Time Stamp: %s", timestamp); */
dm_msg_combine_login in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Sign Srouce: %s", sign_source); */
dm_msg_combine_login in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Sign : %s", sign); */
_dm_msg_set_number in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current Key: %s", key); */
_dm_msg_set_number in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current Type: %d", data_type); */
_dm_msg_set_number in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_warning("Unkonwn Number Type");
_dm_msg_set_string in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current Key: %s", key); */
_dm_msg_set_string in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current Type: %d", data_type); */
_dm_msg_set_string in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_warning("Unkonwn String Type");
_dm_msg_set_object in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("Current Key: %.*s, Value: %.*s",
_dm_msg_set_object in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("new_key_len: %d", new_key_len); */
_dm_msg_set_object in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("New Key: %s", new_key); */
_dm_msg_set_array in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("Current Value: %.*s", lite_item_value.value_length, lite_item_value.value); */
_dm_msg_set_array in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("New Key: %s", new_key); */
dm_msg_property_set in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_info("Property Set, Size: %d", lite.size); */
dm_msg_property_get in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_info("Property Get, Size: %d", lite.size); */
dm_msg_thing_service_request in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current ID: %d", id); */
dm_msg_thing_service_request in dm_message.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_info("Service Request, Size: %d", lite.size); */
dm_msg_cache_insert in dm_message_cache.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("dmc list size: %d", ctx->dmc_list_size);
dm_msg_cache_remove in dm_message_cache.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Remove Message ID: %d", msgid);
dm_msg_cache_tick in dm_message_cache.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Message ID Timeout: %d", node->msgid);
dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 43 :     #ifdef LOG_REPORT_TO_CLOUD
dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 44 :         const char DM_URI_THING_LOG_POST[]                    DM_READ_ONLY = "thing/log/post";
dm_msg_proc_thing_model_up_raw_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_MODEL_UP_RAW_REPLY);
dm_msg_proc_thing_service_property_set in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_SERVICE_PROPERTY_SET);
dm_msg_proc_thing_service_property_get in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_SERVICE_PROPERTY_GET);
dm_msg_proc_thing_service_property_get in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("DM Property Get Failed");
dm_msg_proc_thing_service_property_post in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_EVENT_PROPERTY_POST);
dm_msg_proc_thing_service_request in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("Service Identifier: %.*s", (int)(strlen(source->uri) - serviceid_pos - 1),
dm_msg_proc_thing_event_post_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("Event Id: %.*s", eventid_end_pos - eventid_start_pos - 1, source->uri + eventid_start_pos + 1);
dm_msg_proc_thing_property_desired_get_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_PROPERTY_DESIRED_GET_REPLY);
dm_msg_proc_thing_property_desired_delete_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_PROPERTY_DESIRED_DELETE_REPLY);
dm_msg_proc_thing_deviceinfo_update_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_DEVICEINFO_UPDATE_REPLY);
dm_msg_proc_thing_deviceinfo_delete_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_DEVICEINFO_DELETE_REPLY);
dm_msg_proc_thing_dynamictsl_get_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_DYNAMICTSL_GET_REPLY);
dm_msg_proc_rrpc_request in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("Rrpc Id: %.*s", (int)(strlen(source->uri) - rrpcid_pos - 1), source->uri + rrpcid_pos + 1);
dm_disp_ntp_response in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_NTP_RESPONSE);
dm_msg_proc_thing_topo_add_notify in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_TOPO_ADD_NOTIFY);
dm_msg_proc_thing_disable in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_DISABLE);
dm_msg_proc_thing_enable in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_DISABLE);
dm_msg_proc_thing_delete in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_DELETE);
dm_msg_proc_thing_gateway_permit in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_DELETE);
dm_msg_proc_thing_sub_register_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_SUB_REGISTER_REPLY);
dm_msg_proc_thing_sub_unregister_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_SUB_UNREGISTER_REPLY);
dm_msg_proc_thing_topo_add_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_TOPO_ADD_REPLY);
dm_msg_proc_thing_topo_delete_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_TOPO_DELETE_REPLY);
dm_msg_proc_thing_topo_get_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_TOPO_GET_REPLY);
dm_msg_proc_thing_list_found_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_TOPO_GET_REPLY);
dm_msg_proc_combine_login_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_TOPO_GET_REPLY);
dm_msg_proc_combine_logout_reply in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_THING_TOPO_GET_REPLY);
dm_msg_proc_thing_dev_core_service_dev in dm_msg_process.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info(DM_URI_DEV_CORE_SERVICE_DEV);
dm_msg_process.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 46 :     #ifdef LOG_REPORT_TO_CLOUD
dm_msg_process.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 47 :         extern const char DM_URI_THING_LOG_POST[]                    DM_READ_ONLY;
dm_ota_switch_device in dm_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("could not find device by id, ret is %d", ret);
dm_ota_switch_device in dm_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("do subdevice ota, pk, dn is %s, %s", pk, dn);
dm_ota_switch_device in dm_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("OTA is processing, can not switch to another device");
dm_ota_switch_device in dm_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("dm_ota_sub ret is %d, %s, %s\n", ret, pk, dn);
dm_server.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) line 5 : #ifdef LOG_REPORT_TO_CLOUD
dm_server.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) line 6 :     #include "iotx_log_report.h"
_dm_server_malloc_context in dm_server.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) :     dm_log_info("alcs_context->ip: %s", alcs_context->ip);
_dm_server_malloc_context in dm_server.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) :     dm_log_info("alcs_context->port: %d", alcs_context->port);
dm_server_thing_service_property_set in dm_server.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) : #ifdef LOG_REPORT_TO_CLOUD
dm_server_send in dm_server_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) :         dm_log_info("Send Observe Notify Result %d", res);
dm_server_send in dm_server_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) :         dm_log_info("Send Result %d", res);
dm_server_send in dm_server_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) :         dm_log_info("Send Response Result %d", res);
dm_server_subscribe in dm_server_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) :     dm_log_info("Register Resource Result: %d", res);
dm_server_add_device in dm_server_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) :     dm_log_info("Add Device Result: %d, Product Key: %s, Device Name: %s", res, product_key, device_name);
dm_server_del_device in dm_server_adapter.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\server) :     dm_log_info("Del Device Result: %d, Product Key: %s, Device Name: %s", res, product_key, device_name);
_dm_shw_data_array_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current Key: %s, Len: %d",key,key_len);
_dm_shw_data_array_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Item Identifier: %s",input->identifier); */
_dm_shw_data_array_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_err("Unknown Data Type: %d", complex_struct->type);
_dm_shw_data_struct_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current Key: %.*s",key_len,key); */
_dm_shw_data_struct_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("Current Index: %d",array_index); */
_dm_shw_data_struct_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Unknown Data Type");
_dm_shw_data_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("Current Index: %d",array_index); */
_dm_shw_data_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("Current Input Identifier: %s",input->identifier);
_dm_shw_data_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Compare Key: %.*s",partial_offset,key); */
_dm_shw_data_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Identifier Found: %s", input->identifier);
_dm_shw_data_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_err("Unknow Data Type");
_dm_shw_event_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("TSL Event Found: %s",dtsl_event->identifier); */
_dm_shw_event_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Event Not Found: %.*s",key_len,key); */
_dm_shw_service_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("TSL Service Found: %s",dtsl_service->identifier); */
_dm_shw_service_search in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Service Not Found: %.*s",key_len,key); */
dm_shw_create in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_err("Unknown TSL Type");
dm_shw_get_service_input_output_data in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Key: %.*s", key_len, key);
dm_shw_get_service_input_output_data in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("TSL Service input/output Data Search, Event Data ID: %s", pos);
dm_shw_get_event_output_data in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Key: %.*s", key_len, key);
dm_shw_get_event_output_data in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Event Output Data Search, Event Data ID: %s",pos); */
_dm_shw_int_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Int Value Be Set(Int): %d", data_value->value_int);
_dm_shw_float_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Float Value Be Set(Float): %f", data_value->value_float);
_dm_shw_double_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Double Value Be Set(Double): %f", data_value->value_double);
_dm_shw_text_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Text Value Be Set(String): %s", data_value->value);
_dm_shw_enum_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Enum Value Be Set(Enum): %d", data_value->value_int);
_dm_shw_date_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Date Value Be Set(String): %s", data_value->value);
_dm_shw_bool_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Bool Value Be Set(Bool): %d", data_value->value_int);
_dm_shw_array_int_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Array Value Be Set(Int), Index: %d, Value: %d", index, *((int *)(complex_array->value) + index));
_dm_shw_array_float_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Array Value Be Set(Float), Index: %d, Value: %f", index,
_dm_shw_array_double_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Array Value Be Set(Double), Index: %d, Value: %f", index,
_dm_shw_array_text_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Array Value Be Set(Text String), Index: %d, Value: %s", index,
_dm_shw_array_enum_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Array Value Be Set(Enum), Index: %d, Value: %d", index, *((int *)(complex_array->value) + index));
_dm_shw_array_date_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Array Value Be Set(Date String), Index: %d, Value: %s", index,
_dm_shw_array_bool_set in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Array Value Be Set(Bool), Index: %d, Value: %d", index, *((int *)(complex_array->value) + index));
dm_shw_set_property_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Key:%d %s", key_len, key);
dm_shw_set_property_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Current Found Data Index: %d", array_index);
dm_shw_get_property_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Current Found Data: %s", data->identifier);
dm_shw_get_property_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Current Found Data Index: %d", array_index);
dm_shw_set_event_output_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Key: %.*s", key_len, key);
dm_shw_set_event_output_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Event Output Data Search, Event Data ID: %s",pos); */
dm_shw_get_event_output_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Key: %.*s", key_len, key);
dm_shw_get_event_output_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("TSL Event Output Data Search, Event Data ID: %s", pos);
dm_shw_set_service_input_output_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Key: %.*s", key_len, key);
dm_shw_set_service_input_output_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("TSL Service Input/Output Data Search, Event Data ID: %s", pos);
dm_shw_get_service_input_output_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("key: %.*s", key_len, key);
dm_shw_get_service_input_output_value in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("TSL Service Input/Output Data Search, Event Data ID: %s", pos);
_dm_shw_data_insert_json_item in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("DM_SHW_DATA_TYPE_ARRAY"); */
_dm_shw_data_insert_json_item in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("DM_SHW_DATA_TYPE_STRUCT"); */
dm_shw_assemble_property in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("Property Found: %.*s",identifier_len,identifier); */
dm_shw_assemble_property in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Property Not Found: %.*s", identifier_len, identifier);
dm_shw_assemble_event_output in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("Event Found: %.*s",identifier_len,identifier); */
dm_shw_assemble_event_output in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Event Not Found: %.*s", identifier_len, identifier);
dm_shw_assemble_service_output in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* dm_log_debug("Service Found: %.*s",identifier_len,identifier); */
dm_shw_assemble_service_output in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Service Not Found: %.*s", identifier_len, identifier);
_dm_shw_array_free in dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_err("complex_array->type: %d",complex_array->type); */
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2266 :     dm_log_debug("TSL Property Value                 : %d", data_value->value_int);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2271 :     dm_log_debug("TSL Property Value                 : %f", data_value->value_float);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2276 :     dm_log_debug("TSL Property Value                 : %f", data_value->value_double);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2281 :     dm_log_debug("TSL Property Value       : %s",
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2287 :     dm_log_debug("TSL Property Value         : %d", data_value->value_int);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2292 :     dm_log_debug("TSL Property Value         : %s",
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2298 :     dm_log_debug("TSL Property Value         : %d", data_value->value_int);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2307 :         dm_log_debug("TSL Property Complex Array Not Exist");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2311 :     dm_log_debug("TSL Property Size: %d", complex_array->size);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2312 :     dm_log_debug("TSL Property Type: %s", g_iotx_data_type_mapping[complex_array->type].name);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2315 :         dm_log_debug("TSL Property Array Value Index    : %d", index);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2318 :                 dm_log_debug("TSL Property Value: %d", *((int *)(complex_array->value) + index));
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2322 :                 dm_log_debug("TSL Property Value: %f", *((float *)(complex_array->value) + index));
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2326 :                 dm_log_debug("TSL Property Value: %f", *((double *)(complex_array->value) + index));
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2330 :                 dm_log_debug("TSL Property Value: %s",
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2335 :                 dm_log_err("Execute Should Not Be Here!");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2347 :     dm_log_debug("TSL Property Struct Size: %d", complex_array->size);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2353 :         dm_log_debug("TSL Property Struct Index: %d", index);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2356 :         dm_log_debug("\n");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2362 :     dm_log_debug("TSL Property Type: %s", g_iotx_data_type_mapping[data_value->type].name);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2372 :     dm_log_debug("TSL Property Identifier : %s", (property->identifier == NULL) ? ("NULL") : (property->identifier));
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2382 :         dm_log_debug("TSL Propertie Not Exist");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2385 :     dm_log_debug("TSL Property Number: %d", number);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2388 :         dm_log_debug("TSL Property Index      : %d", index);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2390 :         dm_log_debug("\n");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2396 :     dm_log_debug("TSL Event Output Data Identifier : %s",
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2407 :         dm_log_debug("TSL Event Output Data Not Exist");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2410 :     dm_log_debug("TSL Event Output Data Number: %d", number);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2413 :         dm_log_debug("TSL Event Output Data Index: %d", index);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2415 :         dm_log_debug("\n");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2421 :     dm_log_debug("TSL Event Identifier : %s", (event->identifier == NULL) ? ("NULL") : (event->identifier));
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2430 :         dm_log_debug("TSL Events: NULL");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2433 :     dm_log_debug("TSL Event Number: %d", number);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2436 :         dm_log_debug("TSL Event Index      : %d", index);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2438 :         dm_log_debug("\n");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2444 :     dm_log_debug("TSL Service Output Data Identifier : %s",
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2455 :         dm_log_debug("TSL Service Output Data Not Exist");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2458 :     dm_log_debug("TSL Service Output Data Number: %d", number);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2461 :         dm_log_debug("TSL Service Output Data Index: %d", index);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2463 :         dm_log_debug("\n");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2469 :     dm_log_debug("TSL Service Input Data Identifier : %s",
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2475 :     dm_log_debug("TSL Service Input Data Identifier : %s",
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2486 :         dm_log_debug("TSL Service Output Data Not Exist");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2489 :     dm_log_debug("TSL Service Output Data Number: %d", number);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2492 :         dm_log_debug("TSL Service Output Data Index: %d", index);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2499 :         dm_log_debug("\n");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2505 :     dm_log_debug("TSL Service Identifier : %s", (service->identifier == NULL) ? ("NULL") : (service->identifier));
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2515 :         dm_log_debug("TSL Serivces: NULL");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2518 :     dm_log_debug("TSL Service Number: %d", number);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2521 :         dm_log_debug("TSL Service Index: %d", index);
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2523 :         dm_log_debug("\n");
dm_shadow.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 2529 :     dm_log_debug("TSL Profile, Product Key: %s, Device Name: %s", shadow->profile.product_key, shadow->profile.device_name);
_dm_shw_array_array_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("TSL Property Array Array Size: %d", complex_array_next_level->size);
_dm_shw_array_array_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("TSL Property Specs Type: %s", g_dm_tsl_alink_mapping[complex_array_next_level->type].name);
_dm_shw_array_struct_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Array Struct Size: %d", complex_array->size);
_dm_shw_array_struct_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Array Struct Spec Size: %d", root->size);
_dm_shw_array_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("DM_SHW_DATA_TYPE_ARRAY"); */
_dm_shw_array_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Property Array Size: %d",complex_array->size); */
_dm_shw_array_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Property Array Type: %d",complex_array->type); */
_dm_shw_array_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Property Specs Type: %s",g_dm_tsl_alink_mapping[complex_array->type].name); */
_dm_shw_struct_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("DM_SHW_DATA_TYPE_STRUCT"); */
_dm_shw_struct_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Property Struct Size: %d",root->size); */
_dm_shw_struct_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("TSL Property Struct Index: %d",index); */
_dm_shw_struct_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("TSL Property Struct Property: %.*s",lite_item.value_length,lite_item.value); */
_dm_shw_data_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("TSL Data Type: %.*s", lite_item.value_length, lite_item.value);
_dm_shw_data_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_debug("TSL Data Specs: %.*s",lite_item.value_length,lite_item.value); */
_dm_shw_property_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Identifier: %s", property->identifier);
_dm_shw_property_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Property Data Type: %.*s",lite_item.value_length,lite_item.value); */
_dm_shw_properties_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Number: %d", lite_properties.size);
_dm_shw_properties_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Index: %d", index);
_dm_shw_event_outputdata_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Identifier: %s", event_data->identifier);
_dm_shw_event_outputdata_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Output Event Data Type: %.*s",lite_item.value_length,lite_item.value); */
_dm_shw_event_outputdatas_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Number: %d", event->output_data_number);
_dm_shw_event_outputdatas_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Index: %d", index);
_dm_shw_event_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Identifier: %s", event->identifier);
_dm_shw_event_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_info("TSL Special Event Identifier: %s, Ignore It",event->identifier); */
_dm_shw_events_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Number: %d", lite_events.size);
_dm_shw_events_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Index: %d", index);
_dm_shw_service_outputdata_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Identifier: %s", service_data->identifier);
_dm_shw_service_outputdata_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Output Service Data Type: %.*s",lite_item.value_length,lite_item.value); */
_dm_shw_service_outputdatas_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Number: %d", service->output_data_number);
_dm_shw_service_outputdatas_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Index: %d", index);
_dm_shw_service_inputdata_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Identifier: %s", input_data->identifier);
_dm_shw_service_inputdata_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     /* dm_log_debug("TSL Input Service Data Type: %.*s",lite_item.value_length,lite_item.value); */
_dm_shw_service_inputdatas_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Number: %d", service->input_data_number);
_dm_shw_service_inputdatas_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Index: %d", index);
_dm_shw_service_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Identifier: %s", service->identifier);
_dm_shw_service_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_info("TSL Special Service Identifier: %s, Ignore It",service->identifier); */
_dm_shw_services_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("Number: %d", lite_services.size);
_dm_shw_services_parse in dm_tsl_alink.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Index: %d", index);
dm_utils_json_object_item in dm_utils.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("lite->type != cJSON_Object, %d", lite->type);
dm_utils_json_object_item in dm_utils.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         /* dm_log_err(DM_UTILS_LOG_JSON_PARSE_FAILED, lite->value_length, lite->value); */
drv_adc.c (libraries\HAL_Drivers) line 19 : #define LOG_TAG             "drv.adc"
stm32_get_adc_value in drv_adc.c (libraries\HAL_Drivers) :         LOG_E("ADC channel must be between 0 and 17.");
stm32_get_adc_value in drv_adc.c (libraries\HAL_Drivers) :         LOG_E("ADC channel must be between 0 and 18.");
stm32_adc_init in drv_adc.c (libraries\HAL_Drivers) :             LOG_E("%s init failed", name_buf);
stm32_adc_init in drv_adc.c (libraries\HAL_Drivers) :                 LOG_D("%s init success", name_buf);
stm32_adc_init in drv_adc.c (libraries\HAL_Drivers) :                 LOG_E("%s register failed", name_buf);
drv_eth.c (libraries\HAL_Drivers) line 28 : #define LOG_TAG             "drv.emac"
rt_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_E("eth hardware init failed");
rt_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_D("eth hardware init success");
rt_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_D("emac hardware start");
rt_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_E("emac hardware start faild");
rt_stm32_eth_open in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("emac open");
rt_stm32_eth_close in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("emac close");
rt_stm32_eth_read in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("emac read");
rt_stm32_eth_write in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("emac write");
rt_stm32_eth_tx in drv_eth.c (libraries\HAL_Drivers) :             LOG_D("buffer not valid");
rt_stm32_eth_tx in drv_eth.c (libraries\HAL_Drivers) :                 LOG_E("dma tx desc buffer is not valid");
rt_stm32_eth_tx in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("transmit frame lenth :%d", framelength);
rt_stm32_eth_tx in drv_eth.c (libraries\HAL_Drivers) :         LOG_E("eth transmit frame faild: %d", state);
rt_stm32_eth_rx in drv_eth.c (libraries\HAL_Drivers) :         LOG_D("receive frame faild");
rt_stm32_eth_rx in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("receive frame len : %d", len);
HAL_ETH_RxCpltCallback in drv_eth.c (libraries\HAL_Drivers) :         LOG_I("RxCpltCallback err = %d", result);
HAL_ETH_ErrorCallback in drv_eth.c (libraries\HAL_Drivers) :     LOG_E("eth err");
eth_phy_isr in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("phy interrupt status reg is 0x%X", status);
eth_phy_isr in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("phy basic status reg is 0x%X", status);
eth_phy_isr in drv_eth.c (libraries\HAL_Drivers) :             LOG_D("link up");
eth_phy_isr in drv_eth.c (libraries\HAL_Drivers) :             LOG_I("link down");
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :             LOG_E("No PHY device was detected, please check hardware!");
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("Found a phy, address:0x%02X", phy_addr);
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :     LOG_D("RESET PHY!");
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :             LOG_D("PHY BASIC STATUS REG:0x%04X", status);
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :                     LOG_D("PHY Control/Status REG:0x%04X ", SR); 
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :                     LOG_D("PHY PHY_Status_REG read error."); 
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :             LOG_D("PHY_BASIC_STATUS_REG read error."); 
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :                 LOG_D("link up ");
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :                     LOG_D("100Mbps");
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :                     LOG_D("10Mbps");
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :                     LOG_D("full-duplex");
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :                     LOG_D("half-duplex");
phy_monitor_thread_entry in drv_eth.c (libraries\HAL_Drivers) :                 LOG_I("link down");
rt_hw_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_E("No memory");
rt_hw_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_E("No memory");
rt_hw_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_E("No memory");
rt_hw_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_E("No memory");
rt_hw_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_D("emac device init success");
rt_hw_stm32_eth_init in drv_eth.c (libraries\HAL_Drivers) :         LOG_E("emac device init faild: %d", state);
drv_flash_f0.c (libraries\HAL_Drivers\drv_flash) line 22 : #define LOG_TAG                "drv.flash"
stm32_flash_read in drv_flash_f0.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("read outrange flash size! addr is (0x%p)", (void *)(addr + size));
stm32_flash_write in drv_flash_f0.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("write addr must be 4-byte alignment");
stm32_flash_write in drv_flash_f0.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("write outrange flash size! addr is (0x%p)", (void *)(addr + size));
stm32_flash_erase in drv_flash_f0.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("ERROR: erase outrange flash size! addr is (0x%p)\n", (void *)(addr + size));
stm32_flash_erase in drv_flash_f0.c (libraries\HAL_Drivers\drv_flash) :     LOG_D("erase done: addr (0x%p), size %d", (void *)addr, size);
drv_flash_f1.c (libraries\HAL_Drivers\drv_flash) line 22 : #define LOG_TAG                "drv.flash"
stm32_flash_read in drv_flash_f1.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("read outrange flash size! addr is (0x%p)", (void *)(addr + size));
stm32_flash_write in drv_flash_f1.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("write addr must be 4-byte alignment");
stm32_flash_write in drv_flash_f1.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("write outrange flash size! addr is (0x%p)", (void *)(addr + size));
stm32_flash_erase in drv_flash_f1.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("ERROR: erase outrange flash size! addr is (0x%p)\n", (void *)(addr + size));
stm32_flash_erase in drv_flash_f1.c (libraries\HAL_Drivers\drv_flash) :     LOG_D("erase done: addr (0x%p), size %d", (void *)addr, size);
drv_flash_f2.c (libraries\HAL_Drivers\drv_flash) line 22 : #define LOG_TAG                "drv.flash"
stm32_flash_read in drv_flash_f2.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("read outrange flash size! addr is (0x%p)", (void*)(addr + size));
stm32_flash_write in drv_flash_f2.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("write outrange flash size! addr is (0x%p)", (void*)(addr + size));
stm32_flash_erase in drv_flash_f2.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("ERROR: erase outrange flash size! addr is (0x%p)\n", (void*)(addr + size));
stm32_flash_erase in drv_flash_f2.c (libraries\HAL_Drivers\drv_flash) :     LOG_D("erase done: addr (0x%p), size %d", (void*)addr, size);
drv_flash_f4.c (libraries\HAL_Drivers\drv_flash) line 22 : #define LOG_TAG                "drv.flash"
stm32_flash_read in drv_flash_f4.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("read outrange flash size! addr is (0x%p)", (void*)(addr + size));
stm32_flash_write in drv_flash_f4.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("write outrange flash size! addr is (0x%p)", (void*)(addr + size));
stm32_flash_erase in drv_flash_f4.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("ERROR: erase outrange flash size! addr is (0x%p)\n", (void*)(addr + size));
stm32_flash_erase in drv_flash_f4.c (libraries\HAL_Drivers\drv_flash) :     LOG_D("erase done: addr (0x%p), size %d", (void*)addr, size);
drv_flash_f7.c (libraries\HAL_Drivers\drv_flash) line 23 : #define LOG_TAG                "drv.flash"
stm32_flash_read in drv_flash_f7.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("read outrange flash size! addr is (0x%p)", (void *)(addr + size));
stm32_flash_write in drv_flash_f7.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("write outrange flash size! addr is (0x%p)", (void *)(addr + size));
stm32_flash_erase in drv_flash_f7.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("ERROR: erase outrange flash size! addr is (0x%p)\n", (void *)(addr + size));
stm32_flash_erase in drv_flash_f7.c (libraries\HAL_Drivers\drv_flash) :     LOG_D("erase done: addr (0x%p), size %d", (void *)addr, size);
drv_flash_l4.c (libraries\HAL_Drivers\drv_flash) line 22 : #define LOG_TAG                "drv.flash"
stm32_flash_read in drv_flash_l4.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("read outrange flash size! addr is (0x%p)", (void*)(addr + size));
stm32_flash_write in drv_flash_l4.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("ERROR: write outrange flash size! addr is (0x%p)\n", (void*)(addr + size));
stm32_flash_write in drv_flash_l4.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("write addr must be 8-byte alignment");
stm32_flash_write in drv_flash_l4.c (libraries\HAL_Drivers\drv_flash) :                 LOG_E("ERROR: write data != read data\n");
stm32_flash_erase in drv_flash_l4.c (libraries\HAL_Drivers\drv_flash) :         LOG_E("ERROR: erase outrange flash size! addr is (0x%p)\n", (void*)(addr + size));
stm32_flash_erase in drv_flash_l4.c (libraries\HAL_Drivers\drv_flash) :     LOG_D("erase done: addr (0x%p), size %d", (void*)addr, size);
drv_hwtimer.c (libraries\HAL_Drivers) line 16 : #define LOG_TAG             "drv.hwtimer"
timer_init in drv_hwtimer.c (libraries\HAL_Drivers) :             LOG_E("%s init failed", tim_device->name);
timer_init in drv_hwtimer.c (libraries\HAL_Drivers) :             LOG_D("%s init success", tim_device->name);
timer_start in drv_hwtimer.c (libraries\HAL_Drivers) :         LOG_E("TIM2 start failed");
stm32_hwtimer_init in drv_hwtimer.c (libraries\HAL_Drivers) :             LOG_D("%s register success", stm32_hwtimer_obj[i].name);
stm32_hwtimer_init in drv_hwtimer.c (libraries\HAL_Drivers) :             LOG_E("%s register failed", stm32_hwtimer_obj[i].name);
drv_lcd.c (libraries\HAL_Drivers) line 18 : #define LOG_TAG             "drv.lcd"
stm32_lcd_init in drv_lcd.c (libraries\HAL_Drivers) :         LOG_E("unsupported pixel format");
stm32_lcd_init in drv_lcd.c (libraries\HAL_Drivers) :         LOG_E("LTDC init failed");
stm32_lcd_init in drv_lcd.c (libraries\HAL_Drivers) :         LOG_E("LTDC layer init failed");
stm32_lcd_init in drv_lcd.c (libraries\HAL_Drivers) :         LOG_D("LTDC init success");
drv_lcd_hw_init in drv_lcd.c (libraries\HAL_Drivers) :         LOG_E("init semaphore failed!\n");
drv_lcd_hw_init in drv_lcd.c (libraries\HAL_Drivers) :         LOG_E("init frame buffer failed!\n");
drv_log.h (libraries\HAL_Drivers) line 15 : #ifndef LOG_TAG
drv_log.h (libraries\HAL_Drivers) line 18 : #define DBG_TAG               LOG_TAG
drv_log.h (libraries\HAL_Drivers) line 19 : #endif /* LOG_TAG */
drv_pwm.c (libraries\HAL_Drivers) line 16 : #define LOG_TAG             "drv.pwm"
stm32_hw_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :         LOG_E("%s time base init failed", device->name);
stm32_hw_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :         LOG_E("%s clock init failed", device->name);
stm32_hw_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :         LOG_E("%s pwm init failed", device->name);
stm32_hw_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :         LOG_E("%s master config failed", device->name);
stm32_hw_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :             LOG_E("%s channel1 config failed", device->name);
stm32_hw_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :             LOG_E("%s channel2 config failed", device->name);
stm32_hw_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :             LOG_E("%s channel3 config failed", device->name);
stm32_hw_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :             LOG_E("%s channel4 config failed", device->name);
stm32_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :             LOG_E("%s init failed", stm32_pwm_obj[i].name);
stm32_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :             LOG_D("%s init success", stm32_pwm_obj[i].name);
stm32_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :                 LOG_D("%s register success", stm32_pwm_obj[i].name);
stm32_pwm_init in drv_pwm.c (libraries\HAL_Drivers) :                 LOG_E("%s register failed", stm32_pwm_obj[i].name);
drv_qspi.c (libraries\HAL_Drivers) line 18 : #define LOG_TAG              "drv.qspi"
stm32_qspi_init in drv_qspi.c (libraries\HAL_Drivers) :             LOG_E("QSPI init failed, QSPI frequency(%d) is too low.", cfg->max_hz);
stm32_qspi_init in drv_qspi.c (libraries\HAL_Drivers) :         LOG_D("qspi init success!");
stm32_qspi_init in drv_qspi.c (libraries\HAL_Drivers) :         LOG_E("qspi init failed (%d)!", result);
stm32_qspi_init in drv_qspi.c (libraries\HAL_Drivers) :         LOG_E("qspi dma init failed (%d)!", result);
qspi_send_cmd in drv_qspi.c (libraries\HAL_Drivers) :     Cmdhandler.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
qspixfer in drv_qspi.c (libraries\HAL_Drivers) :                 LOG_E("QSPI send data failed(%d)!", qspi_bus->QSPI_Handler.ErrorCode);
qspixfer in drv_qspi.c (libraries\HAL_Drivers) :             LOG_E("QSPI recv data failed(%d)!", qspi_bus->QSPI_Handler.ErrorCode);
stm32_qspi_bus_attach_device in drv_qspi.c (libraries\HAL_Drivers) :         LOG_E("no memory, qspi bus attach device failed!");
stm32_qspi_bus_attach_device in drv_qspi.c (libraries\HAL_Drivers) :         LOG_E("no memory, qspi bus attach device failed!");
drv_rtc.c (libraries\HAL_Drivers) line 16 : #define LOG_TAG             "drv.rtc"
get_rtc_timestamp in drv_rtc.c (libraries\HAL_Drivers) :     LOG_D("get rtc time.");
set_rtc_time_stamp in drv_rtc.c (libraries\HAL_Drivers) :     LOG_D("set rtc time.");
rt_rtc_config in drv_rtc.c (libraries\HAL_Drivers) :         LOG_W("RTC hasn't been configured, please use <date> command to config.");
rt_rtc_control in drv_rtc.c (libraries\HAL_Drivers) :         LOG_D("RTC: get rtc_time %x\n", *(rt_uint32_t *)args);
rt_rtc_control in drv_rtc.c (libraries\HAL_Drivers) :         LOG_D("RTC: set rtc_time %x\n", *(rt_uint32_t *)args);
rt_hw_rtc_init in drv_rtc.c (libraries\HAL_Drivers) :         LOG_E("rtc register err code: %d", result);
rt_hw_rtc_init in drv_rtc.c (libraries\HAL_Drivers) :     LOG_D("rtc init success");
drv_sdio.c (libraries\HAL_Drivers) line 20 : #define LOG_TAG             "drv.sdio"
rthw_sdio_wait_completed in drv_sdio.c (libraries\HAL_Drivers) :         LOG_E("wait completed timeout");
rthw_sdio_wait_completed in drv_sdio.c (libraries\HAL_Drivers) :             LOG_D("sta:0x%08X [%08X %08X %08X %08X]", status, cmd->resp[0], cmd->resp[1], cmd->resp[2], cmd->resp[3]);
rthw_sdio_wait_completed in drv_sdio.c (libraries\HAL_Drivers) :             LOG_D("err:0x%08x, %s%s%s%s%s%s%s cmd:%d arg:0x%08x rw:%c len:%d blksize:%d",
rthw_sdio_wait_completed in drv_sdio.c (libraries\HAL_Drivers) :         LOG_D("sta:0x%08X [%08X %08X %08X %08X]", status, cmd->resp[0], cmd->resp[1], cmd->resp[2], cmd->resp[3]);
rthw_sdio_transfer_by_dma in drv_sdio.c (libraries\HAL_Drivers) :         LOG_E("rthw_sdio_transfer_by_dma invalid args");
rthw_sdio_transfer_by_dma in drv_sdio.c (libraries\HAL_Drivers) :         LOG_E("rthw_sdio_transfer_by_dma invalid args");
rthw_sdio_transfer_by_dma in drv_sdio.c (libraries\HAL_Drivers) :         LOG_E("rthw_sdio_transfer_by_dma invalid args");
rthw_sdio_send_command in drv_sdio.c (libraries\HAL_Drivers) :     LOG_D("CMD:%d ARG:0x%08x RES:%s%s%s%s%s%s%s%s%s rw:%c len:%d blksize:%d",
rthw_sdio_iocfg in drv_sdio.c (libraries\HAL_Drivers) :         LOG_E("The clock rate is too low! rata:%d", clk_src);
rthw_sdio_iocfg in drv_sdio.c (libraries\HAL_Drivers) :         LOG_W("Setting rate is greater than clock source rate.");
rthw_sdio_iocfg in drv_sdio.c (libraries\HAL_Drivers) :     LOG_D("clk:%d width:%s%s%s power:%s%s%s",
rthw_sdio_iocfg in drv_sdio.c (libraries\HAL_Drivers) :         LOG_W("unknown power_mode %d", io_cfg->power_mode);
rthw_sdio_irq_update in drv_sdio.c (libraries\HAL_Drivers) :         LOG_D("enable sdio irq");
rthw_sdio_irq_update in drv_sdio.c (libraries\HAL_Drivers) :         LOG_D("disable sdio irq");
rthw_sd_delect in drv_sdio.c (libraries\HAL_Drivers) :     LOG_D("try to detect device");
sdio_host_create in drv_sdio.c (libraries\HAL_Drivers) :         LOG_E("L:%d F:%s %s %s %s",
sdio_host_create in drv_sdio.c (libraries\HAL_Drivers) :         LOG_E("L:%d F:%s malloc rthw_sdio fail");
sdio_host_create in drv_sdio.c (libraries\HAL_Drivers) :         LOG_E("L:%d F:%s mmcsd alloc host fail");
rt_hw_sdio_init in drv_sdio.c (libraries\HAL_Drivers) :         LOG_E("host create fail");
drv_sdram.c (libraries\HAL_Drivers) line 17 : #define LOG_TAG             "drv.sdram"
SDRAM_Init in drv_sdram.c (libraries\HAL_Drivers) :         LOG_E("SDRAM init failed!");
SDRAM_Init in drv_sdram.c (libraries\HAL_Drivers) :         LOG_D("sdram init success, mapped at 0x%X, size is %d bytes, data width is %d", SDRAM_BANK_ADDR, SDRAM_SIZE, SDRAM_DATA_WIDTH);
sdram_test in drv_sdram.c (libraries\HAL_Drivers) :     LOG_D("Writing the %ld bytes data, waiting....", SDRAM_SIZE);
sdram_test in drv_sdram.c (libraries\HAL_Drivers) :     LOG_D("Write data success, total time: %d.%03dS.", time_cast / RT_TICK_PER_SECOND,
sdram_test in drv_sdram.c (libraries\HAL_Drivers) :     LOG_D("start Reading and verifying data, waiting....");
sdram_test in drv_sdram.c (libraries\HAL_Drivers) :             LOG_E("SDRAM test failed!");
sdram_test in drv_sdram.c (libraries\HAL_Drivers) :             LOG_E("SDRAM test failed!");
sdram_test in drv_sdram.c (libraries\HAL_Drivers) :             LOG_E("SDRAM test failed!");
sdram_test in drv_sdram.c (libraries\HAL_Drivers) :         LOG_D("SDRAM test success!");
drv_soft_i2c.c (libraries\HAL_Drivers) line 18 : #define LOG_TAG              "drv.i2c"
rt_hw_i2c_init in drv_soft_i2c.c (libraries\HAL_Drivers) :         LOG_D("software simulation %s init done, pin scl: %d, pin sda %d",
drv_spi.c (libraries\HAL_Drivers) line 25 : #define LOG_TAG              "drv.spi"
stm32_spi_init in drv_spi.c (libraries\HAL_Drivers) :     LOG_D("sys freq: %d, pclk2 freq: %d, SPI limiting freq: %d, BaudRatePrescaler: %d",
stm32_spi_init in drv_spi.c (libraries\HAL_Drivers) :     LOG_D("%s init done", spi_drv->config->bus_name);
spixfer in drv_spi.c (libraries\HAL_Drivers) :     LOG_D("%s transfer prepare and start", spi_drv->config->bus_name);
spixfer in drv_spi.c (libraries\HAL_Drivers) :     LOG_D("%s sendbuf: %X, recvbuf: %X, length: %d",
spixfer in drv_spi.c (libraries\HAL_Drivers) :             LOG_I("spi transfer error : %d", state);
spixfer in drv_spi.c (libraries\HAL_Drivers) :             LOG_D("%s transfer done", spi_drv->config->bus_name);
rt_hw_spi_bus_init in drv_spi.c (libraries\HAL_Drivers) :         LOG_D("%s bus init done", spi_config[i].bus_name);
rt_hw_spi_device_attach in drv_spi.c (libraries\HAL_Drivers) :         LOG_E("%s attach to %s faild, %d\n", device_name, bus_name, result);
rt_hw_spi_device_attach in drv_spi.c (libraries\HAL_Drivers) :     LOG_D("%s attach to %s done", device_name, bus_name);
drv_usart.c (libraries\HAL_Drivers) line 18 : #define LOG_TAG             "drv.usart"
stm32_dma_config in drv_usart.c (libraries\HAL_Drivers) :     LOG_D("%s dma config start", uart->config->name);
stm32_dma_config in drv_usart.c (libraries\HAL_Drivers) :     LOG_D("%s dma %s instance: %x", uart->config->name, flag == RT_DEVICE_FLAG_DMA_RX ? "RX" : "TX", DMA_Handle->Instance);
stm32_dma_config in drv_usart.c (libraries\HAL_Drivers) :     LOG_D("%s dma config done", uart->config->name);
HAL_UART_ErrorCallback in drv_usart.c (libraries\HAL_Drivers) :     LOG_D("%s: %s %d\n", __FUNCTION__, uart->config->name, huart->ErrorCode);
drv_wdt.c (libraries\HAL_Drivers) line 16 : #define LOG_TAG             "drv.wdt"
wdt_control in drv_wdt.c (libraries\HAL_Drivers) :             LOG_E("watch dog keepalive fail.");
wdt_control in drv_wdt.c (libraries\HAL_Drivers) :             LOG_E("Please define the value of LSI_VALUE!");
wdt_control in drv_wdt.c (libraries\HAL_Drivers) :             LOG_E("wdg set timeout parameter too large, please less than %ds",0xFFF * 256 / LSI_VALUE);
wdt_control in drv_wdt.c (libraries\HAL_Drivers) :                 LOG_E("wdg set timeout failed.");
wdt_control in drv_wdt.c (libraries\HAL_Drivers) :             LOG_E("Please define the value of LSI_VALUE!");
wdt_control in drv_wdt.c (libraries\HAL_Drivers) :             LOG_E("wdt start failed.");
wdt_control in drv_wdt.c (libraries\HAL_Drivers) :         LOG_W("This command is not supported.");
rt_wdt_init in drv_wdt.c (libraries\HAL_Drivers) :         LOG_E("wdt device register failed.");
rt_wdt_init in drv_wdt.c (libraries\HAL_Drivers) :     LOG_D("wdt device register success.");
IOT_Dynamic_Register in dynreg.c (packages\ali-iotkit-latest\iotkit-embedded\src\dynamic_register) : #ifdef INFRA_LOG_NETWORK_PAYLOAD
IOT_Dynamic_Register in dynreg.c (packages\ali-iotkit-latest\iotkit-embedded\src\dynamic_register) :     iotx_facility_json_print(dynamic_register_response, LOG_DEBUG_LEVEL, '<');
dynreg_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dynamic_register) line 8 :     #define dynreg_info(...)                log_info("dynreg", __VA_ARGS__)
dynreg_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dynamic_register) line 9 :     #define dynreg_err(...)                 log_err("dynreg", __VA_ARGS__)
dynreg_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dynamic_register) line 10 :     #define dynreg_dbg(...)                 log_debug("dynreg", __VA_ARGS__)
easyflash.c (packages\EasyFlash-latest\src) line 35 :  * |      Saved log area        |   Log area size @see LOG_AREA_SIZE
easyflash_init in easyflash.c (packages\EasyFlash-latest\src) :     extern EfErrCode ef_log_init(void);
easyflash_init in easyflash.c (packages\EasyFlash-latest\src) :         result = ef_log_init();
easyflash.h (packages\EasyFlash-latest\inc) line 45 : #define EF_DEBUG(...) ef_log_debug(__FILE__, __LINE__, __VA_ARGS__)
easyflash.h (packages\EasyFlash-latest\inc) line 50 : #define EF_INFO(...)  ef_log_info(__VA_ARGS__)
easyflash.h (packages\EasyFlash-latest\inc) line 135 : EfErrCode ef_log_read(size_t index, uint32_t *log, size_t size);
easyflash.h (packages\EasyFlash-latest\inc) line 136 : EfErrCode ef_log_write(const uint32_t *log, size_t size);
easyflash.h (packages\EasyFlash-latest\inc) line 137 : EfErrCode ef_log_clean(void);
easyflash.h (packages\EasyFlash-latest\inc) line 138 : size_t ef_log_get_used_size(void);
easyflash.h (packages\EasyFlash-latest\inc) line 150 : void ef_log_debug(const char *file, const long line, const char *format, ...);
easyflash.h (packages\EasyFlash-latest\inc) line 151 : void ef_log_info(const char *format, ...);
_interface_handler in ecm.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("CDC_SET_ETH_PACKET_FILTER");
_interface_handler in ecm.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_E("Unknow setup->bRequest: 0x%02X", setup->bRequest);
rt_ecm_eth_tx in ecm.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("linkdown, drop pkg");
rt_ecm_eth_tx in ecm.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_W("ECM MTU is:%d, but the send packet size is %d",
rt_ecm_eth_tx in ecm.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_W("wait for buffer free timeout");
_function_enable in ecm.c (rt-thread\components\drivers\usb\usbdevice\class) :     LOG_D("plugged in");
_function_disable in ecm.c (rt-thread\components\drivers\usb\usbdevice\class) :     LOG_D("plugged out");
ef_cfg.h (packages\EasyFlash-latest\inc) line 60 : #define LOG_AREA_SIZE             (PKG_EASYFLASH_LOG_AREA_SIZE)
ef_cfg.h (packages\EasyFlash-latest\inc) line 76 :  * |      Saved log area        |   Log area size @see LOG_AREA_SIZE
ef_fal_port.c (packages\EasyFlash-latest\ports) line 49 : static char log_buf[RT_CONSOLEBUF_SIZE];
ef_fal_port.c (packages\EasyFlash-latest\ports) line 161 : void ef_log_debug(const char *file, const long line, const char *format, ...) {
ef_log_debug in ef_fal_port.c (packages\EasyFlash-latest\ports) :     rt_vsprintf(log_buf, format, args);
ef_log_debug in ef_fal_port.c (packages\EasyFlash-latest\ports) :     ef_print("%s", log_buf);
ef_fal_port.c (packages\EasyFlash-latest\ports) line 185 : void ef_log_info(const char *format, ...) {
ef_log_info in ef_fal_port.c (packages\EasyFlash-latest\ports) :     rt_vsprintf(log_buf, format, args);
ef_log_info in ef_fal_port.c (packages\EasyFlash-latest\ports) :     ef_print("%s", log_buf);
ef_print in ef_fal_port.c (packages\EasyFlash-latest\ports) :     rt_vsprintf(log_buf, format, args);
ef_print in ef_fal_port.c (packages\EasyFlash-latest\ports) :     rt_kprintf("%s", log_buf);
ef_iap_init in ef_iap.c (packages\EasyFlash-latest\src) :     bak_app_start_addr += LOG_AREA_SIZE;
ef_log.c (packages\EasyFlash-latest\src) line 33 : #if defined(EF_USING_LOG) && !defined(LOG_AREA_SIZE)
ef_log.c (packages\EasyFlash-latest\src) line 38 : #define LOG_SECTOR_MAGIC               0xEF30EF30
ef_log.c (packages\EasyFlash-latest\src) line 40 : #define LOG_SECTOR_HEADER_SIZE         12
ef_log.c (packages\EasyFlash-latest\src) line 42 : #define LOG_SECTOR_HEADER_WORD_SIZE    3
ef_log.c (packages\EasyFlash-latest\src) line 46 :  * The sector status is 8B after LOG_SECTOR_MAGIC at every sector header.
ef_log.c (packages\EasyFlash-latest\src) line 76 : static uint32_t log_start_addr = 0, log_end_addr = 0;
ef_log.c (packages\EasyFlash-latest\src) line 78 : static uint32_t log_area_start_addr = 0;
ef_log.c (packages\EasyFlash-latest\src) line 90 : EfErrCode ef_log_init(void) {
ef_log_init in ef_log.c (packages\EasyFlash-latest\src) :     EF_ASSERT(LOG_AREA_SIZE);
ef_log_init in ef_log.c (packages\EasyFlash-latest\src) :     EF_ASSERT(LOG_AREA_SIZE % EF_ERASE_MIN_SIZE == 0);
ef_log_init in ef_log.c (packages\EasyFlash-latest\src) :     EF_ASSERT(LOG_AREA_SIZE / EF_ERASE_MIN_SIZE >= 2);
ef_log_init in ef_log.c (packages\EasyFlash-latest\src) :     log_area_start_addr = EF_START_ADDR + ENV_AREA_SIZE;
ef_log_init in ef_log.c (packages\EasyFlash-latest\src) :     log_area_start_addr = EF_START_ADDR;
get_sector_status in ef_log.c (packages\EasyFlash-latest\src) :     uint32_t header_buf[LOG_SECTOR_HEADER_WORD_SIZE] = {0}, header_addr = 0;
get_sector_status in ef_log.c (packages\EasyFlash-latest\src) :     if(sector_header_magic == LOG_SECTOR_MAGIC){
write_sector_status in ef_log.c (packages\EasyFlash-latest\src) :         header = LOG_SECTOR_MAGIC;
find_sec_using_end_addr in ef_log.c (packages\EasyFlash-latest\src) :     data_start = sector_start + LOG_SECTOR_HEADER_SIZE;
find_sec_using_end_addr in ef_log.c (packages\EasyFlash-latest\src) :     if (continue_ff >= EF_ERASE_MIN_SIZE - LOG_SECTOR_HEADER_SIZE) {
find_sec_using_end_addr in ef_log.c (packages\EasyFlash-latest\src) :         return sector_start + LOG_SECTOR_HEADER_SIZE;
ef_log.c (packages\EasyFlash-latest\src) line 261 :  *  LOG_AREA_SIZE = log area end - log area star
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :     size_t total_sec_num = LOG_AREA_SIZE / EF_ERASE_MIN_SIZE;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :     uint8_t cur_log_sec_state = 0;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :     cur_sec_status = get_sector_status(log_area_start_addr);
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :     for (cur_size = EF_ERASE_MIN_SIZE; cur_size < LOG_AREA_SIZE; cur_size += EF_ERASE_MIN_SIZE) {
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :         cur_sec_status = get_sector_status(log_area_start_addr + cur_size);
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 ef_log_clean();
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 ef_log_clean();
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 cur_log_sec_state = 1;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 log_start_addr = log_area_start_addr;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 cur_using_sec_addr = log_area_start_addr + cur_size - EF_ERASE_MIN_SIZE;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 ef_log_clean();
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 cur_log_sec_state = 2;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 log_start_addr = log_area_start_addr + cur_size;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 cur_using_sec_addr = log_area_start_addr + cur_size - EF_ERASE_MIN_SIZE;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                 if (cur_log_sec_state == 2) {
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                     ef_log_clean();
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                     cur_log_sec_state = 1;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                     log_start_addr = log_area_start_addr;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                     log_end_addr = log_area_start_addr + cur_size;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                     cur_using_sec_addr = log_area_start_addr + cur_size - EF_ERASE_MIN_SIZE;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                     cur_log_sec_state = 1;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                     log_start_addr = log_area_start_addr;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                     cur_using_sec_addr = log_area_start_addr + cur_size;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                     if (cur_size + EF_ERASE_MIN_SIZE >= LOG_AREA_SIZE) {
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                         cur_log_sec_state = 2;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                         log_start_addr = get_next_flash_sec_addr(log_area_start_addr + cur_size);
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :                         cur_using_sec_addr = log_area_start_addr + cur_size;
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :             ef_log_clean();
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :         ef_log_clean();
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :         ef_log_clean();
find_start_and_end_addr in ef_log.c (packages\EasyFlash-latest\src) :         log_end_addr = find_sec_using_end_addr(cur_using_sec_addr);
ef_log.c (packages\EasyFlash-latest\src) line 395 : size_t ef_log_get_used_size(void) {
ef_log_get_used_size in ef_log.c (packages\EasyFlash-latest\src) :     if (log_start_addr < log_end_addr) {
ef_log_get_used_size in ef_log.c (packages\EasyFlash-latest\src) :         physical_size = log_end_addr - log_start_addr;
ef_log_get_used_size in ef_log.c (packages\EasyFlash-latest\src) :         physical_size = LOG_AREA_SIZE - (log_start_addr - log_end_addr);
ef_log_get_used_size in ef_log.c (packages\EasyFlash-latest\src) :     return physical_size - header_total_num * LOG_SECTOR_HEADER_SIZE;
ef_log.c (packages\EasyFlash-latest\src) line 422 : static EfErrCode log_seq_read(uint32_t addr, uint32_t *log, size_t size) {
log_seq_read in ef_log.c (packages\EasyFlash-latest\src) :             addr += LOG_SECTOR_HEADER_SIZE;
ef_log.c (packages\EasyFlash-latest\src) line 454 : static uint32_t log_index2addr(size_t index) {
log_index2addr in ef_log.c (packages\EasyFlash-latest\src) :     size_t sector_num = index / (EF_ERASE_MIN_SIZE - LOG_SECTOR_HEADER_SIZE) + 1;
log_index2addr in ef_log.c (packages\EasyFlash-latest\src) :     header_total_offset = sector_num * LOG_SECTOR_HEADER_SIZE;
log_index2addr in ef_log.c (packages\EasyFlash-latest\src) :     if (log_start_addr < log_end_addr) {
log_index2addr in ef_log.c (packages\EasyFlash-latest\src) :         return log_start_addr + index + header_total_offset;
log_index2addr in ef_log.c (packages\EasyFlash-latest\src) :         if (log_start_addr + index + header_total_offset < log_area_start_addr + LOG_AREA_SIZE) {
log_index2addr in ef_log.c (packages\EasyFlash-latest\src) :             return log_start_addr + index + header_total_offset;
log_index2addr in ef_log.c (packages\EasyFlash-latest\src) :             return log_start_addr + index + header_total_offset - LOG_AREA_SIZE;
ef_log.c (packages\EasyFlash-latest\src) line 477 :  *        Maximum index is ef_log_get_used_size() - 1.
ef_log.c (packages\EasyFlash-latest\src) line 483 : EfErrCode ef_log_read(size_t index, uint32_t *log, size_t size) {
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :     size_t cur_using_size = ef_log_get_used_size();
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :     if (log_start_addr < log_end_addr) {
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :         log_seq_read(log_index2addr(index), log, size);
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :         if (log_index2addr(index) + size <= log_area_start_addr + LOG_AREA_SIZE) {
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              * log_area_start_addr --> |##############|
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              *                         |##############| <-- log_end_addr
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              *      log_start_addr --> |##############|
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              * read from (log_start_addr + log_index2addr(index)) to (log_start_addr + index + log_index2addr(index))
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :             result = log_seq_read(log_index2addr(index), log, size);
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :         } else if (log_index2addr(index) < log_area_start_addr + LOG_AREA_SIZE) {
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              * log_area_start_addr --> |**************| <-- read end
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              *                         |##############| <-- log_end_addr
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              *      log_start_addr --> |##############|
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              * step1: read from (log_start_addr + log_index2addr(index)) to flash log area end address
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :             read_size_temp = (log_area_start_addr + LOG_AREA_SIZE) - log_index2addr(index);
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :             read_size_temp -= header_total_num * LOG_SECTOR_HEADER_SIZE;
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :             result = log_seq_read(log_index2addr(index), log, read_size_temp);
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :                 result = log_seq_read(log_area_start_addr, log + read_size_temp / 4, size - read_size_temp);
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              * log_area_start_addr --> |##############|
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              *                         |##############| <-- log_end_addr
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              *      log_start_addr --> |##############|
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :              * read from (log_start_addr + log_index2addr(index) - LOG_AREA_SIZE) to read size's end address
ef_log_read in ef_log.c (packages\EasyFlash-latest\src) :             result = log_seq_read(log_index2addr(index) - LOG_AREA_SIZE, log, size);
ef_log.c (packages\EasyFlash-latest\src) line 586 : EfErrCode ef_log_write(const uint32_t *log, size_t size) {
ef_log_write in ef_log.c (packages\EasyFlash-latest\src) :     uint32_t write_addr = log_end_addr, erase_addr;
ef_log_write in ef_log.c (packages\EasyFlash-latest\src) :         writable_size = EF_ERASE_MIN_SIZE - ((write_addr - log_area_start_addr) % EF_ERASE_MIN_SIZE);
ef_log_write in ef_log.c (packages\EasyFlash-latest\src) :             log_end_addr = write_addr + size;
ef_log_write in ef_log.c (packages\EasyFlash-latest\src) :         if (log_start_addr == erase_addr) {
ef_log_write in ef_log.c (packages\EasyFlash-latest\src) :             log_start_addr = get_next_flash_sec_addr(log_start_addr);
ef_log_write in ef_log.c (packages\EasyFlash-latest\src) :             write_addr += LOG_SECTOR_HEADER_SIZE;
ef_log_write in ef_log.c (packages\EasyFlash-latest\src) :         writable_size = EF_ERASE_MIN_SIZE - LOG_SECTOR_HEADER_SIZE;
ef_log_write in ef_log.c (packages\EasyFlash-latest\src) :             log_end_addr = write_addr + writable_size;
ef_log_write in ef_log.c (packages\EasyFlash-latest\src) :             log_end_addr = write_addr + (size - write_size);
get_next_flash_sec_addr in ef_log.c (packages\EasyFlash-latest\src) :     size_t cur_sec_id = (cur_addr - log_area_start_addr) / EF_ERASE_MIN_SIZE;
get_next_flash_sec_addr in ef_log.c (packages\EasyFlash-latest\src) :     size_t sec_total_num = LOG_AREA_SIZE / EF_ERASE_MIN_SIZE;
get_next_flash_sec_addr in ef_log.c (packages\EasyFlash-latest\src) :         return log_area_start_addr;
get_next_flash_sec_addr in ef_log.c (packages\EasyFlash-latest\src) :         return log_area_start_addr + (cur_sec_id + 1) * EF_ERASE_MIN_SIZE;
ef_log.c (packages\EasyFlash-latest\src) line 696 : EfErrCode ef_log_clean(void) {
ef_log_clean in ef_log.c (packages\EasyFlash-latest\src) :     uint32_t write_addr = log_area_start_addr;
ef_log_clean in ef_log.c (packages\EasyFlash-latest\src) :     log_start_addr = log_area_start_addr;
ef_log_clean in ef_log.c (packages\EasyFlash-latest\src) :     log_end_addr = log_start_addr + LOG_SECTOR_HEADER_SIZE;
ef_log_clean in ef_log.c (packages\EasyFlash-latest\src) :     result = ef_port_erase(log_area_start_addr, LOG_AREA_SIZE);
ef_log_clean in ef_log.c (packages\EasyFlash-latest\src) :         if (write_addr >= log_area_start_addr + LOG_AREA_SIZE) {
ef_sfud_port.c (packages\EasyFlash-latest\ports) line 46 : static char log_buf[RT_CONSOLEBUF_SIZE];
ef_sfud_port.c (packages\EasyFlash-latest\ports) line 162 : void ef_log_debug(const char *file, const long line, const char *format, ...) {
ef_log_debug in ef_sfud_port.c (packages\EasyFlash-latest\ports) :     rt_vsprintf(log_buf, format, args);
ef_log_debug in ef_sfud_port.c (packages\EasyFlash-latest\ports) :     ef_print("%s", log_buf);
ef_sfud_port.c (packages\EasyFlash-latest\ports) line 186 : void ef_log_info(const char *format, ...) {
ef_log_info in ef_sfud_port.c (packages\EasyFlash-latest\ports) :     rt_vsprintf(log_buf, format, args);
ef_log_info in ef_sfud_port.c (packages\EasyFlash-latest\ports) :     ef_print("%s", log_buf);
ef_print in ef_sfud_port.c (packages\EasyFlash-latest\ports) :     rt_vsprintf(log_buf, format, args);
ef_print in ef_sfud_port.c (packages\EasyFlash-latest\ports) :     rt_kprintf("%s", log_buf);
fal_init in fal.c (packages\fal-latest\src) :         log_i("RT-Thread Flash Abstraction Layer (V%s) initialize success.", FAL_SW_VERSION);
fal_init in fal.c (packages\fal-latest\src) :         log_e("RT-Thread Flash Abstraction Layer (V%s) initialize failed.", FAL_SW_VERSION);
fal_def.h (packages\fal-latest\inc) line 75 : #ifdef  log_d
fal_def.h (packages\fal-latest\inc) line 76 : #undef  log_d
fal_def.h (packages\fal-latest\inc) line 78 : #define log_d(...)                     FAL_PRINTF("[D/FAL] (%s:%d) ", __FUNCTION__, __LINE__);           FAL_PRINTF(__VA_ARGS__);FAL_PRINTF("\n")
fal_def.h (packages\fal-latest\inc) line 88 : #ifdef  log_d
fal_def.h (packages\fal-latest\inc) line 89 : #undef  log_d
fal_def.h (packages\fal-latest\inc) line 91 : #define log_d(...)
fal_def.h (packages\fal-latest\inc) line 95 : #ifdef  log_e
fal_def.h (packages\fal-latest\inc) line 96 : #undef  log_e
fal_def.h (packages\fal-latest\inc) line 98 : #define log_e(...)                     FAL_PRINTF("\033[31;22m[E/FAL] (%s:%d) ", __FUNCTION__, __LINE__);FAL_PRINTF(__VA_ARGS__);FAL_PRINTF("\033[0m\n")
fal_def.h (packages\fal-latest\inc) line 101 : #ifdef  log_i
fal_def.h (packages\fal-latest\inc) line 102 : #undef  log_i
fal_def.h (packages\fal-latest\inc) line 104 : #define log_i(...)                     FAL_PRINTF("\033[32;22m[I/FAL] ");                                FAL_PRINTF(__VA_ARGS__);FAL_PRINTF("\033[0m\n")
fal_flash_init in fal_flash.c (packages\fal-latest\src) :         log_d("Flash device | %*.*s | addr: 0x%08lx | len: 0x%08x | blk_size: 0x%08x |initialized finish.",
fal_show_part_table in fal_partition.c (packages\fal-latest\src) :     log_i("==================== FAL partition table ====================");
fal_show_part_table in fal_partition.c (packages\fal-latest\src) :     log_i("| %-*.*s | %-*.*s |   offset   |    length  |", part_name_max, FAL_DEV_NAME_MAX, item1, flash_dev_name_max,
fal_show_part_table in fal_partition.c (packages\fal-latest\src) :     log_i("-------------------------------------------------------------");
fal_show_part_table in fal_partition.c (packages\fal-latest\src) :         log_i("| %-*.*s | %-*.*s | 0x%08lx | 0x%08x |", part_name_max, FAL_DEV_NAME_MAX, part->name, flash_dev_name_max,
fal_show_part_table in fal_partition.c (packages\fal-latest\src) :     log_i("=============================================================");
fal_partition_init in fal_partition.c (packages\fal-latest\src) :         log_e("Initialize failed! Flash device (%s) NOT found.", FAL_PART_TABLE_FLASH_DEV_NAME);
fal_partition_init in fal_partition.c (packages\fal-latest\src) :         log_e("Setting partition table end offset address(%ld) out of flash bound(<%d).", part_table_offset, flash_dev->len);
fal_partition_init in fal_partition.c (packages\fal-latest\src) :         log_e("Initialize failed! No memory for table buffer.");
fal_partition_init in fal_partition.c (packages\fal-latest\src) :                         log_d("Find the partition table on '%s' offset @0x%08lx.", FAL_PART_TABLE_FLASH_DEV_NAME,
fal_partition_init in fal_partition.c (packages\fal-latest\src) :             log_e("Initialize failed! Flash device (%s) read error!", flash_dev->name);
fal_partition_init in fal_partition.c (packages\fal-latest\src) :             log_e("Initialize failed! No memory for partition table");
fal_partition_init in fal_partition.c (packages\fal-latest\src) :         log_e("Partition table NOT found on flash: %s (len: %d) from offset: 0x%08x.", FAL_PART_TABLE_FLASH_DEV_NAME,
fal_partition_init in fal_partition.c (packages\fal-latest\src) :             log_d("Warning: Do NOT found the flash device(%s).", partition_table[i].flash_name);
fal_partition_init in fal_partition.c (packages\fal-latest\src) :             log_e("Initialize failed! Partition(%s) offset address(%ld) out of flash bound(<%d).",
fal_partition_read in fal_partition.c (packages\fal-latest\src) :         log_e("Partition read error! Partition address out of bound.");
fal_partition_read in fal_partition.c (packages\fal-latest\src) :         log_e("Partition read error! Don't found flash device(%s) of the partition(%s).", part->flash_name, part->name);
fal_partition_read in fal_partition.c (packages\fal-latest\src) :         log_e("Partition read error! Flash device(%s) read error!", part->flash_name);
fal_partition_write in fal_partition.c (packages\fal-latest\src) :         log_e("Partition write error! Partition address out of bound.");
fal_partition_write in fal_partition.c (packages\fal-latest\src) :         log_e("Partition write error!  Don't found flash device(%s) of the partition(%s).", part->flash_name, part->name);
fal_partition_write in fal_partition.c (packages\fal-latest\src) :         log_e("Partition write error! Flash device(%s) write error!", part->flash_name);
fal_partition_erase in fal_partition.c (packages\fal-latest\src) :         log_e("Partition erase error! Partition address out of bound.");
fal_partition_erase in fal_partition.c (packages\fal-latest\src) :         log_e("Partition erase error! Don't found flash device(%s) of the partition(%s).", part->flash_name, part->name);
fal_partition_erase in fal_partition.c (packages\fal-latest\src) :         log_e("Partition erase error! Flash device(%s) erase error!", part->flash_name);
fal_blk_device_create in fal_rtt.c (packages\fal-latest\src) :         log_e("Error: the partition name (%s) is not found.", parition_name);
fal_blk_device_create in fal_rtt.c (packages\fal-latest\src) :         log_e("Error: the flash device name (%s) is not found.", fal_part->flash_name);
fal_blk_device_create in fal_rtt.c (packages\fal-latest\src) :         log_i("The FAL block device (%s) created successfully", fal_part->name);
fal_blk_device_create in fal_rtt.c (packages\fal-latest\src) :         log_e("Error: no memory for create FAL block device");
fal_mtd_nor_device_create in fal_rtt.c (packages\fal-latest\src) :         log_e("Error: the partition name (%s) is not found.", parition_name);
fal_mtd_nor_device_create in fal_rtt.c (packages\fal-latest\src) :         log_e("Error: the flash device name (%s) is not found.", fal_part->flash_name);
fal_mtd_nor_device_create in fal_rtt.c (packages\fal-latest\src) :         log_i("The FAL MTD NOR device (%s) created successfully", fal_part->name);
fal_mtd_nor_device_create in fal_rtt.c (packages\fal-latest\src) :         log_e("Error: no memory for create FAL MTD NOR device");
fal_char_device_create in fal_rtt.c (packages\fal-latest\src) :         log_e("Error: the partition name (%s) is not found.", parition_name);
fal_char_device_create in fal_rtt.c (packages\fal-latest\src) :         log_e("Error: the flash device name (%s) is not found.", fal_part->flash_name);
fal_char_device_create in fal_rtt.c (packages\fal-latest\src) :         log_i("The FAL char device (%s) created successfully", fal_part->name);
fal_char_device_create in fal_rtt.c (packages\fal-latest\src) :         log_e("Error: no memory for create FAL char device");
fsm_lowerup in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       FSMDEBUG(LOG_INFO, ("%s: Up event in state %d (%s)!\n",
fsm_lowerup in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("%s: lowerup state %d (%s) -> %d (%s)\n",
fsm_lowerdown in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       FSMDEBUG(LOG_INFO, ("%s: Down event in state %d (%s)!\n",
fsm_lowerdown in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("%s: lowerdown state %d (%s) -> %d (%s)\n",
fsm_open in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("%s: open state %d (%s) -> %d (%s)\n",
fsm_close in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("%s: close reason=%s state %d (%s) -> %d (%s)\n",
fsm_timeout in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         FSMDEBUG(LOG_WARNING, ("%s: timeout sending Terminate-Request state=%d (%s)\n",
fsm_timeout in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         FSMDEBUG(LOG_WARNING, ("%s: timeout resending Terminate-Requests state=%d (%s)\n",
fsm_timeout in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         FSMDEBUG(LOG_WARNING, ("%s: timeout sending Config-Requests state=%d (%s)\n",
fsm_timeout in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         FSMDEBUG(LOG_WARNING, ("%s: timeout resending Config-Request state=%d (%s)\n",
fsm_timeout in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       FSMDEBUG(LOG_INFO, ("%s: UNHANDLED timeout event in state %d (%s)!\n",
fsm_input in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     FSMDEBUG(LOG_WARNING, ("fsm_input(%x): Rcvd short header.\n",
fsm_input in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     FSMDEBUG(LOG_INFO, ("fsm_input(%x): Rcvd illegal length.\n",
fsm_input in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     FSMDEBUG(LOG_INFO, ("fsm_input(%x): Rcvd short packet.\n",
fsm_input in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     FSMDEBUG(LOG_INFO, ("fsm_input(%x): Rcvd packet in state %d (%s).\n",
fsm_input in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("fsm_input(%s):%d,%d,%d\n", PROTO_NAME(f), code, id, l));
fsm_input in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       FSMDEBUG(LOG_INFO, ("fsm_input(%s): default: \n", PROTO_NAME(f)));
fsm_rconfreq in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("fsm_rconfreq(%s): Rcvd id %d state=%d (%s)\n", 
fsm_rconfack in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("fsm_rconfack(%s): Rcvd id %d state=%d (%s)\n",
fsm_rconfack in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     FSMDEBUG(LOG_INFO, ("%s: received bad Ack (length %d)\n",
fsm_rconfnakrej in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("fsm_rconfnakrej(%s): Rcvd id %d state=%d (%s)\n",
fsm_rconfnakrej in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     FSMDEBUG(LOG_INFO, ("%s: received bad %s (length %d)\n",
fsm_rtermreq in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("fsm_rtermreq(%s): Rcvd id %d state=%d (%s)\n",
fsm_rtermreq in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         FSMDEBUG(LOG_INFO, ("%s terminated by peer (%p)\n", PROTO_NAME(f), p));
fsm_rtermreq in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         FSMDEBUG(LOG_INFO, ("%s terminated by peer\n", PROTO_NAME(f)));
fsm_rtermack in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("fsm_rtermack(%s): state=%d (%s)\n", 
fsm_rtermack in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       FSMDEBUG(LOG_INFO, ("fsm_rtermack(%s): UNHANDLED state=%d (%s)!!!\n", 
fsm_rcoderej in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("fsm_rcoderej(%s): state=%d (%s)\n", 
fsm_rcoderej in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     FSMDEBUG(LOG_INFO, ("fsm_rcoderej: Rcvd short Code-Reject packet!\n"));
fsm_rcoderej in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_WARNING, ("%s: Rcvd Code-Reject for code %d, id %d\n",
fsm_protreject in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       FSMDEBUG(LOG_INFO, ("%s: Protocol-reject event in state %d (%s)!\n",
fsm_sconfreq in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("%s: sending Configure-Request, id %d\n",
fsm_sdata in fsm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   FSMDEBUG(LOG_INFO, ("fsm_sdata(%s): Sent code %d,%d,%d.\n",
main in gateway.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\examples) :     IOT_SetLogLevel(IOT_LOG_DEBUG);
main in gateway.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\examples) :     IOT_DumpMemoryStats(IOT_LOG_DEBUG);
_DTLSVerifyOptions_set in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("Call mbedtls_ssl_conf_authmode");
_DTLSVerifyOptions_set in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("x509 ca cert pem len %d\r\n%s", (int)strlen((char *)p_ca_cert_pem) + 1, p_ca_cert_pem);
_DTLSVerifyOptions_set in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("mbedtls_x509_crt_parse result 0x%04x", result);
HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) line 109 : static void _DTLSLog_wrapper(void        *p_ctx, int level,
_DTLSLog_wrapper in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_I("[mbedTLS]:[%s]:[%d]: %s", p_file, line, p_str);
_DTLSContext_setup in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D("mbedtls_ssl_setup result 0x%04x", result);
_DTLSContext_setup in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("mbedtls_ssl_set_hostname %s", p_options->p_host);
_DTLSContext_setup in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("mbedtls_ssl_set_bio result 0x%04x", result);
_DTLSContext_setup in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("mbedtls_ssl_handshake result 0x%04x", result);
_DTLSSession_init in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_I("HAL_DTLSSession_init success");
HAL_DTLSSession_create in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("mbedtls_ctr_drbg_seed result 0x%04x", result);
HAL_DTLSSession_create in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("mbedtls_ssl_config_defaults result 0x%04x", result);
HAL_DTLSSession_create in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         mbedtls_ssl_conf_dbg(&p_dtls_session->conf, _DTLSLog_wrapper, NULL);
HAL_DTLSSession_create in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("mbedtls_ssl_cookie_setup result 0x%04x", result);
HAL_DTLSSession_create in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("DTLSVerifyOptions_set result 0x%04x", result);
HAL_DTLSSession_create in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("mbedtls_net_connect result 0x%04x", result);
HAL_DTLSSession_create in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("DTLSVerifyOptions_set result 0x%04x", result);
HAL_DTLSSession_read in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_D("mbedtls_ssl_read len %d bytes", len);
HAL_DTLSSession_read in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :                 LOG_I("Recv peer fatal alert message");
HAL_DTLSSession_read in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :                 LOG_I("The DTLS session was closed by peer");
HAL_DTLSSession_read in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :                 LOG_D("DTLS recv timeout");
HAL_DTLSSession_read in HAL_DTLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :                 LOG_E("mbedtls_ssl_read error result (-0x%04x)", len);
HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) line 34 : static char log_buf[RT_CONSOLEBUF_SIZE];
HAL_MutexDestroy in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("destroy mutex failed, err num: %d", err_num);
HAL_MutexLock in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("lock mutex failed, err num: %d", err_num);
HAL_MutexUnlock in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("unlock mutex failed, err num: %d", err_num);
HAL_SemaphoreCreate in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("Semaphore create failed!");
HAL_SemaphoreDestroy in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("In param (sem) is NULL!");
HAL_SemaphoreDestroy in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :             LOG_E("sem delete failed! errno:%d", err);
HAL_SemaphoreDestroy in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("Error sem handler!");
HAL_SemaphorePost in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("In param (sem) is NULL!");
HAL_SemaphorePost in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :             LOG_E("sem release failed! errno:%d", err);
HAL_SemaphorePost in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("Error sem handler!");
HAL_SemaphoreWait in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("In param (sem) is NULL!");
HAL_SemaphoreWait in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :             LOG_E("sem take failed! errno:%d", err);
HAL_SemaphoreWait in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("Error sem handler!");
HAL_Printf in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :     rt_vsnprintf(log_buf, RT_CONSOLEBUF_SIZE, fmt, args);
HAL_Printf in HAL_OS_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :     rt_kprintf("%s", log_buf);
HAL_TCP_Establish in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :     LOG_D("establish tcp connection with server(host=%s port=%d)", host, port);
HAL_TCP_Establish in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("getaddrinfo error");
HAL_TCP_Establish in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :             LOG_E("socket type error");
HAL_TCP_Establish in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :             LOG_E("create socket error");
HAL_TCP_Establish in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("connect error");
HAL_TCP_Establish in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("fail to establish tcp");
HAL_TCP_Establish in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_D("success to establish tcp, fd=%d", rc);
HAL_TCP_Destroy in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_I("the FD of user can not less than 2 in rt-thread OS, Please see fd_get() in dfs.c.");
HAL_TCP_Destroy in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("closesocket error");
HAL_TCP_Write in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                     LOG_E("Should NOT arrive");
HAL_TCP_Write in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                 LOG_E("select-write timeout %d", timeout_ms);
HAL_TCP_Write in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                     LOG_E("EINTR be caught");
HAL_TCP_Write in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                 LOG_E("select-write fail");
HAL_TCP_Write in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                 LOG_E("No data be sent");
HAL_TCP_Write in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                     LOG_E("EINTR be caught");
HAL_TCP_Write in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                 LOG_E("send fail");
HAL_TCP_Read in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                 LOG_E("connection is closed");
HAL_TCP_Read in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                     LOG_E("EINTR be caught");
HAL_TCP_Read in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                 LOG_E("recv fail");
HAL_TCP_Read in HAL_TCP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :             LOG_E("select-recv fail");
_real_confirm in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D("certificate verification result: 0x%02x", verify_result);
_real_confirm in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E("! fail ! ERROR_CERTIFICATE_EXPIRED");
_real_confirm in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E("! fail ! server certificate has been revoked");
_real_confirm in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E("! fail ! CN mismatch");
_real_confirm in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E("! fail ! self-signed or not signed by a trusted CA");
_ssl_parse_crt in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("crt content:%u", (uint32_t)strlen(buf));
_ssl_client_init in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D("Loading the CA root certificate ...");
_ssl_client_init in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E(" failed ! x509parse_crt returned -0x%04x", -ret);
_ssl_client_init in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D(" ok (%d skipped)", ret);
_ssl_client_init in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("start prepare client cert .");
_ssl_client_init in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("MBEDTLS_CERTS_C not defined.");
_ssl_client_init in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E(" failed!  mbedtls_x509_crt_parse returned -0x%x\n", -ret);
_ssl_client_init in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("start mbedtls_pk_parse_key[%s]", cli_pwd);
_ssl_client_init in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("MBEDTLS_CERTS_C not defined.");
_ssl_client_init in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E(" failed\n  !  mbedtls_pk_parse_key returned -0x%x\n", -ret);
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E(" failed ! ssl_client_init returned -0x%04x", -ret);
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D("Connecting to /%s/%s...", addr, port);
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E(" failed ! net_connect returned -0x%04x", -ret);
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D(" ok");
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D("  . Setting up the SSL/TLS structure...");
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E(" failed! mbedtls_ssl_config_defaults returned %d", ret);
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D(" ok");
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E(" failed\n  ! mbedtls_ssl_conf_own_cert returned %d\n", ret);
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E("failed! mbedtls_ssl_setup returned %d", ret);
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D("Performing the SSL/TLS handshake...");
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("failed  ! mbedtls_ssl_handshake returned -0x%04x", -ret);
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D(" ok");
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D("  . Verifying peer X.509 certificate..");
_TLSConnectNetwork in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E(" failed  ! verify result not confirmed.");
_network_ssl_read in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :                 LOG_E("ssl recv error: code = %d, err_str = '%s'", ret, err_str);
_network_ssl_read in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :                 LOG_E("ssl recv error: code = %d, err_str = '%s'", ret, err_str);
_network_ssl_write in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("ssl write timeout");
_network_ssl_write in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :             LOG_E("ssl write fail, code=%d, str=%s", ret, err_str);
_network_ssl_disconnect in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_D("need release client crt&key");
_network_ssl_disconnect in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :     LOG_D("ssl_disconnect");
HAL_SSL_Destroy in HAL_TLS_mbedtls.c (packages\ali-iotkit-latest\ports\tls\mbedtls) :         LOG_E("handle is NULL");
HAL_UDP_create in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("getaddrinfo error");
HAL_UDP_create in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                 LOG_E("create socket error");
HAL_UDP_create_without_connect in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("socket error");
HAL_UDP_create_without_connect in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("setsockopt error");
HAL_UDP_create_without_connect in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :                 LOG_E("can't resolute the host address");
HAL_UDP_create_without_connect in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :     LOG_D("success to establish udp, fd=%d", (int)sockfd);
HAL_UDP_connect in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :     LOG_D("HAL_UDP_connect, host=%s, port=%d", host, port);
HAL_UDP_connect in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("getaddrinfo error");
HAL_UDP_joinmulticast in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("setsockopt error");
HAL_UDP_joinmulticast in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("setsockopt error");
HAL_UDP_sendto in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :             LOG_E("can't resolute the host address");
HAL_UDP_sendto in HAL_UDP_rtthread.c (packages\ali-iotkit-latest\ports\rtthread) :         LOG_E("sendto error");
http2_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\http2) line 17 : #define h2_emerg(...)                   log_emerg("h2", __VA_ARGS__)
http2_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\http2) line 18 : #define h2_crit(...)                    log_crit("h2", __VA_ARGS__)
http2_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\http2) line 19 : #define h2_err(...)                     log_err("h2", __VA_ARGS__)
http2_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\http2) line 20 : #define h2_warning(...)                 log_warning("h2", __VA_ARGS__)
http2_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\http2) line 21 : #define h2_info(...)                    log_info("h2", __VA_ARGS__)
http2_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\http2) line 22 : #define h2_debug(...)                   log_debug("h2", __VA_ARGS__)
PT_THREAD in httpd.c (rt-thread\components\net\uip\apps\webserver) :   /*  httpd_log_file(uip_conn->ripaddr, s->filename);*/
httpd.h (rt-thread\components\net\uip\apps\webserver) line 60 : void httpd_log_file(u16_t *requester, char *file);
http_debug.h (packages\ali-iotkit-latest\iotkit-embedded\src\http) line 13 :     #define http_emerg(...)             log_emerg("HTTP", __VA_ARGS__)
http_debug.h (packages\ali-iotkit-latest\iotkit-embedded\src\http) line 14 :     #define http_crit(...)              log_crit("HTTP", __VA_ARGS__)
http_debug.h (packages\ali-iotkit-latest\iotkit-embedded\src\http) line 15 :     #define http_err(...)               log_err("HTTP", __VA_ARGS__)
http_debug.h (packages\ali-iotkit-latest\iotkit-embedded\src\http) line 16 :     #define http_warning(...)           log_warning("HTTP", __VA_ARGS__)
http_debug.h (packages\ali-iotkit-latest\iotkit-embedded\src\http) line 17 :     #define http_info(...)              log_info("HTTP", __VA_ARGS__)
http_debug.h (packages\ali-iotkit-latest\iotkit-embedded\src\http) line 18 :     #define http_debug(...)             log_debug("HTTP", __VA_ARGS__)
impl_gateway.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) line 21 :     #define impl_gateway_err(...)       log_err("impl.gateway", __VA_ARGS__)
impl_gateway.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) line 22 :     #define impl_gateway_info(...)      log_info("impl.gateway", __VA_ARGS__)
impl_gateway.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) line 23 :     #define impl_gateway_debug(...)     log_debug("impl.gateway", __VA_ARGS__)
impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 10 : #ifdef LOG_REPORT_TO_CLOUD
impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 11 :     #include "iotx_log_report.h"
_iotx_linkkit_upstream_sync_callback_list_insert in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Message Already Exist: %d", msgid);
_iotx_linkkit_upstream_sync_callback_list_insert in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("malloc error");
_iotx_linkkit_upstream_sync_callback_list_insert in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_debug("New Message, msgid: %d", msgid);
_iotx_linkkit_upstream_sync_callback_list_remove in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Message Found: %d, Delete It", msgid);
_iotx_linkkit_upstream_sync_callback_list_search in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("invalid param");
_iotx_linkkit_upstream_sync_callback_list_search in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Sync Message Found: %d", msgid);
_iotx_linkkit_upstream_callback_remove in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_debug("Sync Message %d Result: %d", msgid, sync_node->code);
impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 223 : #ifdef LOG_REPORT_TO_CLOUD
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) : #ifdef LOG_REPORT_TO_CLOUD
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :     dm_log_info("Receive Message Type: %d", type);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_info("Receive Message: %s", payload);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) : #ifdef LOG_REPORT_TO_CLOUD
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Raw Data: %.*s", lite_item_payload.value_length, lite_item_payload.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("No Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Raw Data: %.*s", lite_item_payload.value_length, lite_item_payload.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("No Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Id: %.*s", lite_item_id.value_length, lite_item_id.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current ServiceID: %.*s", lite_item_serviceid.value_length, lite_item_serviceid.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Payload: %.*s", lite_item_payload.value_length, lite_item_payload.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Ctx: %.*s", lite_item_ctx.value_length, lite_item_ctx.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Not Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Payload: %.*s", lite_item_payload.value_length, lite_item_payload.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("No Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) : #ifdef LOG_REPORT_TO_CLOUD
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) : #ifdef LOG_REPORT_TO_CLOUD
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Data: %.*s", lite_item_data.value_length, lite_item_data.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("No Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Id: %.*s", lite_item_id.value_length, lite_item_id.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Payload: %.*s", lite_item_payload.value_length, lite_item_payload.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Ctx: %.*s", lite_item_ctx.value_length, lite_item_ctx.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("property_get_ctx_num: %0x016llX", (unsigned int)property_get_ctx_num);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("property_get_ctx: %p", property_get_ctx);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("No Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Id: %d", lite_item_id.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Code: %d", lite_item_code.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                     dm_log_err("No Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Id: %d", lite_item_id.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Code: %d", lite_item_code.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current EventID: %.*s", lite_item_eventid.value_length, lite_item_eventid.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Message: %.*s", lite_item_payload.value_length, lite_item_payload.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Not Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Not Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current UTC: %.*s", lite_item_utc.value_length, lite_item_utc.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Not Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Id: %.*s", lite_item_id.value_length, lite_item_id.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current ServiceID: %.*s", lite_item_serviceid.value_length, lite_item_serviceid.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current RRPC ID: %.*s", lite_item_rrpcid.value_length, lite_item_rrpcid.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Payload: %.*s", lite_item_payload.value_length, lite_item_payload.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Not Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Firmware Version: %.*s", lite_item_version.value_length, lite_item_version.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Config ID: %.*s", lite_item_configid.value_length, lite_item_configid.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Config Size: %d", lite_item_configsize.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Get Type: %.*s", lite_item_gettype.value_length, lite_item_gettype.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Sign: %.*s", lite_item_sign.value_length, lite_item_sign.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Sign Method: %.*s", lite_item_signmethod.value_length, lite_item_signmethod.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current URL: %.*s", lite_item_url.value_length, lite_item_url.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Id: %d", lite_item_id.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Code: %d", lite_item_code.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Topo List: %.*s", lite_item_topo.value_length, lite_item_topo.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Not Enough Memory");
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Id: %d", lite_item_id.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Code: %d", lite_item_code.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Devid: %d", lite_item_devid.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_debug("Current Time: %d", lite_item_time.value_int);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_debug("Current Product Key: %.*s", lite_item_pk.value_length, lite_item_pk.value);
_iotx_linkkit_event_callback in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                     dm_log_err("Not Enough Memory");
_iotx_linkkit_master_open in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("Not Enough Memory");
_iotx_linkkit_master_open in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("Not Enough Memory");
_iotx_linkkit_master_connect in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("DM Start Failed");
_iotx_linkkit_master_connect in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("DM Subscribe Failed");
_iotx_linkkit_slave_connect in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("master isn't start");
_iotx_linkkit_slave_connect in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("devid invalid");
_iotx_linkkit_subdev_delete_topo in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("master isn't start");
_iotx_linkkit_subdev_delete_topo in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("devid invalid");
IOT_Linkkit_Open in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("Invalid Parameter");
IOT_Linkkit_Open in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_err("Unknown Device Type");
IOT_Linkkit_Connect in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("Invalid Parameter");
IOT_Linkkit_Yield in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("Invalid Parameter");
IOT_Linkkit_Close in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("Invalid Parameter");
IOT_Linkkit_Report in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("Invalid Parameter");
IOT_Linkkit_Report in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Invalid Parameter");
IOT_Linkkit_Report in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) : #ifdef LOG_REPORT_TO_CLOUD
IOT_Linkkit_Report in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Invalid Parameter");
IOT_Linkkit_Report in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Invalid Parameter");
IOT_Linkkit_Report in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Invalid Parameter");
IOT_Linkkit_Report in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Invalid Parameter");
IOT_Linkkit_Report in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :                 dm_log_err("Invalid Parameter");
IOT_Linkkit_Report in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_err("Unknown Message Type");
IOT_Linkkit_Query in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("Invalid Parameter");
IOT_Linkkit_Query in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             dm_log_err("Unknown Message Type");
IOT_Linkkit_TriggerEvent in impl_linkkit.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :         dm_log_err("Invalid Parameter");
linkkit_ntp_time_reply in impl_ntp.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) :     log_debug("[ntp]", "ntp reply len:%u, payload:%s\r\n", payload_len, payload);
linkkit_ntp_time_request in impl_ntp.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) :     log_debug("[ntp]", "report ntp:%s\r\n", packet);
impl_solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) line 22 :     #define impl_solo_err(...)       log_err("impl.solo", __VA_ARGS__)
impl_solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) line 23 :     #define impl_solo_info(...)      log_info("impl.solo", __VA_ARGS__)
impl_solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) line 24 :     #define impl_solo_debug(...)     log_debug("impl.solo", __VA_ARGS__)
impl_solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) line 586 : int being_deprecated linkkit_start(int max_buffered_msg, int get_tsl_from_cloud, linkkit_loglevel_t log_level,
linkkit_start in impl_solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) :     if (max_buffered_msg <= 0 || ops == NULL || log_level > LOG_DEBUG_LEVEL ||
linkkit_start in impl_solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) :     IOT_SetLogLevel(log_level);
infra_compat.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 19 :     #define sdk_err(...)       log_err("infra_compat", __VA_ARGS__)
infra_compat.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 20 :     #define sdk_info(...)      log_info("infra_compat", __VA_ARGS__)
IOT_DumpMemoryStats in infra_compat.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     if (lvl > LOG_DEBUG_LEVEL) {
IOT_DumpMemoryStats in infra_compat.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :         lvl = LOG_DEBUG_LEVEL;
_IOT_LogLevel in infra_compat.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     IOT_LOG_NONE = 0,
_IOT_LogLevel in infra_compat.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     IOT_LOG_CRIT,
_IOT_LogLevel in infra_compat.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     IOT_LOG_ERROR,
_IOT_LogLevel in infra_compat.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     IOT_LOG_WARNING,
_IOT_LogLevel in infra_compat.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     IOT_LOG_INFO,
_IOT_LogLevel in infra_compat.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     IOT_LOG_DEBUG,
infra_compat.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 263 : #define IOT_CloseLog()              IOT_SetLogLevel(IOT_LOG_NONE)
infra_compat.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 264 : #define IOT_LOG_EMERG               IOT_LOG_NONE
infra_httpc.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 20 :     #define httpc_err(...)   log_err("httpc", __VA_ARGS__)
infra_httpc.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 21 :     #define httpc_info(...)  log_info("httpc", __VA_ARGS__)
infra_httpc.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 22 :     #define httpc_debug(...) log_debug("httpc", __VA_ARGS__)
_http_send_header in infra_httpc.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     log_multi_line(LOG_DEBUG_LEVEL, "REQUEST", "%s", send_buf, ">");
httpclient_recv_response in infra_httpc.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :             log_multi_line(LOG_DEBUG_LEVEL, "RESPONSE", "%s", buf, "<");
infra_json_parser.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 22 : #define jparser_debug(...)              log_debug("jparser", __VA_ARGS__)
infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 15 : #if defined(INFRA_LOG) && !defined(INFRA_LOG_ALL_MUTED)
infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 16 : static log_client logcb = {
infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 18 :     .priority   = LOG_DEBUG_LEVEL,
infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 31 : void LITE_syslog_routine(char *m, const char *f, const int l, const int level, const char *fmt, va_list *params)
LITE_syslog_routine in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     if (LITE_get_loglevel() < level || level < LOG_NONE_LEVEL) {
LITE_syslog_routine in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     LITE_printf(LOG_PREFIX_FMT, lvl_names[level], f, l);
LITE_syslog_routine in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     o += LITE_vsnprintf(o, LOG_MSG_MAXLEN + 1, fmt, *params);
LITE_syslog_routine in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     if (o - tmpbuf > LOG_MSG_MAXLEN) {
LITE_syslog_routine in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     if (strlen(tmpbuf) == LOG_MSG_MAXLEN) {
LITE_syslog in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     LITE_syslog_routine(m, f, l, level, fmt, &ap);
LITE_set_loglevel in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     if (pri != LOG_NONE_LEVEL) {
LITE_rich_hexdump in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     LITE_printf(LOG_PREFIX_FMT, lvl_names[level], f, l);
infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 128 : int log_multi_line_internal(const char *f, const int l,
IOT_SetLogLevel in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     if (lvl > LOG_DEBUG_LEVEL) {
IOT_SetLogLevel in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :                    LOG_NONE_LEVEL,
IOT_SetLogLevel in infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :                    LOG_DEBUG_LEVEL);
infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 250 : int log_multi_line_internal(const char *f, const int l,
infra_log.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 265 : #endif  /* #if defined(INFRA_LOG) && !defined(INFRA_LOG_ALL_MUTED) */
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 1 : #ifndef _INFRA_LOG_H_
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 2 : #define _INFRA_LOG_H_
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 14 : #define LITE_LOG_ENABLED
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 16 : #define LOG_MSG_MAXLEN                  (255)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 17 : #define LOG_MOD_NAME_LEN                (7)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 18 : #define LOG_PREFIX_FMT                  "[%s] %s(%d): "
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 26 :     #undef  LOG_MSG_MAXLEN
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 27 :     #define LOG_MSG_MAXLEN              (512)
{anonlog_client} in infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     char            name[LOG_MOD_NAME_LEN + 1];
{anonlog_client} in infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     char            text_buf[LOG_MSG_MAXLEN + 1];
{anonlog_client} in infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) : } log_client;
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 40 : void    LITE_syslog_routine(char *m, const char *f, const int l, const int level, const char *fmt, va_list *params);
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 43 : #define LOG_NONE_LEVEL                  (0)     /* no log printed at all */
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 44 : #define LOG_CRIT_LEVEL                  (1)     /* current application aborting */
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 45 : #define LOG_ERR_LEVEL                   (2)     /* current app-module error */
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 46 : #define LOG_WARNING_LEVEL               (3)     /* using default parameters */
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 47 : #define LOG_INFO_LEVEL                  (4)     /* running messages */
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 48 : #define LOG_DEBUG_LEVEL                 (5)     /* debugging messages */
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 49 : #define LOG_FLOW_LEVEL                  (6)     /* code/packet flow messages */
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 51 : #if defined(INFRA_LOG) && !defined(INFRA_LOG_ALL_MUTED)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 52 :     #if defined(INFRA_LOG_MUTE_FLW)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 53 :         #define log_flow(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 55 :         #define log_flow(mod, ...)          LITE_syslog(mod, __FUNCTION__, __LINE__, LOG_FLOW_LEVEL, __VA_ARGS__)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 58 :     #if defined(INFRA_LOG_MUTE_DBG)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 59 :         #define log_debug(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 61 :         #define log_debug(mod, ...)         LITE_syslog(mod, __FUNCTION__, __LINE__, LOG_DEBUG_LEVEL, __VA_ARGS__)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 64 :     #if defined(INFRA_LOG_MUTE_INF)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 65 :         #define log_info(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 67 :         #define log_info(mod, ...)          LITE_syslog(mod, __FUNCTION__, __LINE__, LOG_INFO_LEVEL, __VA_ARGS__)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 70 :     #if defined(INFRA_LOG_MUTE_WRN)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 71 :         #define log_warning(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 73 :         #define log_warning(mod, ...)       LITE_syslog(mod, __FUNCTION__, __LINE__, LOG_WARNING_LEVEL, __VA_ARGS__)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 76 :     #if defined(INFRA_LOG_MUTE_ERR)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 77 :         #define log_err(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 79 :         #define log_err(mod, ...)           LITE_syslog(mod, __FUNCTION__, __LINE__, LOG_ERR_LEVEL, __VA_ARGS__)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 82 :     #if defined(INFRA_LOG_MUTE_CRT)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 83 :         #define log_crit(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 85 :         #define log_crit(mod, ...)          LITE_syslog(mod, __FUNCTION__, __LINE__, LOG_CRIT_LEVEL, __VA_ARGS__)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 89 :     #define log_flow(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 90 :     #define log_debug(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 91 :     #define log_info(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 92 :     #define log_warning(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 93 :     #define log_err(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 94 :     #define log_crit(mod, ...)
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 98 : int     log_multi_line_internal(const char *f, const int l,
infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 100 : #define log_multi_line(level, title, fmt, payload, mark) \
log_multi_line in infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     log_multi_line_internal(__func__, __LINE__, title, level, payload, mark)
HEXDUMP_DEBUG in infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     LITE_rich_hexdump(__func__, __LINE__, LOG_DEBUG_LEVEL, #buf, (const void *)buf, (const int)len)
HEXDUMP_INFO in infra_log.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     LITE_rich_hexdump(__func__, __LINE__, LOG_INFO_LEVEL, #buf, (const void *)buf, (const int)len)
infra_mem_stats.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 17 :     #define utils_emerg(...)    log_emerg("util", __VA_ARGS__)
infra_mem_stats.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 18 :     #define utils_crit(...)     log_crit("util", __VA_ARGS__)
infra_mem_stats.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 19 :     #define utils_err(...)      log_err("util", __VA_ARGS__)
infra_mem_stats.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 20 :     #define utils_warning(...)  log_warning("util", __VA_ARGS__)
infra_mem_stats.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 21 :     #define utils_info(...)     log_info("util", __VA_ARGS__)
infra_mem_stats.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 22 :     #define utils_debug(...)    log_debug("util", __VA_ARGS__)
LITE_malloc_internal in infra_mem_stats.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :         LITE_dump_malloc_free_stats(LOG_DEBUG_LEVEL);
LITE_malloc_internal in infra_mem_stats.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :         log_warning("utils", "large allocating @ %s(%d) for %04d bytes!", f, l, size);
LITE_free_internal in infra_mem_stats.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :         log_warning("utils", "Cannot find %p allocated! Skip stat ...", ptr);
LITE_free in infra_mem_stats.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :             log_warning("utils", "%s == NULL! LITE_free(%s) aborted.", #ptr, #ptr); \
infra_net.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 16 :     #define net_err(...)      log_err("infra_net", __VA_ARGS__)
preauth_get_connection_info in infra_preauth.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) : #ifdef INFRA_LOG_NETWORK_PAYLOAD
preauth_get_connection_info in infra_preauth.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) :     iotx_facility_json_print(response_buff, LOG_INFO_LEVEL, '<');
infra_preauth.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 13 :     #define preauth_err(...)   log_err("preauth", __VA_ARGS__)
infra_preauth.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 14 :     #define preauth_info(...)  log_info("preauth", __VA_ARGS__)
infra_preauth.h (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 15 :     #define preauth_debug(...) log_debug("preauth", __VA_ARGS__)
infra_prt_nwk_payload.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 3 : #ifdef INFRA_LOG_NETWORK_PAYLOAD
infra_prt_nwk_payload.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 158 : #endif  /* #ifdef INFRA_LOG_NETWORK_PAYLOAD */
infra_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 35 :     #define VERSION_DEBUG(...)  log_debug("version", __VA_ARGS__)
infra_report.c (packages\ali-iotkit-latest\iotkit-embedded\src\infra) line 36 :     #define VERSION_ERR(...)    log_err("version", __VA_ARGS__)
iotx_cm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 34 :     #define cm_debug(...)        log_debug("CM", __VA_ARGS__)
iotx_cm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 35 :     #define cm_info(...)         log_info("CM", __VA_ARGS__)
iotx_cm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 36 :     #define cm_warning(...)      log_warning("CM", __VA_ARGS__)
iotx_cm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 37 :     #define cm_err(...)          log_err("CM", __VA_ARGS__)
iotx_cloud_conn_mqtt_event_handle in iotx_cm_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) :             /* cm_info(cm_log_info_MQTT_reconnect); */
IOT_CoAP_SendMessage in iotx_coap_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) : #ifdef INFRA_LOG_NETWORK_PAYLOAD
IOT_CoAP_SendMessage in iotx_coap_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\coap\client) :     iotx_facility_json_print((const char *)p_message->p_payload, LOG_INFO_LEVEL, '>');
iotx_dm.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 183 : #ifdef LOG_REPORT_TO_CLOUD
iotx_dm.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 184 :     int iotx_dm_log_post(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len);
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 91 :     #define dm_log_emerg(...)     log_emerg("DM", __VA_ARGS__)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 92 :     #define dm_log_crit(...)      log_crit("DM", __VA_ARGS__)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 93 :     #define dm_log_err(...)       log_err("DM", __VA_ARGS__)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 94 :     #define dm_log_warning(...)   log_warning("DM", __VA_ARGS__)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 95 :     #define dm_log_info(...)      log_info("DM", __VA_ARGS__)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 96 :     #define dm_log_debug(...)     log_debug("DM", __VA_ARGS__)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 98 :     #define dm_log_emerg(...)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 99 :     #define dm_log_crit(...)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 100 :     #define dm_log_err(...)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 101 :     #define dm_log_warning(...)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 102 :     #define dm_log_info(...)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 103 :     #define dm_log_debug(...)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 108 : #ifdef LOG_REPORT_TO_CLOUD
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 109 : #define LOG_POLL_SIZE (CONFIG_MQTT_TX_MAXLEN - 174)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 110 : #define REPORT_LEN (LOG_POLL_SIZE - 110)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 111 : #define OVERFLOW_LEN (LOG_POLL_SIZE - 10)
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 119 : int reset_log_poll();
iotx_dm_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model) line 120 : int remove_log_poll();
iotx_mqtt_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) line 6 : #ifdef LOG_REPORT_TO_CLOUD
iotx_mqtt_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) line 7 :     #include "iotx_log_report.h"
iotx_mc_handle_recv_PUBLISH in iotx_mqtt_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) : #ifdef INFRA_LOG_NETWORK_PAYLOAD
iotx_mc_handle_recv_PUBLISH in iotx_mqtt_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) : #ifdef INFRA_LOG_NETWORK_PAYLOAD
iotx_mc_handle_recv_PUBLISH in iotx_mqtt_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) :     iotx_facility_json_print(json_payload, LOG_INFO_LEVEL, '<');
iotx_mc_handle_recv_PUBLISH in iotx_mqtt_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) : #ifdef LOG_REPORT_TO_CLOUD
MQTTPublish in iotx_mqtt_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) : #ifdef INFRA_LOG_NETWORK_PAYLOAD
MQTTPublish in iotx_mqtt_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) : #ifdef INFRA_LOG_NETWORK_PAYLOAD
MQTTPublish in iotx_mqtt_client.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) :     iotx_facility_json_print(json_payload, LOG_INFO_LEVEL, '>');
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_INFO("In downloading state");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("invalid json doc of OTA ");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("fail state of json doc of OTA");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Not 'data' key in json doc of OTA");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Get config parameter failed");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Initialize fetch module failed");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("invalid json doc of OTA ");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("fail state of json doc of OTA");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Not 'data' key in json doc of OTA");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Get firmware parameter failed");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Initialize fetch module failed");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Not 'data' key in json doc of OTA");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Get firmware parameter failed");
ota_callback in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Initialize fetch module failed");
IOT_OTA_Init in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("iot ota has been initialized");
IOT_OTA_Init in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("one or more parameters is invalid");
IOT_OTA_Init in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("allocate failed");
IOT_OTA_Init in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("initialize signal channel failed");
IOT_OTA_Init in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("initialize md5 failed");
IOT_OTA_Init in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("initialize sha256 failed");
IOT_OTA_Deinit in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is NULL");
IOT_OTA_Deinit in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is uninitialized");
IOT_OTA_ReportVersion in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("one or more invalid parameter");
IOT_OTA_ReportVersion in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("version string is invalid: must be [1, 32] chars");
IOT_OTA_ReportVersion in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is uninitialized");
IOT_OTA_ReportVersion in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("allocate for msg_informed failed");
IOT_OTA_ReportVersion in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("generate inform message failed");
IOT_OTA_ReportVersion in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("Report version failed");
iotx_req_image in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("one or more invalid parameter");
iotx_req_image in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("version string is invalid: must be [1, 32] chars");
iotx_req_image in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is uninitialized");
iotx_req_image in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("ota is busying");
iotx_req_image in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("allocate for msg_informed failed");
iotx_req_image in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("generate request image message failed");
iotx_req_image in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("Request image failed");
IOT_OTA_ReportProgress in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is NULL");
IOT_OTA_ReportProgress in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is uninitialized");
IOT_OTA_ReportProgress in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("progress is a invalid parameter");
IOT_OTA_ReportProgress in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("allocate for msg_reported failed");
IOT_OTA_ReportProgress in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("generate reported message failed");
IOT_OTA_ReportProgress in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("Report progress failed");
iotx_ota_get_config in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is NULL");
iotx_ota_get_config in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is uninitialized");
iotx_ota_get_config in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("ota is busying");
iotx_ota_get_config in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("allocate for msg_reported failed");
iotx_ota_get_config in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :     OTA_LOG_INFO(msg_get);
iotx_ota_get_config in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("publish failed");
IOT_OTA_IsFetching in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is NULL");
IOT_OTA_IsFetching in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is uninitialized");
IOT_OTA_IsFetchFinish in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is NULL");
IOT_OTA_IsFetchFinish in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is uninitialized");
IOT_OTA_FetchYield in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("invalid parameter");
IOT_OTA_FetchYield in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("Fetch firmware failed");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Firmware can be checked in IOT_OTAS_FETCHED state only");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_DEBUG("origin=%s, now=%s", h_ota->md5sum, md5_str);
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                     OTA_LOG_ERROR("image checksum compare failed");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Invalid parameter");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                 OTA_LOG_ERROR("Config can be checked in IOT_OTAS_FETCHED state only");
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                     OTA_LOG_DEBUG("origin=%s, now=%s", h_ota->sign, md5_str);
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                     OTA_LOG_DEBUG("origin=%s, now=%s", h_ota->sign, sha256_str);
IOT_OTA_Ioctl in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :             OTA_LOG_ERROR("invalid cmd type");
IOT_OTA_GetLastError in iotx_ota.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("handle is NULL");
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 38 : #define OTA_LOG_CRIT(...)       log_crit("ota", __VA_ARGS__)
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 39 : #define OTA_LOG_ERROR(...)      log_err("ota", __VA_ARGS__)
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 40 : #define OTA_LOG_WRN(...)        log_warning("ota", __VA_ARGS__)
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 41 : #define OTA_LOG_INFO(...)       log_info("ota", __VA_ARGS__)
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 42 : #define OTA_LOG_DEBUG(...)      log_debug("ota", __VA_ARGS__)
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 44 : #define OTA_LOG_CRIT(...)       do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 45 : #define OTA_LOG_ERROR(...)      do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 46 : #define OTA_LOG_WRN(...)        do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 47 : #define OTA_LOG_INFO(...)       do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
iotx_ota_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\ota) line 48 : #define OTA_LOG_DEBUG(...)      do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
ipcp_ackci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   IPCPDEBUG(LOG_INFO, ("ipcp_ackci: received bad Ack!\n"));
ipcp_nakci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       IPCPDEBUG(LOG_INFO, ("local IP address %s\n",
ipcp_nakci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       IPCPDEBUG(LOG_INFO, ("remote IP address %s\n",
ipcp_nakci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("primary DNS address %s\n", inet_ntoa(cidnsaddr)));
ipcp_nakci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("secondary DNS address %s\n", inet_ntoa(cidnsaddr)));
ipcp_nakci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   IPCPDEBUG(LOG_INFO, ("ipcp_nakci: received bad Nak!\n"));
ipcp_rejci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   IPCPDEBUG(LOG_INFO, ("ipcp_rejci: received bad Reject!\n"));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       IPCPDEBUG(LOG_INFO, ("ipcp_reqci: bad CI length!\n"));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("ipcp_reqci: received ADDRS\n"));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("his addr %s\n", inet_ntoa(ciaddr1)));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("our addr %s\n", inet_ntoa(ciaddr2)));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Reject ADDR not allowed\n"));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Reject ADDR bad len\n"));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Nak ADDR %s\n", inet_ntoa(ciaddr1)));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Reject ADDR %s\n", inet_ntoa(ciaddr1)));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("ipcp_reqci: ADDR %s\n", inet_ntoa(ciaddr1)));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Rejecting DNS%d Request\n", d+1));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Naking DNS%d Request %s\n",
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("ipcp_reqci: received DNS%d Request\n", d+1));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("ipcp_reqci: received WINS%d Request\n", d+1));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Rejecting COMPRESSTYPE not allowed\n"));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Rejecting COMPRESSTYPE len=%d\n", cilen));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Rejecting COMPRESSTYPE %d\n", cishort));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Naking VJ max slot %d\n", maxslotindex));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Naking VJ cflag %d\n", cflag));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, (
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Rejecting unknown CI type %d\n", citype));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Rejecting too many naks\n"));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     IPCPDEBUG(LOG_INFO, ("ipcp_reqci: Requesting peer address\n"));
ipcp_reqci in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   IPCPDEBUG(LOG_INFO, ("ipcp_reqci: returning Configure-%s\n", CODENAME(rc)));
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   IPCPDEBUG(LOG_INFO, ("ipcp: up\n"));
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     IPCPDEBUG(LOG_ERR, ("Could not determine remote IP address\n"));
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     IPCPDEBUG(LOG_ERR, ("Could not determine local IP address\n"));
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     IPCPDEBUG(LOG_ERR, ("Peer is not authorized to use remote address %s\n",
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     IPCPDEBUG(LOG_WARNING, ("sifaddr failed\n"));
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     IPCPDEBUG(LOG_WARNING, ("sifup failed\n"));
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   IPCPDEBUG(LOG_NOTICE, ("local  IP address %s\n", inet_ntoa(go->ouraddr)));
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   IPCPDEBUG(LOG_NOTICE, ("remote IP address %s\n", inet_ntoa(ho->hisaddr)));
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     IPCPDEBUG(LOG_NOTICE, ("primary   DNS address %s\n", inet_ntoa(go->dnsaddr[0])));
ipcp_up in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     IPCPDEBUG(LOG_NOTICE, ("secondary DNS address %s\n", inet_ntoa(go->dnsaddr[1])));
ipcp_down in ipcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   IPCPDEBUG(LOG_INFO, ("ipcp: down\n"));
ipv6cp_up in ipv6cp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	    PPPDEBUG(LOG_DEBUG, ("sif6addr failed"));
ipv6cp_up in ipv6cp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	    PPPDEBUG(LOG_DEBUG, ("sif6up failed (IPV6)"));
ipv6cp_up in ipv6cp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 	    PPPDEBUG(LOG_DEBUG, ("sif6addr failed"));
ipv6cp_up in ipv6cp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 	    PPPDEBUG(LOG_DEBUG, ("sif6up failed (IPV6)"));
rt_kprintf in kservice.c (rt-thread\src) :     static char rt_log_buf[RT_CONSOLEBUF_SIZE];
rt_kprintf in kservice.c (rt-thread\src) :      * would be larger than the rt_log_buf, we have to adjust the output
rt_kprintf in kservice.c (rt-thread\src) :     length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
rt_kprintf in kservice.c (rt-thread\src) :         rt_hw_console_output(rt_log_buf);
rt_kprintf in kservice.c (rt-thread\src) :         rt_device_write(_console_device, 0, rt_log_buf, length);
rt_kprintf in kservice.c (rt-thread\src) :     rt_hw_console_output(rt_log_buf);
lcp_init in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_INFO, ("lcp_init: xmit_accm=%X %X %X %X\n",
lcp_lowerup in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_INFO, ("lcp_lowerup: asyncmap=%X %X %X %X\n",
lcp_extcode in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       LCPDEBUG(LOG_INFO, ("lcp: Echo-Request, Rcvd id %d\n", id));
lcp_rprotrej in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_rprotrej: Rcvd short Protocol-Reject packet!\n"));
lcp_rprotrej in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_INFO, ("lcp_rprotrej: Rcvd Protocol-Reject packet for %x!\n", prot));
lcp_rprotrej in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("Protocol-Reject discarded: LCP in state %d\n", f->state));
lcp_rprotrej in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_WARNING, ("Protocol-Reject for unsupported protocol 0x%x\n", prot));
lcp_protrej in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_WARNING, ("lcp_protrej: Received Protocol-Reject for LCP!\n"));
ADDCIVOID in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_addci: opt=%d\n", opt)); \
ADDCISHORT in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_addci: INT opt=%d %X\n", opt, val)); \
ADDCICHAP in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_addci: CHAP opt=%d %X\n", opt, val)); \
ADDCILONG in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_addci: L opt=%d %lX\n", opt, val)); \
ADDCILQR in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_addci: LQR opt=%d %lX\n", opt, val)); \
ADDCICHAR in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_addci: CHAR opt=%d %X '%z'\n", opt, val, val)); \
lcp_addci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_ERR, ("Bug in lcp_addci: wrong length\n"));
lcp_ackci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_INFO, ("lcp_acki: Ack\n"));
lcp_ackci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_WARNING, ("lcp_acki: received bad Ack!\n"));
lcp_nakci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         LCPDEBUG(LOG_NOTICE, ("Serial line is looped back.\n"));
lcp_nakci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_WARNING, ("lcp_nakci: received bad Nak!\n"));
REJCIVOID in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_rejci: void opt %d rejected\n", opt)); \
REJCISHORT in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_rejci: short opt %d rejected\n", opt)); \
REJCICHAP in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_rejci: chap opt %d rejected\n", opt)); \
REJCILONG in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_rejci: long opt %d rejected\n", opt)); \
REJCILQR in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_rejci: LQR opt %d rejected\n", opt)); \
REJCICBCP in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_rejci: Callback opt %d rejected\n", opt)); \
lcp_rejci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_WARNING, ("lcp_rejci: received bad Reject!\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       LCPDEBUG(LOG_WARNING, ("lcp_reqci: bad CI length!\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_INFO, ("lcp_reqci: Reject MRU - not allowed\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_INFO, ("lcp_reqci: Reject MRU - bad length\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_INFO, ("lcp_reqci: Nak - MRU too small\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_INFO, ("lcp_reqci: Reject ASYNCMAP not allowed\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_INFO, ("lcp_reqci: Reject ASYNCMAP bad length\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_INFO, ("lcp_reqci: Nak ASYNCMAP %lX missing %lX\n", 
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_INFO, ("lcp_reqci: Reject AUTHTYPE missing arg\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_INFO, ("lcp_reqci: Reject AUTHTYPE not allowed\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             LCPDEBUG(LOG_WARNING, ("lcp_reqci: Reject AUTHTYPE PAP already accepted\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             LCPDEBUG(LOG_WARNING, ("lcp_reqci: Reject AUTHTYPE PAP bad len\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             LCPDEBUG(LOG_WARNING, ("lcp_reqci: Nak AUTHTYPE PAP not allowed\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             LCPDEBUG(LOG_WARNING, ("lcp_reqci: Reject AUTHTYPE CHAP accepted PAP\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             LCPDEBUG(LOG_WARNING, ("lcp_reqci: Reject AUTHTYPE CHAP bad len\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             LCPDEBUG(LOG_WARNING, ("lcp_reqci: Nak AUTHTYPE CHAP not allowed\n"));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             LCPDEBUG(LOG_WARNING, ("lcp_reqci: Nak AUTHTYPE CHAP digest=%d\n", (int)cichar));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_WARNING, ("lcp_reqci: Nak AUTHTYPE %d req CHAP\n", cishort));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           LCPDEBUG(LOG_WARNING, ("lcp_reqci: Nak AUTHTYPE %d req PAP\n", cishort));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       LCPDEBUG(LOG_INFO, ("lcp_reqci: rcvd%s\n", traceBuf));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("lcp_reqci: %s\n", traceBuf));
lcp_reqci in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   LCPDEBUG(LOG_INFO, ("lcp_reqci: returning CONF%s.\n", CODENAME(rc)));
LcpLinkFailure in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_INFO, ("No response to %d echo-requests\n", lcp_echos_pending));
LcpLinkFailure in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_NOTICE, ("Serial link appears to be disconnected.\n"));
lcp_received_echo_reply in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_WARNING, ("lcp: received short Echo-Reply, length %d\n", len));
lcp_received_echo_reply in lcp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     LCPDEBUG(LOG_WARNING, ("appear to have received our own echo-reply!\n"));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("ppp: auth protocols:"));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, (" PAP=%d", ao->neg_upap));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, (" CHAP=%d CHAP_MD5=%d", ao->neg_chap, !!(ao->chap_mdtype&MDTYPE_MD5)));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, (" CHAP_MS=%d CHAP_MS2=%d", !!(ao->chap_mdtype&MDTYPE_MICROSOFT), !!(ao->chap_mdtype&MDTYPE_MICROSOFT_V2)));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, (" EAP=%d", ao->neg_eap));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("\n"));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("ppp: auth protocols:"));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, (" PAP=%d", ao->neg_upap));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, (" CHAP=%d CHAP_MD5=%d", ao->neg_chap, !!(ao->chap_mdtype&MDTYPE_MD5)));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, (" CHAP_MS=%d CHAP_MS2=%d", !!(ao->chap_mdtype&MDTYPE_MICROSOFT), !!(ao->chap_mdtype&MDTYPE_MICROSOFT_V2)));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, (" EAP=%d", ao->neg_eap));
lcp_resetci in lcp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("\n"));
main in linkkit_example_gateway.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\examples) :     IOT_SetLogLevel(IOT_LOG_DEBUG);
main in linkkit_example_gateway.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\examples) :     IOT_DumpMemoryStats(IOT_LOG_DEBUG);
main in linkkit_example_gateway.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\examples) :     IOT_SetLogLevel(IOT_LOG_NONE);
main in linkkit_example_solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\examples) :     IOT_SetLogLevel(IOT_LOG_DEBUG);
main in linkkit_example_solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\examples) :     IOT_DumpMemoryStats(IOT_LOG_DEBUG);
main in linkkit_example_solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\examples) :     IOT_SetLogLevel(IOT_LOG_NONE);
linkkit_export.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) line 107 :  * @param log_level, config log level.
linkkit_start in linkkit_export.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) :         linkkit_loglevel_t log_level,
linkkit_gateway_export.h (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\deprecated) line 35 :  * LINKKIT_OPT_LOG_LEVEL          |  3      |  0      | 5
magic_churnrand in magic.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   /* LWIP_DEBUGF(LOG_INFO, ("magic_churnrand: %u@%P\n", rand_len, rand_data)); */
magic_churnrand in magic.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : /*  LWIP_DEBUGF(LOG_INFO, ("magic_churnrand: -> 0\n")); */
magic_churnrand in magic.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   /* LWIP_DEBUGF(LOG_INFO, ("magic_churnrand: %u@%P\n", rand_len, rand_data)); */
magic_churnrand in magic.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : /*  LWIP_DEBUGF(LOG_INFO, ("magic_churnrand: -> 0\n")); */
main.c (applications) line 27 : #define LOG_TAG                        	"app.main"
fs_init in main.c (applications) :         LOG_D("Can't create a block device on '%s' partition.", FS_PARTITION_NAME);
fs_init in main.c (applications) :         LOG_D("Create a block device on the %s partition of flash successful.", FS_PARTITION_NAME);
fs_init in main.c (applications) :         LOG_D("Filesystem initialized!");
fs_init in main.c (applications) : 	        LOG_D("Filesystem initialized!");
MD5Update in md5.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("MD5Update: %u:%.*H\n", inLen, LWIP_MIN(inLen, 20) * 2, inBuf));
MD5Update in md5.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("MD5Update: %u:%s\n", inLen, inBuf));
mbedtls_md5_init in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("md5 init ctx[%08x]", *ctx);
mbedtls_md5_init in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("md5 init. but ctx is null");
mbedtls_md5_free in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("md5 free ctx[%08x]", *ctx);
mbedtls_md5_free in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("md5 free. but ctx is null");
mbedtls_md5_clone in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("md5 clone des[%08x] src[%08x]", *dst, *src);
mbedtls_md5_clone in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("md5 clone. but dst or src is null");
mbedtls_md5_starts_ret in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("md5 starts ctx[%08x]", *ctx);
mbedtls_md5_starts_ret in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("md5 starts. but ctx is null");
mbedtls_md5_update_ret in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("md5 update ctx[%08x] len:%d in:%08x", *ctx, ilen, input);
mbedtls_md5_update_ret in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("md5 update. but ctx is null");
mbedtls_md5_finish_ret in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("md5 finish ctx[%08x] out:%08x", *ctx, output);
mbedtls_md5_finish_ret in md5_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("md5 finish. but ctx is null");
mmcsd_parse_csd in mmc.c (rt-thread\components\drivers\sdio) :         LOG_E("unrecognised CSD structure version %d!", csd->csd_structure);
mmc_get_ext_csd in mmc.c (rt-thread\components\drivers\sdio) :     LOG_E("alloc memory failed when get ext csd!");
mmc_parse_ext_csd in mmc.c (rt-thread\components\drivers\sdio) :     LOG_E("emmc parse ext csd fail, invaild args");
mmc_parse_ext_csd in mmc.c (rt-thread\components\drivers\sdio) :   LOG_I("emmc card capacity %d KB.", card->card_capacity);
mmc_select_bus_width in mmc.c (rt-thread\components\drivers\sdio) :             LOG_E("switch to bus width 1 bit failed!");
mmc_select_bus_width in mmc.c (rt-thread\components\drivers\sdio) :             LOG_E("switch to bus width 4 bit failed!");
mmc_select_bus_width in mmc.c (rt-thread\components\drivers\sdio) :             LOG_E("switch to bus width 8 bit failed!");
mmcsd_mmc_init_card in mmc.c (rt-thread\components\drivers\sdio) :         LOG_E("malloc card failed!");
init_mmc in mmc.c (rt-thread\components\drivers\sdio) :     LOG_E("init MMC card failed!");
mmcsd_get_cid in mmcsd_core.c (rt-thread\components\drivers\sdio) :         LOG_E("allocate memory failed!");
mmcsd_get_csd in mmcsd_core.c (rt-thread\components\drivers\sdio) :         LOG_E("allocate memory failed!");
mmcsd_set_clock in mmcsd_core.c (rt-thread\components\drivers\sdio) :         LOG_W("clock too low!");
mmcsd_select_voltage in mmcsd_core.c (rt-thread\components\drivers\sdio) :         LOG_W("host doesn't support card's voltages!");
mmcsd_detect in mmcsd_core.c (rt-thread\components\drivers\sdio) :             		LOG_W("unsupport sdio card plug out!");
mmcsd_alloc_host in mmcsd_core.c (rt-thread\components\drivers\sdio) :         LOG_E("alloc host failed");
mppe_init in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG, ("%s[%d]: unknown key length\n", debugstr,
mppe_init in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG, ("%s[%d]: initialized with %d-bit %s mode\n",
mppe_init in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG,
mppe_compress in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	PPPDEBUG(LOG_DEBUG, ("mppe_compress[%d]: ccount %d\n", pcb->netif->num, state->ccount));
mppe_compress in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 			PPPDEBUG(LOG_DEBUG, ("mppe_compress[%d]: rekeying\n", pcb->netif->num));
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG,
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	PPPDEBUG(LOG_DEBUG, ("mppe_decompress[%d]: ccount %d\n",
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG,
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG, ("mppe_decompress[%d]: FLUSHED bit not set in "
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG, ("mppe_decompress[%d]: FLUSHED bit not set on "
mppe_init in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG, ("%s[%d]: unknown key length\n", debugstr,
mppe_init in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG, ("%s[%d]: initialized with %d-bit %s mode\n",
mppe_init in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG,
mppe_compress in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 	PPPDEBUG(LOG_DEBUG, ("mppe_compress[%d]: ccount %d\n", pcb->netif->num, state->ccount));
mppe_compress in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 			PPPDEBUG(LOG_DEBUG, ("mppe_compress[%d]: rekeying\n", pcb->netif->num));
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG,
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 	PPPDEBUG(LOG_DEBUG, ("mppe_decompress[%d]: ccount %d\n",
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG,
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG, ("mppe_decompress[%d]: FLUSHED bit not set in "
mppe_decompress in mppe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 		PPPDEBUG(LOG_DEBUG, ("mppe_decompress[%d]: FLUSHED bit not set on "
mqtt-device.c (applications) line 39 : #define LOG_TAG              "ali-sdk"    
mqtt-device.c (applications) line 40 : #define LOG_LVL              LOG_LVL_INFO
mqtt_check_load_topic in mqtt-device.c (applications) : 		LOG_D("Get ProductKey failed.");
mqtt_check_load_topic in mqtt-device.c (applications) : 		LOG_D("Get DeviceName failed.");
mqtt_check_load_topic in mqtt-device.c (applications) : 		LOG_D("not enough memory for topic name!");
mqtt_check_load_topic in mqtt-device.c (applications) : 			LOG_D("can not find the topic: %s", mqtt_sub_item[topic_idx].topic_filter);
ali_mqtt_event_handle in mqtt-device.c (applications) :         LOG_D("Topic info is null! Exit.");
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("undefined event occur.");
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_I("MQTT disconnect.");
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_I("MQTT reconnect.");
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("subscribe success, packet-id=%u", (unsigned int)packet_id);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("subscribe wait ack timeout, packet-id=%u", (unsigned int)packet_id);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("subscribe nack, packet-id=%u", (unsigned int)packet_id);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("unsubscribe success, packet-id=%u", (unsigned int)packet_id);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("unsubscribe timeout, packet-id=%u", (unsigned int)packet_id);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("unsubscribe nack, packet-id=%u", (unsigned int)packet_id);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("publish success, packet-id=%u", (unsigned int)packet_id);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("publish timeout, packet-id=%u", (unsigned int)packet_id);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("publish nack, packet-id=%u", (unsigned int)packet_id);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("topic message arrived but without any related handle: topic=%.*s, topic_msg=%.*s",
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("buffer overflow, %s", msg->msg);
ali_mqtt_event_handle in mqtt-device.c (applications) :             LOG_D("Should NOT arrive here.");
mqtt_service_reply_pub in mqtt-device.c (applications) : 	LOG_I("Service reply: %.*s", strlen(msg_pub), msg_pub);
mqtt_service_reply_pub in mqtt-device.c (applications) : 		LOG_D("can not read env variable of topic");
ali_mqtt_door_ctrl_msg_arrive in mqtt-device.c (applications) :     LOG_D("subcrible message arrive: %.*s.", ptopic_info->topic_len, ptopic_info->ptopic);
ali_mqtt_door_ctrl_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON parse failed."); 
ali_mqtt_door_ctrl_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON get object[id] failed.");
ali_mqtt_door_ctrl_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON get object[params] failed.");
ali_mqtt_door_ctrl_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON get object[door_idx] failed.");
ali_mqtt_door_ctrl_msg_arrive in mqtt-device.c (applications) : 	LOG_D("id=%.*s;door_idx=%.*s", rt_strlen(id->valuestring), id->valuestring, rt_strlen(door_idx->valuestring), door_idx->valuestring);
ali_mqtt_door_ctrl_msg_arrive in mqtt-device.c (applications) : 		LOG_D("send queue message failed");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) :     LOG_D("subcrible message arrive: %.*s.", ptopic_info->topic_len, ptopic_info->ptopic);
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON parse failed.");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON get object[id] failed.");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON get object[params] failed.");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON get object[ctrl_cmd] failed.");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON get object[ctrl_para] failed.");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) : 			LOG_I("remote command: reboot");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) : 		LOG_I("remote command: beep");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) : 		LOG_D("remote command: set sub device max open time");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) : 		LOG_D("remote command: set sub device max power time");
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) : 		LOG_D("No such remote command defined: %.*s.", rt_strlen(ctrl_cmd->valuestring), ctrl_cmd->valuestring);
ali_mqtt_device_ctrl_msg_arrive in mqtt-device.c (applications) : 		LOG_D("send queue message failed");
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) :     LOG_D("subcrible message arrive: %.*s.", ptopic_info->topic_len, ptopic_info->ptopic);
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON parse failed.");
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON get object[id] failed.");
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) :         LOG_D("cJSON get object[params] failed.");
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) :         	LOG_D("write device_info success: %.*s", rt_strlen(device_info_cj->valuestring), device_info_cj->valuestring);
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) : 			LOG_D("write device_info failed: %.*s", rt_strlen(device_info_cj->valuestring), device_info_cj->valuestring);
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) :         	LOG_D("write device_num success: %d", device_num_cj->valueint);
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) : 			LOG_D("write device_num failed: %d", device_num_cj->valueint);
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) :         	LOG_D("write device_chn_num success: %d", device_chn_num_cj->valueint);
ali_mqtt_property_set_msg_arrive in mqtt-device.c (applications) : 			LOG_D("write device_chn_num failed: %d", device_chn_num_cj->valueint);
ali_mqtt_alarm_msg_arrive in mqtt-device.c (applications) : 			LOG_I("Topic info is null! Exit.");
ali_mqtt_alarm_msg_arrive in mqtt-device.c (applications) : 		LOG_I("-------------------");
ali_mqtt_alarm_msg_arrive in mqtt-device.c (applications) : 		LOG_I("feedback topic: %.*s.", rt_strlen(topic_info->ptopic), topic_info->ptopic);
ali_mqtt_alarm_msg_arrive in mqtt-device.c (applications) : 		LOG_I("feedback payload: %.*s.", topic_info->payload_len, topic_info->payload);
ali_mqtt_alarm_msg_arrive in mqtt-device.c (applications) : 		LOG_I("-------------------");
ali_mqtt_device_error_msg_arrive in mqtt-device.c (applications) : 			LOG_I("Topic info is null! Exit.");
ali_mqtt_device_error_msg_arrive in mqtt-device.c (applications) : 		LOG_I("-------------------");
ali_mqtt_device_error_msg_arrive in mqtt-device.c (applications) : 		LOG_I("feedback topic: %.*s.", rt_strlen(topic_info->ptopic), topic_info->ptopic);
ali_mqtt_device_error_msg_arrive in mqtt-device.c (applications) : 		LOG_I("feedback payload: %.*s.", topic_info->payload_len, topic_info->payload);
ali_mqtt_device_error_msg_arrive in mqtt-device.c (applications) : 		LOG_I("-------------------");
ali_mqtt_property_post_msg_arrive in mqtt-device.c (applications) : 			LOG_I("Topic info is null! Exit.");
ali_mqtt_property_post_msg_arrive in mqtt-device.c (applications) : 		LOG_I("-------------------");
ali_mqtt_property_post_msg_arrive in mqtt-device.c (applications) : 		LOG_I("feedback topic: %.*s.", rt_strlen(topic_info->ptopic), topic_info->ptopic);
ali_mqtt_property_post_msg_arrive in mqtt-device.c (applications) : 		LOG_I("feedback payload: %.*s.", topic_info->payload_len, topic_info->payload);
ali_mqtt_property_post_msg_arrive in mqtt-device.c (applications) : 		LOG_I("-------------------");
ali_mqtt_device_info_update_msg_arrive in mqtt-device.c (applications) : 			LOG_I("Topic info is null! Exit.");
ali_mqtt_device_info_update_msg_arrive in mqtt-device.c (applications) : 		LOG_I("-------------------");
ali_mqtt_device_info_update_msg_arrive in mqtt-device.c (applications) : 		LOG_I("feedback topic: %.*s.", rt_strlen(topic_info->ptopic), topic_info->ptopic);
ali_mqtt_device_info_update_msg_arrive in mqtt-device.c (applications) : 		LOG_I("feedback payload: %.*s.", topic_info->payload_len, topic_info->payload);
ali_mqtt_device_info_update_msg_arrive in mqtt-device.c (applications) : 		LOG_I("-------------------");
mqtt_thread_main_thread in mqtt-device.c (applications) : 		LOG_D("Load MQTT Topic failed!");
mqtt_thread_main_thread in mqtt-device.c (applications) : 	        LOG_D("construct MQTT failed!");
mqtt_thread_main_thread in mqtt-device.c (applications) :                 LOG_D("IOT_MQTT_Subscribe() failed, topic = %s", &topic_buff[i * 128]);
mqtt-ota.c (applications) line 34 : #define LOG_TAG              "ali-ota"    
mqtt-ota.c (applications) line 35 : #define LOG_LVL              LOG_LVL_DBG
mqtt_ota_init in mqtt-ota.c (applications) : 		LOG_D("get product key failed");
mqtt_ota_init in mqtt-ota.c (applications) : 		LOG_D("get device name failed");
mqtt_ota_init in mqtt-ota.c (applications) :         LOG_D("initialize OTA failed");
mqtt_ota_init in mqtt-ota.c (applications) : 		LOG_D("get device firmware version failed");
mqtt_ota_init in mqtt-ota.c (applications) :         LOG_D("report OTA version failed");
mqtt_ota in mqtt-ota.c (applications) : 			LOG_I("can not find %s partition", MQTT_OTA_DOWNLOAD_PARTITION_NAME);
mqtt_ota in mqtt-ota.c (applications) : 			LOG_I("can not erase %s partition", dl_partition->name);
mqtt_ota in mqtt-ota.c (applications) : 					LOG_I("Write OTA data to file failed");
mqtt_ota in mqtt-ota.c (applications) : 					LOG_I("receive %d bytes, total recieve: %d bytes", content_pos, size_of_file);
mqtt_ota in mqtt-ota.c (applications) : 				LOG_I("ota fetch failed.");				
mqtt_ota in mqtt-ota.c (applications) :             LOG_D("The firmware is valid!  Download firmware successfully.");
mqtt_ota in mqtt-ota.c (applications) :             LOG_D("OTA FW version: %s", fm_ver);
mqtt_ota in mqtt-ota.c (applications) : 			LOG_D("OTA FW MD5 Sum: %s", md5sum);
mqtt_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt) line 29 :     #define mqtt_emerg(...)             log_emerg("MQTT", __VA_ARGS__)
mqtt_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt) line 30 :     #define mqtt_crit(...)              log_crit("MQTT", __VA_ARGS__)
mqtt_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt) line 31 :     #define mqtt_err(...)               log_err("MQTT", __VA_ARGS__)
mqtt_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt) line 32 :     #define mqtt_warning(...)           log_warning("MQTT", __VA_ARGS__)
mqtt_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt) line 33 :     #define mqtt_info(...)              log_info("MQTT", __VA_ARGS__)
mqtt_api.c (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt) line 34 :     #define mqtt_debug(...)             log_debug("MQTT", __VA_ARGS__)
mqtt_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) line 30 :     #define mqtt_emerg(...)             log_emerg("MQTT", __VA_ARGS__)
mqtt_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) line 31 :     #define mqtt_crit(...)              log_crit("MQTT", __VA_ARGS__)
mqtt_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) line 32 :     #define mqtt_err(...)               log_err("MQTT", __VA_ARGS__)
mqtt_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) line 33 :     #define mqtt_warning(...)           log_warning("MQTT", __VA_ARGS__)
mqtt_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) line 34 :     #define mqtt_info(...)              log_info("MQTT", __VA_ARGS__)
mqtt_internal.h (packages\ali-iotkit-latest\iotkit-embedded\src\mqtt\impl) line 35 :     #define mqtt_debug(...)             log_debug("MQTT", __VA_ARGS__)
netdev_set_default in netdev.c (rt-thread\components\net\netdev\src) :         LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);       
netdev_set_up in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) not support to set status.", netdev->name);
netdev_set_down in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) not support to set status.", netdev->name);
netdev_dhcp_enabled in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
netdev_set_ipaddr in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
netdev_set_ipaddr in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
netdev_set_netmask in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
netdev_set_netmask in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
netdev_set_gw in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
netdev_set_gw in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
netdev_set_dns_server in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
netdev_set_dns_server in netdev.c (rt-thread\components\net\netdev\src) :         LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
sendto_ntp_server in ntp.c (packages\netutils-latest\ntp) :         LOG_D("No such host(%s)", host_name);
ntp_get_time in ntp.c (packages\netutils-latest\ntp) :         LOG_E("Create socket failed");
ntp_get_time in ntp.c (packages\netutils-latest\ntp) :                 LOG_D("Reading from server %s error (%d).", inet_ntoa(serv_addr[i].sin_addr.s_addr), n);
ntp_get_time in ntp.c (packages\netutils-latest\ntp) :         LOG_E("Receive the socket from server timeout (%dS).", NTP_GET_TIMEOUT);
otacoap_response_handler in ota_coap.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :     OTA_LOG_DEBUG("CoAP response code = %d", resp_code);
otacoap_response_handler in ota_coap.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :     OTA_LOG_DEBUG("[CoAP msg_len=%d, msg=%s\r\n", len, p_payload);
otacoap_GenTopicName in ota_coap.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("snprintf failed");
otacoap_Publish in ota_coap.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("generate topic name failed");
otacoap_Publish in ota_coap.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("send CoAP msg failed%d", ret);
osc_Init in ota_coap.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("allocate for h_osc failed");
main in ota_example_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota\examples) :     IOT_SetLogLevel(IOT_LOG_DEBUG);
main in ota_example_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota\examples) :     IOT_DumpMemoryStats(IOT_LOG_DEBUG);
ofc_Init in ota_fetch.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("allocate for h_odc failed");
ofc_Fetch in ota_fetch.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("fetch firmware failed");
otalib_GetFirmwareFixlenPara in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("Not '%s' key in json doc of OTA", key);
otalib_GetFirmwareFixlenPara in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("value length of the key is too long");
otalib_GetFirmwareVarlenPara in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("Not %s key in json doc of OTA", key);
otalib_GetFirmwareVarlenPara in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("allocate for dest failed");
otalib_GetParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of version key failed");
otalib_GetParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of url key failed");
otalib_GetParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of md5 key failed");
otalib_GetParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of size key failed");
otalib_GetConfigParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of configId key failed");
otalib_GetConfigParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of size key failed");
otalib_GetConfigParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of sign key failed");
otalib_GetConfigParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of signMethod key failed");
otalib_GetConfigParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of url key failed");
otalib_GetConfigParams in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("get value of getType key failed");
otalib_GenInfoMsg in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("HAL_Snprintf failed");
otalib_GenReportMsg in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("HAL_Snprintf failed");
otalib_GenReportMsg in ota_lib.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("msg is too long");
otamqtt_GenTopicName in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("HAL_Snprintf failed");
otamqtt_Publish in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("generate topic name of info failed");
otamqtt_Publish in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("publish failed");
otamqtt_publish_full_topic in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("publish failed");
otamqtt_UpgrageCb in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :     OTA_LOG_DEBUG("topic=%.*s", topic_info->topic_len, topic_info->ptopic);
otamqtt_UpgrageCb in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :     OTA_LOG_DEBUG("len=%u, topic_msg=%.*s", topic_info->payload_len, topic_info->payload_len, (char *)topic_info->payload);
otamqtt_UpgrageCb in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_DEBUG("receive device request");
otamqtt_UpgrageCb in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :             OTA_LOG_INFO("get request reply for new version image");
otamqtt_UpgrageCb in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_DEBUG("receive device upgrade");
otamqtt_UpgrageCb in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_DEBUG("receive config get_reply");
otamqtt_UpgrageCb in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_DEBUG("receive config push");
otamqtt_UpgrageCb in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :                     OTA_LOG_ERROR("publish failed");
osc_Init in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("allocate for h_osc failed");
osc_Init in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("generate topic name of request failed");
osc_Init in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("mqtt subscribe failed");
osc_Init in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("generate topic name of upgrade failed");
osc_Init in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("mqtt subscribe failed");
osc_Init in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("generate topic name of config get failed");
osc_Init in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("mqtt subscribe failed");
osc_Init in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("generate topic name of config get failed");
osc_Init in ota_mqtt.c (packages\ali-iotkit-latest\iotkit-embedded\src\ota) :         OTA_LOG_ERROR("mqtt subscribe failed");
upap_init in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("upap_init: %d\n", unit));
upap_authwithpeer in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("upap_authwithpeer: %d user=%s password=%s s=%d\n",
upap_timeout in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("upap_timeout: %d timeout %d expired s=%d\n", 
upap_timeout in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("upap_timeout: not in AUTHREQ state!\n"));
upap_timeout in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_ERR, ("No response to PAP authenticate-requests\n"));
upap_lowerup in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("upap_lowerup: init %d clientstate s=%d\n", unit, u->us_clientstate));
upap_lowerdown in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("upap_lowerdown: %d s=%d\n", unit, u->us_clientstate));
upap_protrej in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_ERR, ("PAP authentication failed due to protocol-reject\n"));
upap_protrej in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_ERR, ("PAP authentication of peer failed (protocol-reject)\n"));
upap_input in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("pap_input: rcvd short header.\n"));
upap_input in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("pap_input: rcvd illegal length.\n"));
upap_input in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("pap_input: rcvd short packet.\n"));
upap_input in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       UPAPDEBUG(LOG_INFO, ("pap_input: UNHANDLED default: code: %d, id: %d, len: %d.\n", code, id, len));
upap_rauthreq in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("pap_rauth: Rcvd id %d.\n", id));
upap_rauthreq in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("pap_rauth: rcvd short packet.\n"));
upap_rauthreq in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("pap_rauth: rcvd short packet.\n"));
upap_rauthreq in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("pap_rauth: rcvd short packet.\n"));
upap_rauthack in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("pap_rauthack: Rcvd id %d s=%d\n", id, u->us_clientstate));
upap_rauthack in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("pap_rauthack: us_clientstate != UPAPCS_AUTHREQ\n"));
upap_rauthack in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("pap_rauthack: ignoring missing msg-length.\n"));
upap_rauthack in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         UPAPDEBUG(LOG_INFO, ("pap_rauthack: rcvd short packet.\n"));
upap_rauthnak in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("pap_rauthnak: Rcvd id %d s=%d\n", id, u->us_clientstate));
upap_rauthnak in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     UPAPDEBUG(LOG_INFO, ("pap_rauthnak: ignoring missing msg-length.\n"));
upap_rauthnak in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         UPAPDEBUG(LOG_INFO, ("pap_rauthnak: rcvd short packet.\n"));
upap_rauthnak in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_ERR, ("PAP authentication failed\n"));
upap_sauthreq in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("pap_sauth: Sent id %d\n", u->us_id));
upap_sresp in pap.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   UPAPDEBUG(LOG_INFO, ("pap_sresp: Sent code %d, id %d s=%d\n", code, id, u->us_clientstate));
pppRecvWakeup in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppRecvWakeup: unit %d\n", pd));
pppLinkTerminated in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppLinkTerminated: unit %d\n", pd));
pppLinkTerminated in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppLinkTerminated: unit %d: linkStatusCB=%p errCode=%d\n", pd, pc->linkStatusCB, pc->errCode));
pppLinkTerminated in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppLinkTerminated: finished.\n"));
pppLinkDown in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppLinkDown: unit %d\n", pd));
pppStart in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppStart: unit %d\n", pd));
pppStart in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppStart: finished\n"));
pppStop in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppStop: unit %d\n", pd));
pppHup in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppHupCB: unit %d\n", pd));
pppOverSerialOpen in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppOverSerialOpen: unit %d: Connecting\n", pd));
pppClose in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppClose() called\n"));
pppClose in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppClose: unit %d kill_link -> pppStop\n", pd));
pppClose in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppClose: unit %d kill_link -> pppStop\n", pd));
pppSigHUP in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppSigHUP: unit %d sig_hup -> pppHupCB\n", pd));
nPut in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_WARNING,
pppifOutput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppifOutput[%d]: bad parms prot=%d pb=%p\n",
pppifOutput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppifOutput[%d]: link not up\n", pd));
pppifOutput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppifOutput[%d]: first alloc fail\n", pd));
pppifOutput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_WARNING, ("pppifOutput[%d]: bad IP packet\n", pd));
pppifOutput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING,
pppifOutput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppifOutput[%d]: proto=0x%"X16_F"\n", pd, protocol));
pppWrite in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING,
pppWrite in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppWrite[%d]: len=%d\n", pd, headMB->len));
ppp_send_config in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]: outACCM=%X %X %X %X\n",
ppp_set_xaccm in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("ppp_set_xaccm[%d]: outACCM=%X %X %X %X\n",
ppp_recv_config in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]: inACCM=%X %X %X %X\n",
sifvjcomp in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("sifvjcomp: VJ compress enable=%d slot=%d max slot=%d\n",
sifup in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("sifup[%d]: bad parms\n", pd));
sifup in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("sifup: unit %d: linkStatusCB=%p errCode=%d\n", pd, pc->linkStatusCB, pc->errCode));
sifup in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_ERR, ("sifup[%d]: netif_add failed\n", pd));
sifdown in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("sifdown[%d]: bad parms\n", pd));
sifdown in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("sifdown: unit %d: linkStatusCB=%p errCode=%d\n", pd, pc->linkStatusCB, pc->errCode));
sifaddr in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("sifup[%d]: bad parms\n", pd));
cifaddr in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("sifup[%d]: bad parms\n", pd));
sifdefaultroute in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("sifup[%d]: bad parms\n", pd));
cifdefaultroute in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("sifup[%d]: bad parms\n", pd));
pppOverEthernetLinkStatusCB in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppOverEthernetLinkStatusCB: unit %d: Connecting\n", pd));
pppSingleBuf in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_ERR,
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("pppInput: discarding proto 0x%"X16_F" in phase %d\n", protocol, lcp_phase[pd]));
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("pppInput[%d]: vj_comp in pbuf len=%d\n", pd, nb->len));
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("pppInput[%d]: Dropping VJ compressed\n", pd));
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("pppInput[%d]: drop VJ Comp in %d:%s\n", pd, nb->len, nb->payload));
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("pppInput[%d]: vj_un in pbuf len=%d\n", pd, nb->len));
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("pppInput[%d]: Dropping VJ uncompressed\n", pd));
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_INFO,
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("pppInput[%d]: ip in pbuf len=%d\n", pd, nb->len));
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           PPPDEBUG(LOG_INFO, ("pppInput[%d]: %s len=%d\n", pd, protp->name, nb->len));
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           PPPDEBUG(LOG_DETAIL, ("pppInput[%d]: packet processed\n", pd));
pppInput in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("pppInput[%d]: rejecting unsupported proto 0x%"X16_F" len=%d\n", pd, protocol, nb->len));
pppDrop in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppDrop: %d:%.*H\n", pcrx->inHead->len, min(60, pcrx->inHead->len * 2), pcrx->inHead->payload));
pppDrop in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppDrop: pbuf len=%d, addr %p\n", pcrx->inHead->len, (void*)pcrx->inHead));
pppInProc in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppInProc[%d]: got %d bytes\n", pcrx->pd, l));
pppInProc in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           PPPDEBUG(LOG_WARNING,
pppInProc in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           PPPDEBUG(LOG_INFO,
pppInProc in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             PPPDEBUG(LOG_ERR, ("pppInProc[%d]: tcpip_callback() failed, dropping packet\n", pcrx->pd));
pppInProc in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_WARNING,
pppInProc in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :             PPPDEBUG(LOG_WARNING,
pppInProc in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :               PPPDEBUG(LOG_ERR, ("pppInProc[%d]: NO FREE MBUFS!\n", pcrx->pd));
pppInProcOverEthernet in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppInProcOverEthernet: too small for protocol field\n"));
pppInProcOverEthernet in ppp.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppInProcOverEthernet: could not allocate room for header\n"));
ppp_connect in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));
ppp_listen in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_listen[%d]\n", pcb->netif->num));
ppp_close in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("ppp_close[%d]: carrier lost -> lcp_lowerdown\n", pcb->netif->num));
ppp_close in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_close[%d]: kill_link -> lcp_close\n", pcb->netif->num));
ppp_free in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_free[%d]\n", pcb->netif->num));
ppp_netif_output in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: link not up\n", pcb->netif->num));
ppp_netif_output in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: MPPE required, not up\n", pcb->netif->num));
ppp_netif_output in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_WARNING, ("ppp_netif_output[%d]: bad IP packet\n", pcb->netif->num));
ppp_netif_output in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
ppp_new in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
ppp_start in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]\n", pcb->netif->num));
ppp_start in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
ppp_link_failed in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_link_failed[%d]\n", pcb->netif->num));
ppp_link_end in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_input[%d]: MPPE required, received unencrypted data!\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_ERR, ("ppp_input[%d]: bad CCP receive method\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip6 in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("ppp_input[%d]: vj_comp in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping VJ compressed\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("ppp_input[%d]: vj_un in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping VJ uncompressed\n", pcb->netif->num));
ppp_singlebuf in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR,
ppp_link_terminated in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
ppp_link_terminated in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
new_phase in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp phase changed[%d]: phase=%d\n", pcb->netif->num, pcb->phase));
ppp_send_config in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num) );
ppp_recv_config in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));
sifvjcomp in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("sifvjcomp[%d]: VJ compress enable=%d slot=%d max slot=%d\n",
sifup in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
sifdown in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
sif6up in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("sif6up[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
sif6down in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("sif6down[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
netif_set_mtu in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
ccp_set in ppp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ccp_set[%d]: is_open=%d, is_up=%d, receive_method=%u, transmit_method=%u\n",
ppp_connect in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));
ppp_listen in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_listen[%d]\n", pcb->netif->num));
ppp_close in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("ppp_close[%d]: carrier lost -> lcp_lowerdown\n", pcb->netif->num));
ppp_close in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_close[%d]: kill_link -> lcp_close\n", pcb->netif->num));
ppp_free in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_free[%d]\n", pcb->netif->num));
ppp_netif_output in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: link not up\n", pcb->netif->num));
ppp_netif_output in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: MPPE required, not up\n", pcb->netif->num));
ppp_netif_output in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_WARNING, ("ppp_netif_output[%d]: bad IP packet\n", pcb->netif->num));
ppp_netif_output in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
ppp_new in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
ppp_start in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]\n", pcb->netif->num));
ppp_start in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
ppp_link_failed in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_link_failed[%d]\n", pcb->netif->num));
ppp_link_end in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ppp_input[%d]: MPPE required, received unencrypted data!\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_ERR, ("ppp_input[%d]: bad CCP receive method\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip6 in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("ppp_input[%d]: vj_comp in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping VJ compressed\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("ppp_input[%d]: vj_un in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping VJ uncompressed\n", pcb->netif->num));
ppp_input in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :           PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
ppp_link_terminated in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
ppp_link_terminated in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
new_phase in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ppp phase changed[%d]: phase=%d\n", pcb->netif->num, pcb->phase));
ppp_send_config in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num) );
ppp_recv_config in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));
sifvjcomp in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("sifvjcomp[%d]: VJ compress enable=%d slot=%d max slot=%d\n",
sifup in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
sifdown in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
sif6up in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("sif6up[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
sif6down in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("sif6down[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
netif_set_mtu in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
ccp_set in ppp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("ccp_set[%d]: is_open=%d, is_up=%d, receive_method=%u, transmit_method=%u\n",
pppdebug.h (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) line 40 : #define LOG_CRITICAL  (PPP_DEBUG | LWIP_DBG_LEVEL_SEVERE)
pppdebug.h (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) line 41 : #define LOG_ERR       (PPP_DEBUG | LWIP_DBG_LEVEL_SEVERE)
pppdebug.h (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) line 42 : #define LOG_NOTICE    (PPP_DEBUG | LWIP_DBG_LEVEL_WARNING)
pppdebug.h (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) line 43 : #define LOG_WARNING   (PPP_DEBUG | LWIP_DBG_LEVEL_WARNING)
pppdebug.h (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) line 44 : #define LOG_INFO      (PPP_DEBUG)
pppdebug.h (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) line 45 : #define LOG_DETAIL    (PPP_DEBUG)
pppdebug.h (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) line 46 : #define LOG_DEBUG     (PPP_DEBUG)
pppdebug.h (rt-thread\components\net\lwip-2.0.2\src\include\netif\ppp) line 44 : #define LOG_CRITICAL  (PPP_DEBUG | LWIP_DBG_LEVEL_SEVERE)
pppdebug.h (rt-thread\components\net\lwip-2.0.2\src\include\netif\ppp) line 45 : #define LOG_ERR       (PPP_DEBUG | LWIP_DBG_LEVEL_SEVERE)
pppdebug.h (rt-thread\components\net\lwip-2.0.2\src\include\netif\ppp) line 46 : #define LOG_NOTICE    (PPP_DEBUG | LWIP_DBG_LEVEL_WARNING)
pppdebug.h (rt-thread\components\net\lwip-2.0.2\src\include\netif\ppp) line 47 : #define LOG_WARNING   (PPP_DEBUG | LWIP_DBG_LEVEL_WARNING)
pppdebug.h (rt-thread\components\net\lwip-2.0.2\src\include\netif\ppp) line 48 : #define LOG_INFO      (PPP_DEBUG)
pppdebug.h (rt-thread\components\net\lwip-2.0.2\src\include\netif\ppp) line 49 : #define LOG_DETAIL    (PPP_DEBUG)
pppdebug.h (rt-thread\components\net\lwip-2.0.2\src\include\netif\ppp) line 50 : #define LOG_DEBUG     (PPP_DEBUG)
pppdebug.h (rt-thread\components\net\lwip-2.1.0\src\include\netif\ppp) line 48 : #define LOG_CRITICAL  (PPP_DEBUG | LWIP_DBG_LEVEL_SEVERE)
pppdebug.h (rt-thread\components\net\lwip-2.1.0\src\include\netif\ppp) line 49 : #define LOG_ERR       (PPP_DEBUG | LWIP_DBG_LEVEL_SEVERE)
pppdebug.h (rt-thread\components\net\lwip-2.1.0\src\include\netif\ppp) line 50 : #define LOG_NOTICE    (PPP_DEBUG | LWIP_DBG_LEVEL_WARNING)
pppdebug.h (rt-thread\components\net\lwip-2.1.0\src\include\netif\ppp) line 51 : #define LOG_WARNING   (PPP_DEBUG | LWIP_DBG_LEVEL_WARNING)
pppdebug.h (rt-thread\components\net\lwip-2.1.0\src\include\netif\ppp) line 52 : #define LOG_INFO      (PPP_DEBUG)
pppdebug.h (rt-thread\components\net\lwip-2.1.0\src\include\netif\ppp) line 53 : #define LOG_DETAIL    (PPP_DEBUG)
pppdebug.h (rt-thread\components\net\lwip-2.1.0\src\include\netif\ppp) line 54 : #define LOG_DEBUG     (PPP_DEBUG)
pppoe_find_softc_by_hunique in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: alien host unique tag, no session found\n"));
pppoe_find_softc_by_hunique in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": host unique tag found, but it belongs to a connection in state %d\n",
pppoe_find_softc_by_hunique in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": wrong interface, not accepting host unique\n",
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: packet too short: %d\n", pb->len));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: unknown version/type packet: 0x%x\n", ph->vertype));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: packet content does not fit: data available = %d, packet size = %u\n",
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppoe: tag 0x%x len 0x%x is too long\n", tag, len));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :             PPPDEBUG(LOG_DEBUG, ("pppoe: AC cookie is too long: len = %d, max = %d\n", len, PPPOE_MAX_AC_COOKIE_LEN));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": %s: %s\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err_msg, error_tmp));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %s: %s\n", err_msg, error_tmp));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         /* PPPDEBUG(LOG_DEBUG, ("pppoe: free passive interface is not found\n")); */
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: received PADR but not includes ac_cookie\n"));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppoe: received PADR but could not find request for it\n"));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": received unexpected PADR\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppoe: received PADO but could not find request for it\n"));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": received unexpected PADO\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADR, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": session 0x%x connected\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, session));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": unknown code (0x%"X16_F") session = 0x%"X16_F"\n",
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: unknown code (0x%"X16_F") session = 0x%"X16_F"\n", (u16_t)ph->code, session));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe_data_input: pbuf_header failed\n"));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe_data_input: could not get PPPoE header\n"));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe (data): unknown version/type packet: 0x%x\n", ph->vertype));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: input for unknown session 0x%x, sending PADT\n", session));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe_data_input: pbuf_header PPPOE_HEADERLEN failed\n"));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe_data_input: %c%c%"U16_F": pkthdr.len=%d, pppoe.len=%d\n",
pppoe_output in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe: %c%c%"U16_F": pppoe_output: could not allocate room for Ethernet header\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_output in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F" (%x) state=%d, session=0x%x output -> %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F", len=%d\n",
pppoe_timeout in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": timeout\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_timeout in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to transmit PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_timeout in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_timeout in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADR, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_connect in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_disconnect in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": disconnecting\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_abort_connect in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": could not establish connection\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_xmit in pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe: %c%c%"U16_F": pppoe_xmit: could not allocate room for PPPoE header\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) line 1167 :       PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": ethernet interface detached, going down\n",
pppoe.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) line 1186 :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": session 0x%x terminated, %s\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, sc->sc_session, message));
pppoe_find_softc_by_hunique in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: alien host unique tag, no session found\n"));
pppoe_find_softc_by_hunique in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": host unique tag found, but it belongs to a connection in state %d\n",
pppoe_find_softc_by_hunique in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": wrong interface, not accepting host unique\n",
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: packet too short: %d\n", pb->len));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: unknown version/type packet: 0x%x\n", ph->vertype));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: packet content does not fit: data available = %d, packet size = %u\n",
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppoe: tag 0x%x len 0x%x is too long\n", tag, len));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :             PPPDEBUG(LOG_DEBUG, ("pppoe: AC cookie is too long: len = %d, max = %d\n", len, PPPOE_MAX_AC_COOKIE_LEN));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": %s: %s\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err_msg, error_tmp));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %s: %s\n", err_msg, error_tmp));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         /* PPPDEBUG(LOG_DEBUG, ("pppoe: free passive interface is not found\n")); */
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: received PADR but not includes ac_cookie\n"));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppoe: received PADR but could not find request for it\n"));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": received unexpected PADR\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppoe: received PADO but could not find request for it\n"));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": received unexpected PADO\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADR, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": session 0x%x connected\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, session));
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": unknown code (0x%"X16_F") session = 0x%"X16_F"\n",
pppoe_disc_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: unknown code (0x%"X16_F") session = 0x%"X16_F"\n", (u16_t)ph->code, session));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe_data_input: pbuf_remove_header failed\n"));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe_data_input: could not get PPPoE header\n"));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe (data): unknown version/type packet: 0x%x\n", ph->vertype));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: input for unknown session 0x%x, sending PADT\n", session));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe_data_input: pbuf_remove_header PPPOE_HEADERLEN failed\n"));
pppoe_data_input in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe_data_input: %c%c%"U16_F": pkthdr.len=%d, pppoe.len=%d\n",
pppoe_output in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe: %c%c%"U16_F": pppoe_output: could not allocate room for Ethernet header\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_output in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F" (%x) state=%d, session=0x%x output -> %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F", len=%d\n",
pppoe_timeout in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": timeout\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_timeout in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to transmit PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_timeout in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_timeout in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADR, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_connect in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_disconnect in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": disconnecting\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_abort_connect in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": could not establish connection\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_send_padt in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe: pppoe_send_padt: could not allocate room for PPPoE header\n"));
pppoe_xmit in pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe: %c%c%"U16_F": pppoe_xmit: could not allocate room for PPPoE header\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) line 1177 :       PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": ethernet interface detached, going down\n",
pppoe.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) line 1196 :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": session 0x%x terminated, %s\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, sc->sc_session, message));
pppol2tp_connect in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCRQ, error=%d\n", err));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: mandatory header flags for control packet not set\n"));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: forbidden header flags for control packet found\n"));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: mandatory header flags for data packet not set\n"));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: strange packet received, offset=%d\n", offset));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: input packet, len=%"U16_F", tunnel=%"U16_F", session=%"U16_F", ns=%"U16_F", nr=%"U16_F"\n",
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :      PPPDEBUG(LOG_DEBUG, ("pppol2tp: tunnel ID mismatch, assigned=%d, received=%d\n", l2tp->remote_tunnel_id, tunnel_id));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :      PPPDEBUG(LOG_DEBUG, ("pppol2tp: session ID mismatch, assigned=%d, received=%d\n", l2tp->remote_session_id, session_id));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: packet too short: %d\n", p->len));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: message type must be the first AVP\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :                PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Assign tunnel ID length check failed\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :             PPPDEBUG(LOG_DEBUG, ("pppol2tp: Assigned tunnel ID %"U16_F"\n", l2tp->source_tunnel_id));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :                PPPDEBUG(LOG_DEBUG, ("pppol2tp: Challenge length check failed\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :               PPPDEBUG(LOG_DEBUG, ("pppol2tp: Received challenge from peer and no secret key available\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :                PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Challenge Response length check failed\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :               PPPDEBUG(LOG_DEBUG, ("pppol2tp: Received challenge response from peer and secret key do not match\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :                PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Assign session ID length check failed\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :             PPPDEBUG(LOG_DEBUG, ("pppol2tp: Assigned session ID %"U16_F"\n", l2tp->source_session_id));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCCN, error=%d\n", err));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICRQ, error=%d\n", err));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICCN, error=%d\n", err));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: packet too short: %d\n", p->len));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: timeout\n"));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: sccrq_retried=%d\n", l2tp->sccrq_retried));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCRQ, error=%d\n", err));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: icrq_retried=%d\n", l2tp->icrq_retried));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	  PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCCN, error=%d\n", err));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICRQ, error=%d\n", err));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: iccn_retried=%d\n", l2tp->iccn_retried));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICCN, error=%d\n", err));
pppol2tp_abort_connect in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: could not establish connection\n"));
pppol2tp_xmit in pppol2tp.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppol2tp: pppol2tp_pcb: could not allocate room for L2TP header\n"));
pppol2tp_connect in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCRQ, error=%d\n", err));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: mandatory header flags for control packet not set\n"));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: forbidden header flags for control packet found\n"));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: mandatory header flags for data packet not set\n"));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: strange packet received, offset=%d\n", offset));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: input packet, len=%"U16_F", tunnel=%"U16_F", session=%"U16_F", ns=%"U16_F", nr=%"U16_F"\n",
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :      PPPDEBUG(LOG_DEBUG, ("pppol2tp: tunnel ID mismatch, assigned=%d, received=%d\n", l2tp->remote_tunnel_id, tunnel_id));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :      PPPDEBUG(LOG_DEBUG, ("pppol2tp: session ID mismatch, assigned=%d, received=%d\n", l2tp->remote_session_id, session_id));
pppol2tp_input in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: packet too short: %d\n", p->len));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppol2tp: drop unexpected packet: received NS=%d, expected NS=%d\n", ns, l2tp->peer_ns));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: message type must be the first AVP\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :                PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Assign tunnel ID length check failed\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :             PPPDEBUG(LOG_DEBUG, ("pppol2tp: Assigned tunnel ID %"U16_F"\n", l2tp->source_tunnel_id));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :                PPPDEBUG(LOG_DEBUG, ("pppol2tp: Challenge length check failed\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :               PPPDEBUG(LOG_DEBUG, ("pppol2tp: Received challenge from peer and no secret key available\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :                PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Challenge Response length check failed\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :               PPPDEBUG(LOG_DEBUG, ("pppol2tp: Received challenge response from peer and secret key do not match\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :                PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Assign session ID length check failed\n"));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :             PPPDEBUG(LOG_DEBUG, ("pppol2tp: Assigned session ID %"U16_F"\n", l2tp->source_session_id));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCCN, error=%d\n", err));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICRQ, error=%d\n", err));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICCN, error=%d\n", err));
pppol2tp_dispatch_control_packet in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: packet too short: %d\n", p->len));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: timeout\n"));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: sccrq_retried=%d\n", l2tp->sccrq_retried));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCRQ, error=%d\n", err));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: icrq_retried=%d\n", l2tp->icrq_retried));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCCN, error=%d\n", err));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICRQ, error=%d\n", err));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppol2tp: iccn_retried=%d\n", l2tp->iccn_retried));
pppol2tp_timeout in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICCN, error=%d\n", err));
pppol2tp_abort_connect in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppol2tp: could not establish connection\n"));
pppol2tp_xmit in pppol2tp.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppol2tp: pppol2tp_pcb: could not allocate room for L2TP header\n"));
pppos_write in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
pppos_write in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
pppos_write in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
pppos_netif_output in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
pppos_netif_output in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
pppos_netif_output in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
pppos_connect in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
pppos_listen in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppos_listen: unit %d: listening\n", ppp->netif->num));
pppos_input in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
pppos_input in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :           PPPDEBUG(LOG_WARNING,
pppos_input in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :           PPPDEBUG(LOG_INFO,
pppos_input in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :             PPPDEBUG(LOG_ERR, ("pppos_input[%d]: tcpip_callback() failed, dropping packet\n", ppp->netif->num));
pppos_input in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :         PPPDEBUG(LOG_WARNING,
pppos_input in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :             PPPDEBUG(LOG_WARNING,
pppos_input in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :               PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
pppos_send_config in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
pppos_recv_config in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
pppos_input_drop in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
pppos_input_drop in pppos.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
pppos_write in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
pppos_write in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
pppos_write in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
pppos_netif_output in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
pppos_netif_output in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
pppos_netif_output in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
pppos_connect in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
pppos_listen in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppos_listen: unit %d: listening\n", ppp->netif->num));
pppos_input in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
pppos_input in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :           PPPDEBUG(LOG_WARNING,
pppos_input in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :           PPPDEBUG(LOG_INFO,
pppos_input in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :             PPPDEBUG(LOG_ERR, ("pppos_input[%d]: tcpip_callback() failed, dropping packet\n", ppp->netif->num));
pppos_input in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :         PPPDEBUG(LOG_WARNING,
pppos_input in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :             PPPDEBUG(LOG_WARNING,
pppos_input in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :               PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
pppos_send_config in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
pppos_recv_config in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :   PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
pppos_input_drop in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
pppos_input_drop in pppos.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
ppp_impl.h (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) line 217 : #define PRINTMSG(m, l)  { m[l] = '\0'; LWIP_DEBUGF(LOG_INFO, ("Remote message: %s\n", m)); }
pppoe_find_softc_by_hunique in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: alien host unique tag, no session found\n"));
pppoe_find_softc_by_hunique in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": host unique tag found, but it belongs to a connection in state %d\n",
pppoe_find_softc_by_hunique in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": wrong interface, not accepting host unique\n",
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: packet too short: %d\n", pb->len));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: unknown version/type packet: 0x%x\n", ph->vertype));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: packet content does not fit: data available = %d, packet size = %u\n",
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppoe: tag 0x%x len 0x%x is too long\n", tag, len));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%s: %s: %s\n", devname, err_msg, pppoe_error_tmp));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%s: %s\n", devname, err_msg));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: received PADR but not includes ac_cookie\n"));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppoe: received PADR but could not find request for it\n"));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": received unexpected PADR\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppoe: received PADO but could not find request for it\n"));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": received unexpected PADO\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADR, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": session 0x%x connected\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, session));
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": unknown code (0x%"X16_F") session = 0x%"X16_F"\n",
pppoe_dispatch_disc_pkt in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: unknown code (0x%"X16_F") session = 0x%"X16_F"\n", (u16_t)ph->code, session));
pppoe_data_input in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe_data_input: pbuf_header failed\n"));
pppoe_data_input in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe (data): dropping too short packet: %d bytes\n", pb->len));
pppoe_data_input in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe_data_input: could not get PPPoE header\n"));
pppoe_data_input in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe (data): unknown version/type packet: 0x%x\n", ph->vertype));
pppoe_data_input in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: input for unknown session 0x%x, sending PADT\n", session);
pppoe_data_input in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe_data_input: pbuf_header PPPOE_HEADERLEN failed\n"));
pppoe_data_input in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe_data_input: %c%c%"U16_F": pkthdr.len=%d, pppoe.len=%d\n",
pppoe_output in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F" (%x) state=%d, session=0x%x output -> %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F", len=%d\n",
pppoe_send_padi in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("ERROR: pppoe_send_padi in state %d", sc->sc_state));
pppoe_timeout in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": timeout\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_timeout in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to transmit PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_timeout in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :           PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_timeout in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :         PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADR, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_connect in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
pppoe_do_disconnect in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": disconnecting\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_abort_connect in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": could not establish connection\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
pppoe_xmit in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_ERR, ("pppoe: %c%c%"U16_F": pppoe_xmit: could not allocate room for header\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) line 1099 :       PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": ethernet interface detached, going down\n",
pppoe_clear_softc in ppp_oe.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": session 0x%x terminated, %s\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, sc->sc_session, message));
avChurnRand in randm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :   /* LWIP_DEBUGF(LOG_INFO, ("churnRand: %u@%P\n", randLen, randData)); */
avChurnRand in randm.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) : /*  LWIP_DEBUGF(LOG_INFO, ("churnRand: -> 0\n")); */
_rndis_init_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_E("%s,%d: no memory!", __func__, __LINE__);
_create_resp in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_E("%s,%d: no memory!", __func__, __LINE__);
_rndis_query_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_W("Not support OID %X", msg->Oid);
_rndis_query_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_E("%s,%d: no memory!", __func__, __LINE__);
_rndis_set_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_E("%s,%d: no memory!", __func__, __LINE__);
_rndis_set_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("OID_GEN_CURRENT_PACKET_FILTER");
_rndis_set_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_W("Unknow rndis set 0x%02X", msg->Oid);
_rndis_reset_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_E("%s,%d: no memory!", __func__, __LINE__);
_rndis_keepalive_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_E("%s,%d: no memory!", __func__, __LINE__);
_rndis_msg_parser in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("REMOTE_NDIS_INITIALIZE_MSG");
_rndis_msg_parser in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("REMOTE_NDIS_HALT_MSG");
_rndis_msg_parser in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("REMOTE_NDIS_QUERY_MSG");
_rndis_msg_parser in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("REMOTE_NDIS_SET_MSG");
_rndis_msg_parser in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("REMOTE_NDIS_RESET_MSG");
_rndis_msg_parser in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("REMOTE_NDIS_KEEPALIVE_MSG");
_rndis_msg_parser in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_W("not support RNDIS msg %X", ((rndis_gen_msg_t) msg)->MessageType);
_rndis_get_encapsulated_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_D("response_list is empty!");
_rndis_get_encapsulated_response in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_I("auto append next response!");
_interface_handler in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_W("unkown setup->request 0x%02X !", setup->bRequest);
_function_enable in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :     LOG_I("plugged in");
_function_disable in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :     LOG_I("plugged out");
_function_disable in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :             LOG_D("remove resp chain list!");
rt_rndis_eth_tx in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_I("linkdown, drop pkg");
rt_rndis_eth_tx in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_W("RNDIS MTU is:%d, but the send packet size is %d",
rt_rndis_eth_tx in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_W("wait for buffer free timeout");
_rndis_indicate_status_msg in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :         LOG_E("%s,%d: no memory!", __func__, __LINE__);
timer_timeout in rndis.c (rt-thread\components\drivers\usb\usbdevice\class) :     LOG_I("delay link up!");
rtconfig.h line 218 : #define ULOG_OUTPUT_LVL_D
rtconfig.h line 219 : #define ULOG_OUTPUT_LVL 7
rtconfig.h line 220 : #define ULOG_ASSERT_ENABLE
rtconfig.h line 221 : #define ULOG_LINE_BUF_SIZE 128
rtconfig.h line 225 : #define ULOG_USING_COLOR
rtconfig.h line 226 : #define ULOG_OUTPUT_TIME
rtconfig.h line 227 : #define ULOG_OUTPUT_LEVEL
rtconfig.h line 228 : #define ULOG_OUTPUT_TAG
rtconfig.h line 229 : #define ULOG_BACKEND_USING_CONSOLE
rtdbg.h (rt-thread\include) line 9 :  * 2018-05-25     armink       Add simple API, such as LOG_D, LOG_E
rtdbg.h (rt-thread\include) line 25 :  * Then in your C/C++ file, you can use LOG_X macro to print out logs:
rtdbg.h (rt-thread\include) line 26 :  * LOG_D("this is a debug log!");
rtdbg.h (rt-thread\include) line 27 :  * LOG_E("this is a error log!");
rtdbg.h (rt-thread\include) line 93 : #define _DBG_LOG_HDR(lvl_name, color_n)                    \
rtdbg.h (rt-thread\include) line 95 : #define _DBG_LOG_X_END                                     \
rtdbg.h (rt-thread\include) line 99 : #define _DBG_LOG_HDR(lvl_name, color_n)                    \
rtdbg.h (rt-thread\include) line 101 : #define _DBG_LOG_X_END                                     \
rtdbg.h (rt-thread\include) line 107 :  * NOTE: This is a NOT RECOMMENDED API. Please using LOG_X API.
dbg_log in rtdbg.h (rt-thread\include) :             case DBG_ERROR:   _DBG_LOG_HDR("E", 31); break; \
dbg_log in rtdbg.h (rt-thread\include) :             case DBG_WARNING: _DBG_LOG_HDR("W", 33); break; \
dbg_log in rtdbg.h (rt-thread\include) :             case DBG_INFO:    _DBG_LOG_HDR("I", 32); break; \
dbg_log in rtdbg.h (rt-thread\include) :             case DBG_LOG:     _DBG_LOG_HDR("D", 0); break;  \
rtdbg.h (rt-thread\include) line 131 : #define dbg_log_line(lvl, color_n, fmt, ...)                \
dbg_log_line in rtdbg.h (rt-thread\include) :         _DBG_LOG_HDR(lvl, color_n);                         \
dbg_log_line in rtdbg.h (rt-thread\include) :         _DBG_LOG_X_END;                                     \
rtdbg.h (rt-thread\include) line 147 : #define dbg_log_line(lvl, color_n, fmt, ...)
rtdbg.h (rt-thread\include) line 152 : #define LOG_D(fmt, ...)      dbg_log_line("D", 0, fmt, ##__VA_ARGS__)
rtdbg.h (rt-thread\include) line 154 : #define LOG_D(...)
rtdbg.h (rt-thread\include) line 158 : #define LOG_I(fmt, ...)      dbg_log_line("I", 32, fmt, ##__VA_ARGS__)
rtdbg.h (rt-thread\include) line 160 : #define LOG_I(...)
rtdbg.h (rt-thread\include) line 164 : #define LOG_W(fmt, ...)      dbg_log_line("W", 33, fmt, ##__VA_ARGS__)
rtdbg.h (rt-thread\include) line 166 : #define LOG_W(...)
rtdbg.h (rt-thread\include) line 170 : #define LOG_E(fmt, ...)      dbg_log_line("E", 31, fmt, ##__VA_ARGS__)
rtdbg.h (rt-thread\include) line 172 : #define LOG_E(...)
rtdbg.h (rt-thread\include) line 175 : #define LOG_RAW(...)         dbg_raw(__VA_ARGS__)
sal_init in sal_socket.c (rt-thread\components\net\sal_socket\src) :         LOG_D("Socket Abstraction Layer is already initialized.");
sal_init in sal_socket.c (rt-thread\components\net\sal_socket\src) :         LOG_E("No memory for socket table.\n");
sal_init in sal_socket.c (rt-thread\components\net\sal_socket\src) :     LOG_I("Socket Abstraction Layer initialize success.");
check_netdev_internet_up_work in sal_socket.c (rt-thread\components\net\sal_socket\src) :         LOG_D("Set network interface device(%s) internet status up.", netdev->name);
check_netdev_internet_up_work in sal_socket.c (rt-thread\components\net\sal_socket\src) :         LOG_D("Set network interface device(%s) internet status down.", netdev->name);
sal_check_netdev_internet_up in sal_socket.c (rt-thread\components\net\sal_socket\src) :         LOG_W("No memory for network interface device(%s) delay work.", netdev->name);
socket_init in sal_socket.c (rt-thread\components\net\sal_socket\src) :             LOG_E("not find network interface device by protocol family(%d).", family);
sal_accept in sal_socket.c (rt-thread\components\net\sal_socket\src) :             LOG_E("New socket registered failed, return error %d.", retval);
sal_socket in sal_socket.c (rt-thread\components\net\sal_socket\src) :         LOG_E("SAL socket protocol family input failed, return error %d.", retval);
mmcsd_parse_csd in sd.c (rt-thread\components\drivers\sdio) :         LOG_E("unrecognised CSD structure version %d!", csd->csd_structure);
mmcsd_parse_csd in sd.c (rt-thread\components\drivers\sdio) :     LOG_I("SD card capacity %d KB.", card->card_capacity);
mmcsd_switch in sd.c (rt-thread\components\drivers\sdio) :         LOG_E("alloc memory failed!");
mmcsd_switch in sd.c (rt-thread\components\drivers\sdio) :         LOG_I("switching card to high speed failed!");
mmcsd_sd_init_card in sd.c (rt-thread\components\drivers\sdio) :         LOG_E("malloc card failed!");
init_sd in sd.c (rt-thread\components\drivers\sdio) :         LOG_I(" SD card claims to support the "
init_sd in sd.c (rt-thread\components\drivers\sdio) :     LOG_D("init SD card failed!");
sdio_read_cccr in sdio.c (rt-thread\components\drivers\sdio) :         LOG_E("unrecognised CCCR structure version %d", cccr_version);
sdio_read_cis in sdio.c (rt-thread\components\drivers\sdio) :                 LOG_D("bad CISTPL_MANFID length");
sdio_read_cis in sdio.c (rt-thread\components\drivers\sdio) :                 LOG_D("bad CISTPL_FUNCE size %u "
sdio_read_cis in sdio.c (rt-thread\components\drivers\sdio) :                 LOG_D("CISTPL_VERS_1 too short");
sdio_read_cis in sdio.c (rt-thread\components\drivers\sdio) :             LOG_D( "function %d, CIS tuple code %#x, length %d",
sdio_initialize_function in sdio.c (rt-thread\components\drivers\sdio) :         LOG_E("malloc rt_sdio_function failed");
sdio_register_card in sdio.c (rt-thread\components\drivers\sdio) :         LOG_E("malloc sdio card failed");
sdio_init_card in sdio.c (rt-thread\components\drivers\sdio) :         LOG_E("malloc card failed");
sdio_init_card in sdio.c (rt-thread\components\drivers\sdio) :         LOG_E("malloc sdio_func0 failed");
sdio_init_card in sdio.c (rt-thread\components\drivers\sdio) :     LOG_E("error %d while initialising SDIO card", err);
init_sdio in sdio.c (rt-thread\components\drivers\sdio) :         LOG_W("Card ocr below the defined voltage rang.");
init_sdio in sdio.c (rt-thread\components\drivers\sdio) :         LOG_W("Can't support the low voltage SDIO card.");
init_sdio in sdio.c (rt-thread\components\drivers\sdio) :     LOG_E("init SDIO card failed");
sdio_register_driver in sdio.c (rt-thread\components\drivers\sdio) :         LOG_E("malloc sdio driver failed");
sdio_unregister_driver in sdio.c (rt-thread\components\drivers\sdio) :         LOG_E("SDIO driver %s not register", driver->name);
rt_sensor_irq_init in sensor.c (rt-thread\components\drivers\sensors) :     LOG_I("interrupt init success");
rt_sensor_control in sensor.c (rt-thread\components\drivers\sensors) :             LOG_D("set range %d", sensor->config.range);
rt_sensor_control in sensor.c (rt-thread\components\drivers\sensors) :             LOG_D("set odr %d", sensor->config.odr);
rt_sensor_control in sensor.c (rt-thread\components\drivers\sensors) :             LOG_D("set power mode code:", sensor->config.power);
rt_hw_sensor_register in sensor.c (rt-thread\components\drivers\sensors) :         LOG_E("device_name calloc failed!");
rt_hw_sensor_register in sensor.c (rt-thread\components\drivers\sensors) :         LOG_E("rt_sensor register err code: %d", result);
rt_hw_sensor_register in sensor.c (rt-thread\components\drivers\sensors) :     LOG_I("rt_sensor init success");
sensor_show_data in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_I("num:%3d, x:%5d, y:%5d, z:%5d mg, timestamp:%5d", num, sensor_data->data.acce.x, sensor_data->data.acce.y, sensor_data->data.acce.z, sensor_data->timestamp);
sensor_show_data in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_I("num:%3d, x:%8d, y:%8d, z:%8d dps, timestamp:%5d", num, sensor_data->data.gyro.x / 1000, sensor_data->data.gyro.y / 1000, sensor_data->data.gyro.z / 1000, sensor_data->timestamp);
sensor_show_data in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_I("num:%3d, x:%5d, y:%5d, z:%5d mGauss, timestamp:%5d", num, sensor_data->data.mag.x, sensor_data->data.mag.y, sensor_data->data.mag.z, sensor_data->timestamp);
sensor_show_data in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_I("num:%3d, humi:%3d.%d%%, timestamp:%5d", num, sensor_data->data.humi / 10, sensor_data->data.humi % 10, sensor_data->timestamp);
sensor_show_data in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_I("num:%3d, temp:%3d.%dC, timestamp:%5d", num, sensor_data->data.temp / 10, sensor_data->data.temp % 10, sensor_data->timestamp);
sensor_show_data in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_I("num:%3d, press:%5d pa, timestamp:%5d", num, sensor_data->data.baro, sensor_data->timestamp);
sensor_show_data in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_I("num:%3d, step:%5d, timestamp:%5d", num, sensor_data->data.step, sensor_data->timestamp);
sensor_show_data in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_I("num:%3d, distance:%5d, timestamp:%5d", num, sensor_data->data.proximity, sensor_data->timestamp);
sensor_show_data in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_I("num:%3d, force:%5d, timestamp:%5d", num, sensor_data->data.force, sensor_data->timestamp);
sensor_fifo_rx_entry in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_E("Memory allocation failed!");
sensor_fifo in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_E("Can't find device:%s", argv[1]);
sensor_fifo in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_E("open device failed!");
sensor_fifo in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_E("The thread is running, please reboot and try again");
sensor_int in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_E("Can't find device:%s", argv[1]);
sensor_int in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_E("The thread is running, please reboot and try again");
sensor_int in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_E("open device failed!");
sensor_polling in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_E("Can't find device:%s", argv[1]);
sensor_polling in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_E("open device failed!");
sensor_polling in sensor_cmd.c (rt-thread\components\drivers\sensors) :             LOG_E("read data failed!size is %d", res);
sensor in sensor_cmd.c (rt-thread\components\drivers\sensors) :             LOG_W("Please probe sensor device first!");
sensor in sensor_cmd.c (rt-thread\components\drivers\sensors) :             LOG_W("Please probe sensor device first!");
sensor in sensor_cmd.c (rt-thread\components\drivers\sensors) :                 LOG_E("read data failed!size is %d", res);
sensor in sensor_cmd.c (rt-thread\components\drivers\sensors) :                 LOG_E("Can't find device:%s", argv[1]);
sensor in sensor_cmd.c (rt-thread\components\drivers\sensors) :                 LOG_E("open device failed!");
sensor in sensor_cmd.c (rt-thread\components\drivers\sensors) :             LOG_I("device id: 0x%x!", reg);
sensor in sensor_cmd.c (rt-thread\components\drivers\sensors) :             LOG_W("Please probe sensor first!");
sensor in sensor_cmd.c (rt-thread\components\drivers\sensors) :             LOG_W("Unknown command, please enter 'sensor' get help information!");
sensor in sensor_cmd.c (rt-thread\components\drivers\sensors) :         LOG_W("Unknown command, please enter 'sensor' get help information!");
serial_fops_open in serial.c (rt-thread\components\drivers\serial) :         LOG_D("fops open: O_RDONLY!");
serial_fops_open in serial.c (rt-thread\components\drivers\serial) :         LOG_D("fops open: O_WRONLY!");
serial_fops_open in serial.c (rt-thread\components\drivers\serial) :         LOG_D("fops open: O_RDWR!");
serial_fops_open in serial.c (rt-thread\components\drivers\serial) :         LOG_E("fops open: unknown mode - %d!", fd->flags & O_ACCMODE);
rt_serial_open in serial.c (rt-thread\components\drivers\serial) :     LOG_D("open serial device: 0x%08x with open flag: 0x%04x",
sfud.c (rt-thread\components\drivers\spi\sfud\src) line 78 : extern void sfud_log_debug(const char *file, const long line, const char *format, ...);
sfud.c (rt-thread\components\drivers\spi\sfud\src) line 79 : extern void sfud_log_info(const char *format, ...);
sfud_def.h (rt-thread\components\drivers\spi\sfud\inc) line 46 : #define SFUD_DEBUG(...) sfud_log_debug(__FILE__, __LINE__, __VA_ARGS__)
sfud_def.h (rt-thread\components\drivers\spi\sfud\inc) line 53 : #define SFUD_INFO(...)  sfud_log_info(__VA_ARGS__)
sfud_sfdp.c (rt-thread\components\drivers\spi\sfud\src) line 70 : extern void sfud_log_debug(const char *file, const long line, const char *format, ...);
sfud_sfdp.c (rt-thread\components\drivers\spi\sfud\src) line 71 : extern void sfud_log_info(const char *format, ...);
mbedtls_sha1_init in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha1 init ctx[%08x]", *ctx);
mbedtls_sha1_init in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha1 init. but ctx is null");
mbedtls_sha1_free in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha1 free ctx[%08x]", *ctx);
mbedtls_sha1_free in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha1 free. but ctx is null");
mbedtls_sha1_clone in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha1 clone des[%08x] src[%08x]", *dst, *src);
mbedtls_sha1_clone in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha1 clone. but dst or src is null");
mbedtls_sha1_starts_ret in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha1 starts ctx[%08x]", *ctx);
mbedtls_sha1_starts_ret in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha1 starts. but ctx is null");
mbedtls_sha1_update_ret in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha1 update ctx[%08x] len:%d in:%08x", *ctx, ilen, input);
mbedtls_sha1_update_ret in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha1 update. but ctx is null");
mbedtls_sha1_finish_ret in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha1 finish ctx[%08x] out:%08x", *ctx, output);
mbedtls_sha1_finish_ret in sha1_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha1 finish. but ctx is null");
mbedtls_sha256_init in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 init ctx[%08x]", *ctx);
mbedtls_sha256_init in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 init. but ctx is null");
mbedtls_sha256_free in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 free ctx[%08x]", *ctx);
mbedtls_sha256_free in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 free. but ctx is null");
mbedtls_sha256_clone in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 clone des[%08x] src[%08x]", *dst, *src);
mbedtls_sha256_clone in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 clone. but dst or src is null");
mbedtls_sha256_starts_ret in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2-%s starts ctx[%08x]", is224 ? "224" : "256", *ctx);
mbedtls_sha256_starts_ret in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 starts. but ctx is null");
mbedtls_sha256_update_ret in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 update ctx[%08x] len:%d in:%08x", *ctx, ilen, input);
mbedtls_sha256_update_ret in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 update. but ctx is null");
mbedtls_sha256_finish_ret in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 finish ctx[%08x] out:%08x", *ctx, output);
mbedtls_sha256_finish_ret in sha256_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 finish. but ctx is null");
mbedtls_sha512_init in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 init ctx[%08x]", *ctx);
mbedtls_sha512_init in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 init. but ctx is null");
mbedtls_sha512_free in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 free ctx[%08x]", *ctx);
mbedtls_sha512_free in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 free. but ctx is null");
mbedtls_sha512_clone in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 clone des[%08x] src[%08x]", *dst, *src);
mbedtls_sha512_clone in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 clone. but dst or src is null");
mbedtls_sha512_starts_ret in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2-%s starts ctx[%08x]", is384 ? "384" : "512", *ctx);
mbedtls_sha512_starts_ret in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 starts. but ctx is null");
mbedtls_sha512_update_ret in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 update ctx[%08x] len:%d in:%08x", *ctx, ilen, input);
mbedtls_sha512_update_ret in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 update. but ctx is null");
mbedtls_sha512_finish_ret in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_D("sha2 finish ctx[%08x] out:%08x", *ctx, output);
mbedtls_sha512_finish_ret in sha512_alt.c (packages\mbedtls-latest\ports\src) :         LOG_E("sha2 finish. but ctx is null");
_signal_default_handler in signal.c (rt-thread\src) :     LOG_I("handled signo[%d] with default action.", signo);
_signal_entry in signal.c (rt-thread\src) :     LOG_D("switch back to: 0x%08x\n", tid->sp);
_signal_deliver in signal.c (rt-thread\src) :             LOG_D("signal stack pointer @ 0x%08x", tid->sp);
rt_signal_wait in signal.c (rt-thread\src) :             LOG_D("sigwait: %d sig raised!", signo);
rt_thread_handle_sig in signal.c (rt-thread\src) :                 LOG_D("handle signal: %d, handler 0x%08x", signo, handler);
rt_thread_free_sig in signal.c (rt-thread\src) :         LOG_D("free signal info list");
rt_thread_kill in signal.c (rt-thread\src) :     LOG_I("send signal: %d", sig);
rt_thread_kill in signal.c (rt-thread\src) :         LOG_E("The allocation of signal info node failed.");
rt_system_signal_init in signal.c (rt-thread\src) :         LOG_E("create memory pool for signal info failed.");
main in solo.c (packages\ali-iotkit-latest\iotkit-embedded\src\dev_model\examples) :     IOT_DumpMemoryStats(IOT_LOG_DEBUG);
spi_flash_sfud.c (rt-thread\components\drivers\spi) line 44 : static char log_buf[RT_CONSOLEBUF_SIZE];
spi_flash_sfud.c (rt-thread\components\drivers\spi) line 46 : void sfud_log_debug(const char *file, const long line, const char *format, ...);
spi_flash_sfud.c (rt-thread\components\drivers\spi) line 265 : void sfud_log_debug(const char *file, const long line, const char *format, ...) {
sfud_log_debug in spi_flash_sfud.c (rt-thread\components\drivers\spi) :     rt_vsnprintf(log_buf, sizeof(log_buf), format, args);
sfud_log_debug in spi_flash_sfud.c (rt-thread\components\drivers\spi) :     rt_kprintf("%s\n", log_buf);
spi_flash_sfud.c (rt-thread\components\drivers\spi) line 283 : void sfud_log_info(const char *format, ...) {
sfud_log_info in spi_flash_sfud.c (rt-thread\components\drivers\spi) :     rt_vsnprintf(log_buf, sizeof(log_buf), format, args);
sfud_log_info in spi_flash_sfud.c (rt-thread\components\drivers\spi) :     rt_kprintf("%s\n", log_buf);
HAL_ADC_AnalogWDGConfig in stm32f4xx_hal_adc.c (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Src) :   assert_param(IS_ADC_ANALOG_WATCHDOG(AnalogWDGConfig->WatchdogMode));
{anonADC_AnalogWDGConfTypeDef} in stm32f4xx_hal_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) :                                    This parameter can be a value of @ref ADC_analog_watchdog_selection */
stm32f4xx_hal_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 421 : /** @defgroup ADC_analog_watchdog_selection ADC Analog Watchdog Selection
stm32f4xx_hal_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 759 : #define IS_ADC_ANALOG_WATCHDOG(WATCHDOG) (((WATCHDOG) == ADC_ANALOGWATCHDOG_SINGLE_REG)        || \
HAL_FMPI2CEx_ConfigAnalogFilter in stm32f4xx_hal_fmpi2c_ex.c (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Src) :   assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));
stm32f4xx_hal_fmpi2c_ex.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 47 : /** @defgroup FMPI2CEx_Analog_Filter FMPI2C Extended Analog Filter
stm32f4xx_hal_fmpi2c_ex.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 100 : #define IS_FMPI2C_ANALOG_FILTER(FILTER)    (((FILTER) == FMPI2C_ANALOGFILTER_ENABLE) || \
HAL_I2CEx_ConfigAnalogFilter in stm32f4xx_hal_i2c_ex.c (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Src) :   assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
stm32f4xx_hal_i2c_ex.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 46 : /** @defgroup I2CEx_Analog_Filter I2C Analog Filter
stm32f4xx_hal_i2c_ex.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 93 : #define IS_I2C_ANALOG_FILTER(FILTER) (((FILTER) == I2C_ANALOGFILTER_ENABLE) || \
stm32f4xx_hal_qspi.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 382 : #define QSPI_DDR_HHC_ANALOG_DELAY           0x00000000U                  /*!<Delay the data output using analog delay in DDR mode*/
stm32f4xx_hal_qspi.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 751 : #define IS_QSPI_DDR_HHC(DDR_HHC)            (((DDR_HHC) == QSPI_DDR_HHC_ANALOG_DELAY) || \
HAL_SMBUS_Init in stm32f4xx_hal_smbus.c (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Src) :   assert_param(IS_SMBUS_ANALOG_FILTER(hsmbus->Init.AnalogFilter));
HAL_SMBUS_ConfigAnalogFilter in stm32f4xx_hal_smbus.c (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Src) :   assert_param(IS_SMBUS_ANALOG_FILTER(AnalogFilter));
{anonSMBUS_InitTypeDef} in stm32f4xx_hal_smbus.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) :                                   This parameter can be a value of @ref SMBUS_Analog_Filter                  */
stm32f4xx_hal_smbus.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 256 : /** @defgroup SMBUS_Analog_Filter SMBUS Analog Filter
stm32f4xx_hal_smbus.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 665 : #define IS_SMBUS_ANALOG_FILTER(FILTER)             (((FILTER) == SMBUS_ANALOGFILTER_ENABLE) || \
stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 1635 :   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 1636 :   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit mV)
stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 1646 : #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
__LL_ADC_CALC_DATA_TO_VOLTAGE in stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) :   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 1679 :   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 1686 :   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit mV)
stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 1698 : #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
__LL_ADC_CALC_TEMPERATURE in stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) :                    * (__VREFANALOG_VOLTAGE__))                                     \
stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 1737 :   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 1746 :   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit mV)
__LL_ADC_CALC_TEMPERATURE_TYP_PARAMS in stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) :                                              __VREFANALOG_VOLTAGE__,\
__LL_ADC_CALC_TEMPERATURE_TYP_PARAMS in stm32f4xx_ll_adc.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) :        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
stm32f4xx_ll_dac.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 477 :   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
stm32f4xx_ll_dac.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 478 :   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit mV)
stm32f4xx_ll_dac.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) line 486 : #define __LL_DAC_CALC_VOLTAGE_TO_DATA(__VREFANALOG_VOLTAGE__,\
__LL_DAC_CALC_VOLTAGE_TO_DATA in stm32f4xx_ll_dac.h (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Inc) :    / (__VREFANALOG_VOLTAGE__)                                                  \
stm32f4xx_ll_i2c.c (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Src) line 60 : #define IS_LL_I2C_ANALOG_FILTER(__VALUE__)      (((__VALUE__) == LL_I2C_ANALOGFILTER_ENABLE) || \
LL_I2C_Init in stm32f4xx_ll_i2c.c (libraries\STM32F4xx_HAL\STM32F4xx_HAL_Driver\Src) :   assert_param(IS_LL_I2C_ANALOG_FILTER(I2C_InitStruct->AnalogFilter));
syslog.c (rt-thread\components\utilities\ulog\syslog) line 16 : #ifdef ULOG_OUTPUT_FLOAT
syslog.c (rt-thread\components\utilities\ulog\syslog) line 27 : #ifdef ULOG_USING_SYSLOG
syslog.c (rt-thread\components\utilities\ulog\syslog) line 31 : #ifndef ULOG_SYSLOG_IDENT_MAX_LEN
syslog.c (rt-thread\components\utilities\ulog\syslog) line 32 : #define ULOG_SYSLOG_IDENT_MAX_LEN      ULOG_FILTER_TAG_MAX_LEN
syslog.c (rt-thread\components\utilities\ulog\syslog) line 35 : static char local_ident[ULOG_SYSLOG_IDENT_MAX_LEN + 1];
syslog.c (rt-thread\components\utilities\ulog\syslog) line 36 : static int local_facility = LOG_USER;
syslog.c (rt-thread\components\utilities\ulog\syslog) line 37 : static int local_option = LOG_USER;
openlog in syslog.c (rt-thread\components\utilities\ulog\syslog) :     ulog_init();
openlog in syslog.c (rt-thread\components\utilities\ulog\syslog) :         rt_strncpy(local_ident, ident, ULOG_SYSLOG_IDENT_MAX_LEN);
openlog in syslog.c (rt-thread\components\utilities\ulog\syslog) :         rt_strncpy(local_ident, "rtt", ULOG_SYSLOG_IDENT_MAX_LEN);
openlog in syslog.c (rt-thread\components\utilities\ulog\syslog) :         /* default facility is LOG_USER */
openlog in syslog.c (rt-thread\components\utilities\ulog\syslog) :         local_facility = LOG_USER;
openlog in syslog.c (rt-thread\components\utilities\ulog\syslog) :     setlogmask(LOG_UPTO(LOG_DEBUG));
syslog.c (rt-thread\components\utilities\ulog\syslog) line 88 :  * @param priority log priority, can be generated by the macro LOG_MAKEPRI
vsyslog in syslog.c (rt-thread\components\utilities\ulog\syslog) :     if (LOG_FAC(priority) == 0)
vsyslog in syslog.c (rt-thread\components\utilities\ulog\syslog) :     ulog_voutput(priority, local_ident, RT_TRUE, format, args);
syslog.c (rt-thread\components\utilities\ulog\syslog) line 106 :  * @param priority log priority, can be generated by the macro LOG_MAKEPRI
closelog in syslog.c (rt-thread\components\utilities\ulog\syslog) :     ulog_deinit();
syslog.c (rt-thread\components\utilities\ulog\syslog) line 138 :  * @param mask The log priority mask which generate by macro LOG_MASK and LOG_UPTO.
setlogmask in syslog.c (rt-thread\components\utilities\ulog\syslog) :     ulog_tag_lvl_filter_set(local_ident, mask);
syslog.c (rt-thread\components\utilities\ulog\syslog) line 174 : RT_WEAK rt_size_t syslog_formater(char *log_buf, int level, const char *tag, rt_bool_t newline, const char *format, va_list args)
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     extern size_t ulog_strcpy(size_t cur_len, char *dst, const char *src);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     rt_size_t log_len = 0, newline_len = rt_strlen(ULOG_NEWLINE_SIGN);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     RT_ASSERT(log_buf);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     RT_ASSERT(LOG_PRI(level) <= LOG_DEBUG);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) : #ifdef ULOG_OUTPUT_LEVEL
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         rt_snprintf(log_buf + log_len, ULOG_LINE_BUF_SIZE - log_len, "<%d>%s%3d %02d:%02d:%02d", level,
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         rt_snprintf(log_buf + log_len, ULOG_LINE_BUF_SIZE - log_len, "%s%3d %02d:%02d:%02d",
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) : #endif /* ULOG_OUTPUT_LEVEL */
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         log_len += rt_strlen(log_buf + log_len);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) : #ifdef ULOG_OUTPUT_TAG
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         log_len += ulog_strcpy(log_len, log_buf + log_len, " ");
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         log_len += ulog_strcpy(log_len, log_buf + log_len, tag);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) : #endif /* ULOG_OUTPUT_TAG */
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) : #ifdef ULOG_OUTPUT_THREAD_NAME
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         log_len += ulog_strcpy(log_len, log_buf + log_len, " ");
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :             log_len += ulog_strcpy(log_len, log_buf + log_len, rt_thread_self()->name);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :             log_len += ulog_strcpy(log_len, log_buf + log_len, "ISR");
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) : #endif /* ULOG_OUTPUT_THREAD_NAME */
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     log_len += ulog_strcpy(log_len, log_buf + log_len, ": ");
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) : #ifdef ULOG_OUTPUT_FLOAT
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     fmt_result = vsnprintf(log_buf + log_len, ULOG_LINE_BUF_SIZE - log_len, format, args);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     fmt_result = rt_vsnprintf(log_buf + log_len, ULOG_LINE_BUF_SIZE - log_len, format, args);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) : #endif /* ULOG_OUTPUT_FLOAT */
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     if ((log_len + fmt_result <= ULOG_LINE_BUF_SIZE) && (fmt_result > -1))
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         log_len += fmt_result;
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         log_len = ULOG_LINE_BUF_SIZE;
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     if (log_len + newline_len > ULOG_LINE_BUF_SIZE)
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         log_len = ULOG_LINE_BUF_SIZE;
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         log_len -= newline_len;
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :         log_len += ulog_strcpy(log_len, log_buf + log_len, ULOG_NEWLINE_SIGN);
syslog_formater in syslog.c (rt-thread\components\utilities\ulog\syslog) :     return log_len;
syslog.c (rt-thread\components\utilities\ulog\syslog) line 265 : #endif /* ULOG_USING_SYSLOG */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 11 : #ifndef _SYSLOG_H_
syslog.h (rt-thread\components\utilities\ulog\syslog) line 12 : #define _SYSLOG_H_
syslog.h (rt-thread\components\utilities\ulog\syslog) line 27 : #define LOG_EMERG   0   /* system is unusable */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 28 : #define LOG_ALERT   1   /* action must be taken immediately */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 29 : #define LOG_CRIT    2   /* critical conditions */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 30 : #define LOG_ERR     3   /* error conditions */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 31 : #define LOG_WARNING 4   /* warning conditions */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 32 : #define LOG_NOTICE  5   /* normal but significant condition */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 33 : #define LOG_INFO    6   /* informational */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 34 : #define LOG_DEBUG   7   /* debug-level messages */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 36 : #define LOG_PRIMASK 0x07
syslog.h (rt-thread\components\utilities\ulog\syslog) line 38 : #define LOG_PRI(p)              ((p) & LOG_PRIMASK)
syslog.h (rt-thread\components\utilities\ulog\syslog) line 39 : #define LOG_MAKEPRI(fac, pri)   (((fac) << 3) | (pri))
syslog.h (rt-thread\components\utilities\ulog\syslog) line 42 : #define LOG_KERN        (0<<3)  /* kernel messages */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 43 : #define LOG_USER        (1<<3)  /* random user-level messages */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 44 : #define LOG_MAIL        (2<<3)  /* mail system */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 45 : #define LOG_DAEMON      (3<<3)  /* system daemons */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 46 : #define LOG_AUTH        (4<<3)  /* security/authorization messages */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 47 : #define LOG_SYSLOG      (5<<3)  /* messages generated internally by syslogd */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 48 : #define LOG_LPR         (6<<3)  /* line printer subsystem */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 49 : #define LOG_NEWS        (7<<3)  /* network news subsystem */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 50 : #define LOG_UUCP        (8<<3)  /* UUCP subsystem */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 51 : #define LOG_CRON        (9<<3)  /* clock daemon */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 52 : #define LOG_AUTHPRIV    (10<<3) /* security/authorization messages (private) */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 55 : #define LOG_LOCAL0      (16<<3) /* reserved for local use */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 56 : #define LOG_LOCAL1      (17<<3) /* reserved for local use */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 57 : #define LOG_LOCAL2      (18<<3) /* reserved for local use */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 58 : #define LOG_LOCAL3      (19<<3) /* reserved for local use */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 59 : #define LOG_LOCAL4      (20<<3) /* reserved for local use */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 60 : #define LOG_LOCAL5      (21<<3) /* reserved for local use */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 61 : #define LOG_LOCAL6      (22<<3) /* reserved for local use */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 62 : #define LOG_LOCAL7      (23<<3) /* reserved for local use */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 64 : #define LOG_NFACILITIES 24  /* current number of facilities */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 65 : #define LOG_FACMASK     0x03f8  /* mask to extract facility part */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 67 : #define LOG_FAC(p)      (((p) & LOG_FACMASK) >> 3)
syslog.h (rt-thread\components\utilities\ulog\syslog) line 72 : #define LOG_MASK(pri)   (1 << (pri))        /* mask for one priority */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 73 : #define LOG_UPTO(pri)   ((1 << ((pri)+1)) - 1)  /* all priorities through pri */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 78 :  * LOG_ODELAY no longer does anything.
syslog.h (rt-thread\components\utilities\ulog\syslog) line 79 :  * LOG_NDELAY is the inverse of what it used to be.
syslog.h (rt-thread\components\utilities\ulog\syslog) line 81 : #define LOG_PID         0x01    /* log the pid with each message */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 82 : #define LOG_CONS        0x02    /* log on the console if errors in sending */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 83 : #define LOG_ODELAY      0x04    /* delay open until first syslog() (default) */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 84 : #define LOG_NDELAY      0x08    /* don't delay open */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 85 : #define LOG_NOWAIT      0x10    /* don't wait for console forks: DEPRECATED */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 86 : #define LOG_PERROR      0x20    /* log to stderr as well */
syslog.h (rt-thread\components\utilities\ulog\syslog) line 100 : #endif /* _SYSLOG_H_ */
ppp_trace in sys_arch.c (rt-thread\components\net\lwip-1.4.1\src\arch) :     static char rt_log_buf[RT_CONSOLEBUF_SIZE];
ppp_trace in sys_arch.c (rt-thread\components\net\lwip-1.4.1\src\arch) :     length = rt_vsprintf(rt_log_buf, format, args);
ppp_trace in sys_arch.c (rt-thread\components\net\lwip-1.4.1\src\arch) :     rt_device_write((rt_device_t)rt_console_get_device(), 0, rt_log_buf, length);
ppp_trace in sys_arch.c (rt-thread\components\net\lwip-2.0.2\src\arch) :     static char rt_log_buf[RT_CONSOLEBUF_SIZE];
ppp_trace in sys_arch.c (rt-thread\components\net\lwip-2.0.2\src\arch) :     length = rt_vsprintf(rt_log_buf, format, args);
ppp_trace in sys_arch.c (rt-thread\components\net\lwip-2.0.2\src\arch) :     rt_device_write((rt_device_t)rt_console_get_device(), 0, rt_log_buf, length);
ppp_trace in sys_arch.c (rt-thread\components\net\lwip-2.1.0\src\arch) :     static char rt_log_buf[RT_CONSOLEBUF_SIZE];
ppp_trace in sys_arch.c (rt-thread\components\net\lwip-2.1.0\src\arch) :     length = rt_vsprintf(rt_log_buf, format, args);
ppp_trace in sys_arch.c (rt-thread\components\net\lwip-2.1.0\src\arch) :     rt_device_write((rt_device_t)rt_console_get_device(), 0, rt_log_buf, length);
tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) line 205 :  * tcp_backlog_accepted() is called.
tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) line 207 :  * ATTENTION: the caller is responsible for calling tcp_backlog_accepted()
tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) line 213 : tcp_backlog_delayed(struct tcp_pcb* pcb)
tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) line 227 :  * the number of outstanding connections after calling tcp_backlog_delayed().
tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) line 229 :  * ATTENTION: the caller is responsible for calling tcp_backlog_accepted()
tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) line 235 : tcp_backlog_accepted(struct tcp_pcb* pcb)
tcp_close_shutdown_fin in tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) :       tcp_backlog_accepted(pcb);
tcp_abandon in tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) :     tcp_backlog_accepted(pcb);
tcp_listen_with_backlog in tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) :   return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) line 678 :  *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) line 681 : tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
tcp_listen_with_backlog_and_err in tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) :   tcp_backlog_set(lpcb, backlog);
tcp_pcb_purge in tcp.c (rt-thread\components\net\lwip-2.0.2\src\core) :     tcp_backlog_accepted(pcb);
tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 286 :  * tcp_backlog_accepted() is called.
tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 288 :  * ATTENTION: the caller is responsible for calling tcp_backlog_accepted()
tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 294 : tcp_backlog_delayed(struct tcp_pcb *pcb)
tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 309 :  * the number of outstanding connections after calling tcp_backlog_delayed().
tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 311 :  * ATTENTION: the caller is responsible for calling tcp_backlog_accepted()
tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 317 : tcp_backlog_accepted(struct tcp_pcb *pcb)
tcp_close_shutdown_fin in tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) :         tcp_backlog_accepted(pcb);
tcp_abandon in tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) :     tcp_backlog_accepted(pcb);
tcp_listen_with_backlog in tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) :   return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 843 :  *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) line 846 : tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
tcp_listen_with_backlog_and_err in tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) :   LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
tcp_listen_with_backlog_and_err in tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) :   LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
tcp_listen_with_backlog_and_err in tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) :   tcp_backlog_set(lpcb, backlog);
tcp_pcb_purge in tcp.c (rt-thread\components\net\lwip-2.1.0\src\core) :     tcp_backlog_accepted(pcb);
tcp.h (rt-thread\components\net\lwip-2.0.2\src\include\lwip) line 379 : #define          tcp_backlog_set(pcb, new_backlog) do { \
tcp.h (rt-thread\components\net\lwip-2.0.2\src\include\lwip) line 382 : void             tcp_backlog_delayed(struct tcp_pcb* pcb);
tcp.h (rt-thread\components\net\lwip-2.0.2\src\include\lwip) line 383 : void             tcp_backlog_accepted(struct tcp_pcb* pcb);
tcp.h (rt-thread\components\net\lwip-2.0.2\src\include\lwip) line 385 : #define          tcp_backlog_set(pcb, new_backlog)
tcp.h (rt-thread\components\net\lwip-2.0.2\src\include\lwip) line 386 : #define          tcp_backlog_delayed(pcb)
tcp.h (rt-thread\components\net\lwip-2.0.2\src\include\lwip) line 387 : #define          tcp_backlog_accepted(pcb)
tcp.h (rt-thread\components\net\lwip-2.0.2\src\include\lwip) line 397 : struct tcp_pcb * tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err);
tcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 445 : #define          tcp_backlog_set(pcb, new_backlog) do { \
tcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 448 : void             tcp_backlog_delayed(struct tcp_pcb* pcb);
tcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 449 : void             tcp_backlog_accepted(struct tcp_pcb* pcb);
tcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 451 : #define          tcp_backlog_set(pcb, new_backlog)
tcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 452 : #define          tcp_backlog_delayed(pcb)
tcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 453 : #define          tcp_backlog_accepted(pcb)
tcp.h (rt-thread\components\net\lwip-2.1.0\src\include\lwip) line 464 : struct tcp_pcb * tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err);
tcp_process in tcp_in.c (rt-thread\components\net\lwip-2.0.2\src\core) :           tcp_backlog_accepted(pcb);
tcp_process in tcp_in.c (rt-thread\components\net\lwip-2.1.0\src\core) :             tcp_backlog_accepted(pcb);
_ssl_debug in tls_client.c (packages\mbedtls-latest\ports\src) :     LOG_D("%s:%04d: %s", file, line, str);
mbedtls_client_init in tls_client.c (packages\mbedtls-latest\ports\src) :     LOG_D("Set debug level (%d)", (int) DEBUG_LEVEL);
mbedtls_client_init in tls_client.c (packages\mbedtls-latest\ports\src) :         LOG_E("mbedtls_ctr_drbg_seed error, return -0x%x\n", -ret);
mbedtls_client_init in tls_client.c (packages\mbedtls-latest\ports\src) :     LOG_D("mbedtls client struct init success...");
mbedtls_client_context in tls_client.c (packages\mbedtls-latest\ports\src) :         LOG_E("mbedtls_x509_crt_parse error,  return -0x%x", -ret);
mbedtls_client_context in tls_client.c (packages\mbedtls-latest\ports\src) :     LOG_D("Loading the CA root certificate success...");
mbedtls_client_context in tls_client.c (packages\mbedtls-latest\ports\src) :             LOG_E("mbedtls_ssl_set_hostname error, return -0x%x", -ret);
mbedtls_client_context in tls_client.c (packages\mbedtls-latest\ports\src) :         LOG_E("mbedtls_ssl_config_defaults error, return -0x%x", -ret);
mbedtls_client_context in tls_client.c (packages\mbedtls-latest\ports\src) :         LOG_E("mbedtls_ssl_setup error, return -0x%x\n", -ret);
mbedtls_client_context in tls_client.c (packages\mbedtls-latest\ports\src) :     LOG_D("mbedtls client context init success...");
mbedtls_client_connect in tls_client.c (packages\mbedtls-latest\ports\src) :         LOG_E("mbedtls_net_connect error, return -0x%x", -ret);
mbedtls_client_connect in tls_client.c (packages\mbedtls-latest\ports\src) :     LOG_D("Connected %s:%s success...", session->host, session->port);
mbedtls_client_connect in tls_client.c (packages\mbedtls-latest\ports\src) :             LOG_E("mbedtls_ssl_handshake error, return -0x%x", -ret);
mbedtls_client_connect in tls_client.c (packages\mbedtls-latest\ports\src) :         LOG_E("verify peer certificate fail....");
mbedtls_client_connect in tls_client.c (packages\mbedtls-latest\ports\src) :         LOG_E("verification info: %s", session->buffer);
mbedtls_client_connect in tls_client.c (packages\mbedtls-latest\ports\src) :     LOG_D("Certificate verified success...");
mbedtls_client_read in tls_client.c (packages\mbedtls-latest\ports\src) :         LOG_E("mbedtls_client_read data error, return -0x%x", -ret);
mbedtls_client_write in tls_client.c (packages\mbedtls-latest\ports\src) :         LOG_E("mbedtls_client_write data error, return -0x%x", -ret);
rt_touch_control in touch.c (rt-thread\components\drivers\touch) :             LOG_D("set x coordinate range :%d\n", touch->info.range_x);
rt_touch_control in touch.c (rt-thread\components\drivers\touch) :             LOG_D("set y coordinate range :%d \n", touch->info.range_x);
rt_hw_touch_register in touch.c (rt-thread\components\drivers\touch) :         LOG_E("rt_touch register err code: %d", result);
rt_hw_touch_register in touch.c (rt-thread\components\drivers\touch) :     LOG_I("rt_touch init success");
ulog.c (rt-thread\components\utilities\ulog) line 15 : #ifdef ULOG_USING_SYSLOG
ulog.c (rt-thread\components\utilities\ulog) line 19 : #ifdef ULOG_OUTPUT_FLOAT
ulog.c (rt-thread\components\utilities\ulog) line 23 : #ifdef ULOG_TIME_USING_TIMESTAMP
ulog.c (rt-thread\components\utilities\ulog) line 27 : #ifdef ULOG_USING_ASYNC_OUTPUT
ulog.c (rt-thread\components\utilities\ulog) line 34 : #ifndef ULOG_ASYNC_OUTPUT_STORE_LINES
ulog.c (rt-thread\components\utilities\ulog) line 35 : #define ULOG_ASYNC_OUTPUT_STORE_LINES  (ULOG_ASYNC_OUTPUT_BUF_SIZE * 3 / 2 / ULOG_LINE_BUF_SIZE)
ulog.c (rt-thread\components\utilities\ulog) line 38 : #ifdef ULOG_USING_COLOR
ulog.c (rt-thread\components\utilities\ulog) line 56 : #ifndef ULOG_COLOR_DEBUG
ulog.c (rt-thread\components\utilities\ulog) line 57 : #define ULOG_COLOR_DEBUG               NULL
ulog.c (rt-thread\components\utilities\ulog) line 59 : #ifndef ULOG_COLOR_INFO
ulog.c (rt-thread\components\utilities\ulog) line 60 : #define ULOG_COLOR_INFO                (F_GREEN)
ulog.c (rt-thread\components\utilities\ulog) line 62 : #ifndef ULOG_COLOR_WARN
ulog.c (rt-thread\components\utilities\ulog) line 63 : #define ULOG_COLOR_WARN                (F_YELLOW)
ulog.c (rt-thread\components\utilities\ulog) line 65 : #ifndef ULOG_COLOR_ERROR
ulog.c (rt-thread\components\utilities\ulog) line 66 : #define ULOG_COLOR_ERROR               (F_RED)
ulog.c (rt-thread\components\utilities\ulog) line 68 : #ifndef ULOG_COLOR_ASSERT
ulog.c (rt-thread\components\utilities\ulog) line 69 : #define ULOG_COLOR_ASSERT              (F_MAGENTA)
ulog.c (rt-thread\components\utilities\ulog) line 71 : #endif /* ULOG_USING_COLOR */
ulog.c (rt-thread\components\utilities\ulog) line 73 : #if ULOG_LINE_BUF_SIZE < 80
rt_ulog in ulog.c (rt-thread\components\utilities\ulog) :     char log_buf_th[ULOG_LINE_BUF_SIZE];
ulog.c (rt-thread\components\utilities\ulog) line 86 : #ifdef ULOG_USING_ISR_LOG
rt_ulog in ulog.c (rt-thread\components\utilities\ulog) :     char log_buf_isr[ULOG_LINE_BUF_SIZE];
ulog.c (rt-thread\components\utilities\ulog) line 90 : #endif /* ULOG_USING_ISR_LOG */
ulog.c (rt-thread\components\utilities\ulog) line 92 : #ifdef ULOG_USING_ASYNC_OUTPUT
ulog.c (rt-thread\components\utilities\ulog) line 98 : #ifdef ULOG_USING_FILTER
rt_ulog::{anonfilter} in ulog.c (rt-thread\components\utilities\ulog) :         char tag[ULOG_FILTER_TAG_MAX_LEN + 1];
rt_ulog::{anonfilter} in ulog.c (rt-thread\components\utilities\ulog) :         char keyword[ULOG_FILTER_KW_MAX_LEN + 1];
ulog.c (rt-thread\components\utilities\ulog) line 108 : #endif /* ULOG_USING_FILTER */
ulog.c (rt-thread\components\utilities\ulog) line 124 : #ifdef ULOG_USING_COLOR
ulog.c (rt-thread\components\utilities\ulog) line 128 :         ULOG_COLOR_ASSERT,
ulog.c (rt-thread\components\utilities\ulog) line 131 :         ULOG_COLOR_ERROR,
ulog.c (rt-thread\components\utilities\ulog) line 132 :         ULOG_COLOR_WARN,
ulog.c (rt-thread\components\utilities\ulog) line 134 :         ULOG_COLOR_INFO,
ulog.c (rt-thread\components\utilities\ulog) line 135 :         ULOG_COLOR_DEBUG,
ulog.c (rt-thread\components\utilities\ulog) line 137 : #endif /* ULOG_USING_COLOR */
ulog.c (rt-thread\components\utilities\ulog) line 142 : size_t ulog_strcpy(size_t cur_len, char *dst, const char *src)
ulog_strcpy in ulog.c (rt-thread\components\utilities\ulog) :         if (cur_len++ < ULOG_LINE_BUF_SIZE)
ulog.c (rt-thread\components\utilities\ulog) line 164 : size_t ulog_ultoa(char *s, unsigned long int n)
output_unlock in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_ISR_LOG
output_lock in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_ISR_LOG
ulog.c (rt-thread\components\utilities\ulog) line 214 : static char *get_log_buf(void)
get_log_buf in ulog.c (rt-thread\components\utilities\ulog) :         return ulog.log_buf_th;
get_log_buf in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_ISR_LOG
get_log_buf in ulog.c (rt-thread\components\utilities\ulog) :         return ulog.log_buf_isr;
get_log_buf in ulog.c (rt-thread\components\utilities\ulog) :         rt_kprintf("Error: Current mode not supported run in ISR. Please enable ULOG_USING_ISR_LOG.\n");
ulog.c (rt-thread\components\utilities\ulog) line 232 : RT_WEAK rt_size_t ulog_formater(char *log_buf, rt_uint32_t level, const char *tag, rt_bool_t newline,
ulog_formater in ulog.c (rt-thread\components\utilities\ulog) :     static rt_size_t log_len, newline_len;
ulog_formater in ulog.c (rt-thread\components\utilities\ulog) :     RT_ASSERT(log_buf);
ulog_formater in ulog.c (rt-thread\components\utilities\ulog) :     RT_ASSERT(level <= LOG_LVL_DBG);
ulog_formater in ulog.c (rt-thread\components\utilities\ulog) :     log_len = 0;
ulog_formater in ulog.c (rt-thread\components\utilities\ulog) :     newline_len = rt_strlen(ULOG_NEWLINE_SIGN);
ulog_formater in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_COLOR
ulog_formater in ulog.c (rt-thread\components\utilities\ulog) :         log_len += ulog_strcpy(log_len, log_buf + log_len, CSI_START);
ulog_formater in ulog.c (rt-thread\components\utilities\ulog) :         log_len += ulog_strcpy(log_len, log_buf + log_len, color_output_info[level]);
ulog.c (rt-thread\components\utilities\ulog) line 254 : #endif /* ULOG_USING_COLOR */
ulog.c (rt-thread\components\utilities\ulog) line 256 : #ifdef ULOG_OUTPUT_TIME
ulog.c (rt-thread\components\utilities\ulog) line 259 : #ifdef ULOG_TIME_USING_TIMESTAMP
ulog.c (rt-thread\components\utilities\ulog) line 267 :         rt_snprintf(log_buf + log_len, ULOG_LINE_BUF_SIZE - log_len, "%02d-%02d %02d:%02d:%02d.%03d", tm->tm_mon + 1,
ulog.c (rt-thread\components\utilities\ulog) line 270 :         rt_snprintf(log_buf + log_len, ULOG_LINE_BUF_SIZE - log_len, "%02d-%02d %02d:%02d:%02d", tm->tm_mon + 1,
ulog.c (rt-thread\components\utilities\ulog) line 277 :         log_buf[log_len] = '[';
ulog.c (rt-thread\components\utilities\ulog) line 278 :         tick_len = ulog_ultoa(log_buf + log_len + 1, rt_tick_get());
ulog.c (rt-thread\components\utilities\ulog) line 279 :         log_buf[log_len + 1 + tick_len] = ']';
ulog.c (rt-thread\components\utilities\ulog) line 280 :         log_buf[log_len + 1 + tick_len + 1] = '\0';
ulog.c (rt-thread\components\utilities\ulog) line 281 : #endif /* ULOG_TIME_USING_TIMESTAMP */
ulog.c (rt-thread\components\utilities\ulog) line 283 :         log_len += rt_strlen(log_buf + log_len);
ulog.c (rt-thread\components\utilities\ulog) line 285 : #endif /* ULOG_OUTPUT_TIME */
ulog.c (rt-thread\components\utilities\ulog) line 287 : #ifdef ULOG_OUTPUT_LEVEL
ulog.c (rt-thread\components\utilities\ulog) line 289 : #ifdef ULOG_OUTPUT_TIME
ulog.c (rt-thread\components\utilities\ulog) line 290 :     log_len += ulog_strcpy(log_len, log_buf + log_len, " ");
ulog.c (rt-thread\components\utilities\ulog) line 294 :     log_len += ulog_strcpy(log_len, log_buf + log_len, level_output_info[level]);
ulog.c (rt-thread\components\utilities\ulog) line 295 : #endif /* ULOG_OUTPUT_LEVEL */
ulog.c (rt-thread\components\utilities\ulog) line 297 : #ifdef ULOG_OUTPUT_TAG
ulog.c (rt-thread\components\utilities\ulog) line 299 : #if !defined(ULOG_OUTPUT_LEVEL) && defined(ULOG_OUTPUT_TIME)
ulog.c (rt-thread\components\utilities\ulog) line 300 :     log_len += ulog_strcpy(log_len, log_buf + log_len, " ");
ulog.c (rt-thread\components\utilities\ulog) line 304 :     log_len += ulog_strcpy(log_len, log_buf + log_len, tag);
ulog.c (rt-thread\components\utilities\ulog) line 305 : #endif /* ULOG_OUTPUT_TAG */
ulog.c (rt-thread\components\utilities\ulog) line 307 : #ifdef ULOG_OUTPUT_THREAD_NAME
ulog.c (rt-thread\components\utilities\ulog) line 311 : #if defined(ULOG_OUTPUT_TIME) || defined(ULOG_OUTPUT_LEVEL) || defined(ULOG_OUTPUT_TAG)
ulog.c (rt-thread\components\utilities\ulog) line 312 :         log_len += ulog_strcpy(log_len, log_buf + log_len, " ");
ulog.c (rt-thread\components\utilities\ulog) line 320 :             rt_strncpy(log_buf + log_len, rt_thread_self()->name, name_len);
ulog.c (rt-thread\components\utilities\ulog) line 321 :             log_len += name_len;
ulog.c (rt-thread\components\utilities\ulog) line 325 :             log_len += ulog_strcpy(log_len, log_buf + log_len, "ISR");
ulog.c (rt-thread\components\utilities\ulog) line 328 : #endif /* ULOG_OUTPUT_THREAD_NAME */
ulog.c (rt-thread\components\utilities\ulog) line 330 :     log_len += ulog_strcpy(log_len, log_buf + log_len, ": ");
ulog.c (rt-thread\components\utilities\ulog) line 332 : #ifdef ULOG_OUTPUT_FLOAT
ulog.c (rt-thread\components\utilities\ulog) line 333 :     fmt_result = vsnprintf(log_buf + log_len, ULOG_LINE_BUF_SIZE - log_len, format, args);
ulog.c (rt-thread\components\utilities\ulog) line 335 :     fmt_result = rt_vsnprintf(log_buf + log_len, ULOG_LINE_BUF_SIZE - log_len, format, args);
ulog.c (rt-thread\components\utilities\ulog) line 336 : #endif /* ULOG_OUTPUT_FLOAT */
ulog.c (rt-thread\components\utilities\ulog) line 339 :     if ((log_len + fmt_result <= ULOG_LINE_BUF_SIZE) && (fmt_result > -1))
ulog.c (rt-thread\components\utilities\ulog) line 341 :         log_len += fmt_result;
ulog.c (rt-thread\components\utilities\ulog) line 346 :         log_len = ULOG_LINE_BUF_SIZE;
ulog.c (rt-thread\components\utilities\ulog) line 350 : #ifdef ULOG_USING_COLOR
ulog.c (rt-thread\components\utilities\ulog) line 351 :     if (log_len + (sizeof(CSI_END) - 1) + newline_len > ULOG_LINE_BUF_SIZE)
ulog.c (rt-thread\components\utilities\ulog) line 354 :         log_len = ULOG_LINE_BUF_SIZE;
ulog.c (rt-thread\components\utilities\ulog) line 356 :         log_len -= (sizeof(CSI_END) - 1);
ulog.c (rt-thread\components\utilities\ulog) line 358 :     if (log_len + newline_len > ULOG_LINE_BUF_SIZE)
ulog.c (rt-thread\components\utilities\ulog) line 361 :         log_len = ULOG_LINE_BUF_SIZE;
ulog.c (rt-thread\components\utilities\ulog) line 362 : #endif /* ULOG_USING_COLOR */
ulog.c (rt-thread\components\utilities\ulog) line 364 :         log_len -= newline_len;
ulog.c (rt-thread\components\utilities\ulog) line 370 :         log_len += ulog_strcpy(log_len, log_buf + log_len, ULOG_NEWLINE_SIGN);
ulog.c (rt-thread\components\utilities\ulog) line 373 : #ifdef ULOG_USING_COLOR
ulog.c (rt-thread\components\utilities\ulog) line 377 :         log_len += ulog_strcpy(log_len, log_buf + log_len, CSI_END);
ulog.c (rt-thread\components\utilities\ulog) line 379 : #endif /* ULOG_USING_COLOR */
ulog.c (rt-thread\components\utilities\ulog) line 381 :     return log_len;
ulog.c (rt-thread\components\utilities\ulog) line 384 : void ulog_output_to_all_backend(rt_uint32_t level, const char *tag, rt_bool_t is_raw, const char *log, rt_size_t size)
ulog_output_to_all_backend in ulog.c (rt-thread\components\utilities\ulog) :     ulog_backend_t backend;
ulog_output_to_all_backend in ulog.c (rt-thread\components\utilities\ulog) :         backend = rt_slist_entry(node, struct ulog_backend, list);
ulog_output_to_all_backend in ulog.c (rt-thread\components\utilities\ulog) : #if !defined(ULOG_USING_COLOR) || defined(ULOG_USING_SYSLOG)
ulog_output_to_all_backend in ulog.c (rt-thread\components\utilities\ulog) : #endif /* !defined(ULOG_USING_COLOR) || defined(ULOG_USING_SYSLOG) */
ulog.c (rt-thread\components\utilities\ulog) line 420 : static void do_output(rt_uint32_t level, const char *tag, rt_bool_t is_raw, const char *log_buf, rt_size_t log_len)
do_output in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_ASYNC_OUTPUT
do_output in ulog.c (rt-thread\components\utilities\ulog) :     rt_rbb_blk_t log_blk;
do_output in ulog.c (rt-thread\components\utilities\ulog) :     ulog_frame_t log_frame;
do_output in ulog.c (rt-thread\components\utilities\ulog) :     log_blk = rt_rbb_blk_alloc(ulog.async_rbb, RT_ALIGN(sizeof(struct ulog_frame) + log_len, RT_ALIGN_SIZE));
do_output in ulog.c (rt-thread\components\utilities\ulog) :     if (log_blk)
do_output in ulog.c (rt-thread\components\utilities\ulog) :         log_frame = (ulog_frame_t) log_blk->buf;
do_output in ulog.c (rt-thread\components\utilities\ulog) :         log_frame->magic = ULOG_FRAME_MAGIC;
do_output in ulog.c (rt-thread\components\utilities\ulog) :         log_frame->is_raw = is_raw;
do_output in ulog.c (rt-thread\components\utilities\ulog) :         log_frame->level = level;
do_output in ulog.c (rt-thread\components\utilities\ulog) :         log_frame->log_len = log_len;
do_output in ulog.c (rt-thread\components\utilities\ulog) :         log_frame->tag = tag;
do_output in ulog.c (rt-thread\components\utilities\ulog) :         log_frame->log = (const char *)log_blk->buf + sizeof(struct ulog_frame);
do_output in ulog.c (rt-thread\components\utilities\ulog) :         rt_memcpy(log_blk->buf + sizeof(struct ulog_frame), log_buf, log_len);
do_output in ulog.c (rt-thread\components\utilities\ulog) :         rt_rbb_blk_put(log_blk);
do_output in ulog.c (rt-thread\components\utilities\ulog) :                     " please increase the ULOG_ASYNC_OUTPUT_BUF_SIZE option.\n");
do_output in ulog.c (rt-thread\components\utilities\ulog) :         ulog_output_to_all_backend(level, tag, is_raw, log_buf, log_len);
do_output in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_BACKEND_USING_CONSOLE
do_output in ulog.c (rt-thread\components\utilities\ulog) :         extern void ulog_console_backend_output(struct ulog_backend *backend, rt_uint32_t level, const char *tag,
do_output in ulog.c (rt-thread\components\utilities\ulog) :         ulog_console_backend_output(NULL, level, tag, is_raw, log_buf, log_len);
do_output in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_BACKEND_USING_CONSOLE */
do_output in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_ASYNC_OUTPUT */
ulog.c (rt-thread\components\utilities\ulog) line 484 : void ulog_voutput(rt_uint32_t level, const char *tag, rt_bool_t newline, const char *format, va_list args)
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     char *log_buf = NULL;
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     rt_size_t log_len = 0;
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #ifndef ULOG_USING_SYSLOG
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     RT_ASSERT(level <= LOG_LVL_DBG);
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     RT_ASSERT(LOG_PRI(level) <= LOG_DEBUG);
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_SYSLOG */
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_FILTER
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #ifndef ULOG_USING_SYSLOG
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     if (level > ulog.filter.level || level > ulog_tag_lvl_filter_get(tag))
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     if (((LOG_MASK(LOG_PRI(level)) & ulog.filter.level) == 0)
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :             || ((LOG_MASK(LOG_PRI(level)) & ulog_tag_lvl_filter_get(tag)) == 0))
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_SYSLOG */
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_FILTER */
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     log_buf = get_log_buf();
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #ifndef ULOG_USING_SYSLOG
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     log_len = ulog_formater(log_buf, level, tag, newline, format, args);
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     extern rt_size_t syslog_formater(char *log_buf, rt_uint8_t level, const char *tag, rt_bool_t newline, const char *format, va_list args);
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     log_len = syslog_formater(log_buf, level, tag, newline, format, args);
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_SYSLOG */
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_FILTER
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :         log_buf[log_len] = '\0';
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :         if (!rt_strstr(log_buf, ulog.filter.keyword))
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_FILTER */
ulog_voutput in ulog.c (rt-thread\components\utilities\ulog) :     do_output(level, tag, RT_FALSE, log_buf, log_len);
ulog.c (rt-thread\components\utilities\ulog) line 568 : void ulog_output(rt_uint32_t level, const char *tag, rt_bool_t newline, const char *format, ...)
ulog_output in ulog.c (rt-thread\components\utilities\ulog) :     ulog_voutput(level, tag, newline, format, args);
ulog.c (rt-thread\components\utilities\ulog) line 586 : void ulog_raw(const char *format, ...)
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) :     rt_size_t log_len = 0;
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) :     char *log_buf = NULL;
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) :     log_buf = get_log_buf();
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_OUTPUT_FLOAT
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) :     fmt_result = vsnprintf(log_buf, ULOG_LINE_BUF_SIZE, format, args);
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) :     fmt_result = rt_vsnprintf(log_buf, ULOG_LINE_BUF_SIZE, format, args);
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_OUTPUT_FLOAT */
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) :     if ((fmt_result > -1) && (fmt_result <= ULOG_LINE_BUF_SIZE))
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) :         log_len = fmt_result;
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) :         log_len = ULOG_LINE_BUF_SIZE;
ulog_raw in ulog.c (rt-thread\components\utilities\ulog) :     do_output(LOG_LVL_DBG, NULL, RT_TRUE, log_buf, log_len);
ulog.c (rt-thread\components\utilities\ulog) line 636 : void ulog_hexdump(const char *tag, rt_size_t width, rt_uint8_t *buf, rt_size_t size)
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :     rt_size_t log_len = 0, name_len = rt_strlen(tag);
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :     char *log_buf = NULL, dump_string[8];
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_FILTER
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) : #ifndef ULOG_USING_SYSLOG
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :     if (LOG_LVL_DBG > ulog.filter.level || LOG_LVL_DBG > ulog_tag_lvl_filter_get(tag))
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :     if ((LOG_MASK(LOG_DEBUG) & ulog.filter.level) == 0)
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_SYSLOG */
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_FILTER */
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :     log_buf = get_log_buf();
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :     for (i = 0, log_len = 0; i < size; i += width)
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :             log_len += ulog_strcpy(log_len, log_buf + log_len, "D/HEX ");
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :             log_len += ulog_strcpy(log_len, log_buf + log_len, tag);
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :             log_len += ulog_strcpy(log_len, log_buf + log_len, ": ");
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :             log_len = 6 + name_len + 2;
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :             rt_memset(log_buf, ' ', log_len);
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :         fmt_result = rt_snprintf(log_buf + log_len, ULOG_LINE_BUF_SIZE, "%04X-%04X: ", i, i + width);
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :         if ((fmt_result > -1) && (fmt_result <= ULOG_LINE_BUF_SIZE))
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :             log_len += fmt_result;
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :             log_len = ULOG_LINE_BUF_SIZE;
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :             log_len += ulog_strcpy(log_len, log_buf + log_len, dump_string);
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :                 log_len += ulog_strcpy(log_len, log_buf + log_len, " ");
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :         log_len += ulog_strcpy(log_len, log_buf + log_len, "  ");
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :                 log_len += ulog_strcpy(log_len, log_buf + log_len, dump_string);
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :         if (log_len + rt_strlen(ULOG_NEWLINE_SIGN) > ULOG_LINE_BUF_SIZE)
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :             log_len = ULOG_LINE_BUF_SIZE - rt_strlen(ULOG_NEWLINE_SIGN);
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :         log_len += ulog_strcpy(log_len, log_buf + log_len, ULOG_NEWLINE_SIGN);
ulog_hexdump in ulog.c (rt-thread\components\utilities\ulog) :         do_output(LOG_LVL_DBG, NULL, RT_TRUE, log_buf, log_len);
ulog.c (rt-thread\components\utilities\ulog) line 738 : #ifdef ULOG_USING_FILTER
ulog.c (rt-thread\components\utilities\ulog) line 745 :  *     ulog_set_filter_lvl("example", LOG_FILTER_LVL_SILENT);
ulog.c (rt-thread\components\utilities\ulog) line 747 :  *     ulog_set_filter_lvl("example", LOG_LVL_INFO);
ulog.c (rt-thread\components\utilities\ulog) line 749 :  *     ulog_set_filter_lvl("example", LOG_FILTER_LVL_ALL);
ulog.c (rt-thread\components\utilities\ulog) line 752 :  * @param level The filter level. When the level is LOG_FILTER_LVL_SILENT, the log enter silent mode.
ulog.c (rt-thread\components\utilities\ulog) line 753 :  *        When the level is LOG_FILTER_LVL_ALL, it will remove this tag's level filer.
ulog.c (rt-thread\components\utilities\ulog) line 760 : int ulog_tag_lvl_filter_set(const char *tag, rt_uint32_t level)
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :     ulog_tag_lvl_filter_t tag_lvl = NULL;
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :     if (level > LOG_FILTER_LVL_ALL)
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :     for (node = rt_slist_first(ulog_tag_lvl_list_get()); node; node = rt_slist_next(node))
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :         tag_lvl = rt_slist_entry(node, struct ulog_tag_lvl_filter, list);
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :         if (!rt_strncmp(tag_lvl->tag, tag, ULOG_FILTER_TAG_MAX_LEN))
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :         if (level == LOG_FILTER_LVL_ALL)
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :             rt_slist_remove(ulog_tag_lvl_list_get(), &tag_lvl->list);
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :         /* only add the new tag's level filer when level is not LOG_FILTER_LVL_ALL */
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :         if (level != LOG_FILTER_LVL_ALL)
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :             tag_lvl = (ulog_tag_lvl_filter_t)rt_malloc(sizeof(struct ulog_tag_lvl_filter));
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :                 rt_strncpy(tag_lvl->tag, tag, ULOG_FILTER_TAG_MAX_LEN);
ulog_tag_lvl_filter_set in ulog.c (rt-thread\components\utilities\ulog) :                 rt_slist_append(ulog_tag_lvl_list_get(), &tag_lvl->list);
ulog.c (rt-thread\components\utilities\ulog) line 836 : rt_uint32_t ulog_tag_lvl_filter_get(const char *tag)
ulog_tag_lvl_filter_get in ulog.c (rt-thread\components\utilities\ulog) :     ulog_tag_lvl_filter_t tag_lvl = NULL;
ulog_tag_lvl_filter_get in ulog.c (rt-thread\components\utilities\ulog) :     rt_uint32_t level = LOG_FILTER_LVL_ALL;
ulog_tag_lvl_filter_get in ulog.c (rt-thread\components\utilities\ulog) :     for (node = rt_slist_first(ulog_tag_lvl_list_get()); node; node = rt_slist_next(node))
ulog_tag_lvl_filter_get in ulog.c (rt-thread\components\utilities\ulog) :         tag_lvl = rt_slist_entry(node, struct ulog_tag_lvl_filter, list);
ulog_tag_lvl_filter_get in ulog.c (rt-thread\components\utilities\ulog) :         if (!rt_strncmp(tag_lvl->tag, tag, ULOG_FILTER_TAG_MAX_LEN))
ulog.c (rt-thread\components\utilities\ulog) line 868 : rt_slist_t *ulog_tag_lvl_list_get(void)
ulog.c (rt-thread\components\utilities\ulog) line 876 :  * @param level log level: LOG_LVL_ASSERT, LOG_LVL_ERROR, LOG_LVL_WARNING, LOG_LVL_INFO, LOG_LVL_DBG
ulog.c (rt-thread\components\utilities\ulog) line 877 :  *              LOG_FILTER_LVL_SILENT: disable all log output, except assert level
ulog.c (rt-thread\components\utilities\ulog) line 878 :  *              LOG_FILTER_LVL_ALL: enable all log output
ulog.c (rt-thread\components\utilities\ulog) line 880 : void ulog_global_filter_lvl_set(rt_uint32_t level)
ulog_global_filter_lvl_set in ulog.c (rt-thread\components\utilities\ulog) :     RT_ASSERT(level <= LOG_FILTER_LVL_ALL);
ulog.c (rt-thread\components\utilities\ulog) line 890 :  * @return log level: LOG_LVL_ASSERT, LOG_LVL_ERROR, LOG_LVL_WARNING, LOG_LVL_INFO, LOG_LVL_DBG
ulog.c (rt-thread\components\utilities\ulog) line 891 :  *              LOG_FILTER_LVL_SILENT: disable all log output, except assert level
ulog.c (rt-thread\components\utilities\ulog) line 892 :  *              LOG_FILTER_LVL_ALL: enable all log output
ulog.c (rt-thread\components\utilities\ulog) line 894 : rt_uint32_t ulog_global_filter_lvl_get(void)
ulog.c (rt-thread\components\utilities\ulog) line 904 : void ulog_global_filter_tag_set(const char *tag)
ulog_global_filter_tag_set in ulog.c (rt-thread\components\utilities\ulog) :     rt_strncpy(ulog.filter.tag, tag, ULOG_FILTER_TAG_MAX_LEN);
ulog.c (rt-thread\components\utilities\ulog) line 916 : const char *ulog_global_filter_tag_get(void)
ulog.c (rt-thread\components\utilities\ulog) line 926 : void ulog_global_filter_kw_set(const char *keyword)
ulog_global_filter_kw_set in ulog.c (rt-thread\components\utilities\ulog) :     rt_strncpy(ulog.filter.keyword, keyword, ULOG_FILTER_KW_MAX_LEN);
ulog.c (rt-thread\components\utilities\ulog) line 938 : const char *ulog_global_filter_kw_get(void)
ulog.c (rt-thread\components\utilities\ulog) line 946 : static void ulog_tag_lvl(uint8_t argc, char **argv)
ulog_tag_lvl in ulog.c (rt-thread\components\utilities\ulog) :         if ((atoi(argv[2]) <= LOG_FILTER_LVL_ALL) && (atoi(argv[2]) >= 0))
ulog_tag_lvl in ulog.c (rt-thread\components\utilities\ulog) :             ulog_tag_lvl_filter_set(argv[1], atoi(argv[2]));
ulog_tag_lvl in ulog.c (rt-thread\components\utilities\ulog) :             rt_kprintf("Please input correct level (0-%d).\n", LOG_FILTER_LVL_ALL);
ulog_tag_lvl in ulog.c (rt-thread\components\utilities\ulog) :         rt_kprintf("Please input: ulog_tag_lvl <tag> <level>.\n");
ulog_tag_lvl in ulog.c (rt-thread\components\utilities\ulog) : #ifndef ULOG_USING_SYSLOG
ulog_tag_lvl in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_SYSLOG */
MSH_CMD_EXPORT in ulog.c (rt-thread\components\utilities\ulog) : MSH_CMD_EXPORT(ulog_tag_lvl, Set ulog filter level by different tag.);
ulog.c (rt-thread\components\utilities\ulog) line 982 : static void ulog_lvl(uint8_t argc, char **argv)
ulog_lvl in ulog.c (rt-thread\components\utilities\ulog) :         if ((atoi(argv[1]) <= LOG_FILTER_LVL_ALL) && (atoi(argv[1]) >= 0))
ulog_lvl in ulog.c (rt-thread\components\utilities\ulog) :             ulog_global_filter_lvl_set(atoi(argv[1]));
ulog_lvl in ulog.c (rt-thread\components\utilities\ulog) :             rt_kprintf("Please input correct level (0-%d).\n", LOG_FILTER_LVL_ALL);
ulog_lvl in ulog.c (rt-thread\components\utilities\ulog) :         rt_kprintf("Please input: ulog_lvl <level>.\n");
ulog_lvl in ulog.c (rt-thread\components\utilities\ulog) : #ifndef ULOG_USING_SYSLOG
ulog_lvl in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_SYSLOG */
MSH_CMD_EXPORT in ulog.c (rt-thread\components\utilities\ulog) : MSH_CMD_EXPORT(ulog_lvl, Set ulog global filter level.);
ulog.c (rt-thread\components\utilities\ulog) line 1018 : static void ulog_tag(uint8_t argc, char **argv)
ulog_tag in ulog.c (rt-thread\components\utilities\ulog) :         if (rt_strlen(argv[1]) <= ULOG_FILTER_TAG_MAX_LEN)
ulog_tag in ulog.c (rt-thread\components\utilities\ulog) :             ulog_global_filter_tag_set(argv[1]);
ulog_tag in ulog.c (rt-thread\components\utilities\ulog) :             rt_kprintf("The tag length is too long. Max is %d.\n", ULOG_FILTER_TAG_MAX_LEN);
ulog_tag in ulog.c (rt-thread\components\utilities\ulog) :         ulog_global_filter_tag_set("");
ulog.c (rt-thread\components\utilities\ulog) line 1036 : MSH_CMD_EXPORT(ulog_tag, Set ulog global filter tag);
ulog.c (rt-thread\components\utilities\ulog) line 1038 : static void ulog_kw(uint8_t argc, char **argv)
ulog_kw in ulog.c (rt-thread\components\utilities\ulog) :         if (rt_strlen(argv[1]) <= ULOG_FILTER_KW_MAX_LEN)
ulog_kw in ulog.c (rt-thread\components\utilities\ulog) :             ulog_global_filter_kw_set(argv[1]);
ulog_kw in ulog.c (rt-thread\components\utilities\ulog) :             rt_kprintf("The keyword length is too long. Max is %d.\n", ULOG_FILTER_KW_MAX_LEN);
ulog_kw in ulog.c (rt-thread\components\utilities\ulog) :         ulog_global_filter_kw_set("");
ulog.c (rt-thread\components\utilities\ulog) line 1056 : MSH_CMD_EXPORT(ulog_kw, Set ulog global filter keyword);
ulog.c (rt-thread\components\utilities\ulog) line 1058 : static void ulog_filter(uint8_t argc, char **argv)
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) : #ifndef ULOG_USING_SYSLOG
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) :     const char *tag = ulog_global_filter_tag_get(), *kw = ulog_global_filter_kw_get();
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) :     ulog_tag_lvl_filter_t tag_lvl = NULL;
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) : #ifndef ULOG_USING_SYSLOG
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) :     rt_kprintf("level   : %s\n", lvl_name[ulog_global_filter_lvl_get()]);
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) :     rt_kprintf("level   : %d\n", ulog_global_filter_lvl_get());
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) :     if (rt_slist_isempty(ulog_tag_lvl_list_get()))
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) :         for (node = rt_slist_first(ulog_tag_lvl_list_get()); node; node = rt_slist_next(node))
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) :             tag_lvl = rt_slist_entry(node, struct ulog_tag_lvl_filter, list);
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) :             rt_kprintf("%-*.s: ", ULOG_FILTER_TAG_MAX_LEN, tag_lvl->tag);
ulog_filter in ulog.c (rt-thread\components\utilities\ulog) : #ifndef ULOG_USING_SYSLOG
ulog.c (rt-thread\components\utilities\ulog) line 1106 : MSH_CMD_EXPORT(ulog_filter, Show ulog filter settings);
ulog.c (rt-thread\components\utilities\ulog) line 1108 : #endif /* ULOG_USING_FILTER */
ulog.c (rt-thread\components\utilities\ulog) line 1110 : rt_err_t ulog_backend_register(ulog_backend_t backend, const char *name, rt_bool_t support_color)
ulog.c (rt-thread\components\utilities\ulog) line 1134 : rt_err_t ulog_backend_unregister(ulog_backend_t backend)
ulog.c (rt-thread\components\utilities\ulog) line 1153 : #ifdef ULOG_USING_ASYNC_OUTPUT
ulog.c (rt-thread\components\utilities\ulog) line 1157 :  * @note you must call this function when ULOG_ASYNC_OUTPUT_BY_THREAD is disable
ulog.c (rt-thread\components\utilities\ulog) line 1159 : void ulog_async_output(void)
ulog_async_output in ulog.c (rt-thread\components\utilities\ulog) :     rt_rbb_blk_t log_blk;
ulog_async_output in ulog.c (rt-thread\components\utilities\ulog) :     ulog_frame_t log_frame;
ulog_async_output in ulog.c (rt-thread\components\utilities\ulog) :     while ((log_blk = rt_rbb_blk_get(ulog.async_rbb)) != NULL)
ulog_async_output in ulog.c (rt-thread\components\utilities\ulog) :         log_frame = (ulog_frame_t) log_blk->buf;
ulog_async_output in ulog.c (rt-thread\components\utilities\ulog) :         if (log_frame->magic == ULOG_FRAME_MAGIC)
ulog_async_output in ulog.c (rt-thread\components\utilities\ulog) :             ulog_output_to_all_backend(log_frame->level, log_frame->tag, log_frame->is_raw, log_frame->log,
ulog_async_output in ulog.c (rt-thread\components\utilities\ulog) :                     log_frame->log_len);
ulog_async_output in ulog.c (rt-thread\components\utilities\ulog) :         rt_rbb_blk_free(ulog.async_rbb, log_blk);
ulog.c (rt-thread\components\utilities\ulog) line 1182 : void ulog_async_waiting_log(rt_int32_t time)
async_output_thread_entry in ulog.c (rt-thread\components\utilities\ulog) :     ulog_async_output();
async_output_thread_entry in ulog.c (rt-thread\components\utilities\ulog) :         ulog_async_waiting_log(RT_WAITING_FOREVER);
async_output_thread_entry in ulog.c (rt-thread\components\utilities\ulog) :         ulog_async_output();
ulog.c (rt-thread\components\utilities\ulog) line 1198 : #endif /* ULOG_USING_ASYNC_OUTPUT */
ulog.c (rt-thread\components\utilities\ulog) line 1203 : void ulog_flush(void)
ulog_flush in ulog.c (rt-thread\components\utilities\ulog) :     ulog_backend_t backend;
ulog_flush in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_ASYNC_OUTPUT
ulog_flush in ulog.c (rt-thread\components\utilities\ulog) :     ulog_async_output();
ulog_flush in ulog.c (rt-thread\components\utilities\ulog) :         backend = rt_slist_entry(node, struct ulog_backend, list);
ulog.c (rt-thread\components\utilities\ulog) line 1226 : int ulog_init(void)
ulog_init in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_FILTER
ulog_init in ulog.c (rt-thread\components\utilities\ulog) :     rt_slist_init(ulog_tag_lvl_list_get());
ulog_init in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_ASYNC_OUTPUT
ulog_init in ulog.c (rt-thread\components\utilities\ulog) :     RT_ASSERT(ULOG_ASYNC_OUTPUT_STORE_LINES >= 2);
ulog_init in ulog.c (rt-thread\components\utilities\ulog) :     ulog.async_rbb = rt_rbb_create(RT_ALIGN(ULOG_ASYNC_OUTPUT_BUF_SIZE, RT_ALIGN_SIZE), ULOG_ASYNC_OUTPUT_STORE_LINES);
ulog_init in ulog.c (rt-thread\components\utilities\ulog) :     ulog.async_th = rt_thread_create("ulog_async", async_output_thread_entry, &ulog, ULOG_ASYNC_OUTPUT_THREAD_STACK,
ulog_init in ulog.c (rt-thread\components\utilities\ulog) :             ULOG_ASYNC_OUTPUT_THREAD_PRIORITY, 20);
ulog_init in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_ASYNC_OUTPUT */
ulog_init in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_FILTER
ulog_init in ulog.c (rt-thread\components\utilities\ulog) :     ulog_global_filter_lvl_set(LOG_FILTER_LVL_ALL);
ulog.c (rt-thread\components\utilities\ulog) line 1273 : INIT_PREV_EXPORT(ulog_init);
ulog.c (rt-thread\components\utilities\ulog) line 1275 : void ulog_deinit(void)
ulog_deinit in ulog.c (rt-thread\components\utilities\ulog) :     ulog_backend_t backend;
ulog_deinit in ulog.c (rt-thread\components\utilities\ulog) :         backend = rt_slist_entry(node, struct ulog_backend, list);
ulog_deinit in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_FILTER
ulog_deinit in ulog.c (rt-thread\components\utilities\ulog) :         ulog_tag_lvl_filter_t tag_lvl;
ulog_deinit in ulog.c (rt-thread\components\utilities\ulog) :         for (node = rt_slist_first(ulog_tag_lvl_list_get()); node; node = rt_slist_next(node))
ulog_deinit in ulog.c (rt-thread\components\utilities\ulog) :             tag_lvl = rt_slist_entry(node, struct ulog_tag_lvl_filter, list);
ulog_deinit in ulog.c (rt-thread\components\utilities\ulog) : #endif /* ULOG_USING_FILTER */
ulog_deinit in ulog.c (rt-thread\components\utilities\ulog) : #ifdef ULOG_USING_ASYNC_OUTPUT
ulog.h (rt-thread\components\utilities\ulog) line 11 : #ifndef _ULOG_H_
ulog.h (rt-thread\components\utilities\ulog) line 12 : #define _ULOG_H_
ulog.h (rt-thread\components\utilities\ulog) line 15 : #include "ulog_def.h"
ulog.h (rt-thread\components\utilities\ulog) line 21 : #define ULOG_VERSION_STR               "0.1.1"
ulog.h (rt-thread\components\utilities\ulog) line 26 : int ulog_init(void);
ulog.h (rt-thread\components\utilities\ulog) line 27 : void ulog_deinit(void);
ulog.h (rt-thread\components\utilities\ulog) line 30 :  * output different level log by LOG_X API
ulog.h (rt-thread\components\utilities\ulog) line 32 :  * NOTE: The `LOG_TAG` and `LOG_LVL` must be defined before including the <ulog.h> when you want to use LOG_X API.
ulog.h (rt-thread\components\utilities\ulog) line 34 :  * #define LOG_TAG              "example"
ulog.h (rt-thread\components\utilities\ulog) line 35 :  * #define LOG_LVL              LOG_LVL_DBG
ulog.h (rt-thread\components\utilities\ulog) line 38 :  * Then you can using LOG_X API to output log
ulog.h (rt-thread\components\utilities\ulog) line 40 :  * LOG_D("this is a debug log!");
ulog.h (rt-thread\components\utilities\ulog) line 41 :  * LOG_E("this is a error log!");
ulog.h (rt-thread\components\utilities\ulog) line 43 : #define LOG_E(...)                     ulog_e(LOG_TAG, __VA_ARGS__)
ulog.h (rt-thread\components\utilities\ulog) line 44 : #define LOG_W(...)                     ulog_w(LOG_TAG, __VA_ARGS__)
ulog.h (rt-thread\components\utilities\ulog) line 45 : #define LOG_I(...)                     ulog_i(LOG_TAG, __VA_ARGS__)
ulog.h (rt-thread\components\utilities\ulog) line 46 : #define LOG_D(...)                     ulog_d(LOG_TAG, __VA_ARGS__)
ulog.h (rt-thread\components\utilities\ulog) line 47 : #define LOG_RAW(...)                   ulog_raw(__VA_ARGS__)
ulog.h (rt-thread\components\utilities\ulog) line 48 : #define LOG_HEX(name, width, buf, size)      ulog_hex(name, width, buf, size)
ulog.h (rt-thread\components\utilities\ulog) line 53 : rt_err_t ulog_backend_register(ulog_backend_t backend, const char *name, rt_bool_t support_color);
ulog.h (rt-thread\components\utilities\ulog) line 54 : rt_err_t ulog_backend_unregister(ulog_backend_t backend);
ulog.h (rt-thread\components\utilities\ulog) line 56 : #ifdef ULOG_USING_FILTER
ulog.h (rt-thread\components\utilities\ulog) line 60 : int ulog_tag_lvl_filter_set(const char *tag, rt_uint32_t level);
ulog.h (rt-thread\components\utilities\ulog) line 61 : rt_uint32_t ulog_tag_lvl_filter_get(const char *tag);
ulog.h (rt-thread\components\utilities\ulog) line 62 : rt_slist_t *ulog_tag_lvl_list_get(void);
ulog.h (rt-thread\components\utilities\ulog) line 63 : void ulog_global_filter_lvl_set(rt_uint32_t level);
ulog.h (rt-thread\components\utilities\ulog) line 64 : rt_uint32_t ulog_global_filter_lvl_get(void);
ulog.h (rt-thread\components\utilities\ulog) line 65 : void ulog_global_filter_tag_set(const char *tag);
ulog.h (rt-thread\components\utilities\ulog) line 66 : const char *ulog_global_filter_tag_get(void);
ulog.h (rt-thread\components\utilities\ulog) line 67 : void ulog_global_filter_kw_set(const char *keyword);
ulog.h (rt-thread\components\utilities\ulog) line 68 : const char *ulog_global_filter_kw_get(void);
ulog.h (rt-thread\components\utilities\ulog) line 69 : #endif /* ULOG_USING_FILTER */
ulog.h (rt-thread\components\utilities\ulog) line 74 : void ulog_flush(void);
ulog.h (rt-thread\components\utilities\ulog) line 76 : #ifdef ULOG_USING_ASYNC_OUTPUT
ulog.h (rt-thread\components\utilities\ulog) line 80 : void ulog_async_output(void);
ulog.h (rt-thread\components\utilities\ulog) line 81 : void ulog_async_waiting_log(rt_int32_t time);
ulog.h (rt-thread\components\utilities\ulog) line 87 : void ulog_hexdump(const char *tag, rt_size_t width, rt_uint8_t *buf, rt_size_t size);
ulog.h (rt-thread\components\utilities\ulog) line 90 :  * Another log output API. This API is more difficult to use than LOG_X API.
ulog.h (rt-thread\components\utilities\ulog) line 92 : void ulog_voutput(rt_uint32_t level, const char *tag, rt_bool_t newline, const char *format, va_list args);
ulog.h (rt-thread\components\utilities\ulog) line 93 : void ulog_output(rt_uint32_t level, const char *tag, rt_bool_t newline, const char *format, ...);
ulog.h (rt-thread\components\utilities\ulog) line 94 : void ulog_raw(const char *format, ...);
ulog.h (rt-thread\components\utilities\ulog) line 100 : #endif /* _ULOG_H_ */
ulog_def.h (rt-thread\components\utilities\ulog) line 11 : #ifndef _ULOG_DEF_H_
ulog_def.h (rt-thread\components\utilities\ulog) line 12 : #define _ULOG_DEF_H_
ulog_def.h (rt-thread\components\utilities\ulog) line 19 : #define LOG_LVL_ASSERT                 0
ulog_def.h (rt-thread\components\utilities\ulog) line 20 : #define LOG_LVL_ERROR                  3
ulog_def.h (rt-thread\components\utilities\ulog) line 21 : #define LOG_LVL_WARNING                4
ulog_def.h (rt-thread\components\utilities\ulog) line 22 : #define LOG_LVL_INFO                   6
ulog_def.h (rt-thread\components\utilities\ulog) line 23 : #define LOG_LVL_DBG                    7
ulog_def.h (rt-thread\components\utilities\ulog) line 26 : #ifndef ULOG_USING_SYSLOG
ulog_def.h (rt-thread\components\utilities\ulog) line 27 : #define LOG_FILTER_LVL_SILENT         0
ulog_def.h (rt-thread\components\utilities\ulog) line 28 : #define LOG_FILTER_LVL_ALL            7
ulog_def.h (rt-thread\components\utilities\ulog) line 30 : #define LOG_FILTER_LVL_SILENT         1
ulog_def.h (rt-thread\components\utilities\ulog) line 31 : #define LOG_FILTER_LVL_ALL            255
ulog_def.h (rt-thread\components\utilities\ulog) line 32 : #endif /* ULOG_USING_SYSLOG */
ulog_def.h (rt-thread\components\utilities\ulog) line 35 : #undef LOG_D
ulog_def.h (rt-thread\components\utilities\ulog) line 36 : #undef LOG_I
ulog_def.h (rt-thread\components\utilities\ulog) line 37 : #undef LOG_W
ulog_def.h (rt-thread\components\utilities\ulog) line 38 : #undef LOG_E
ulog_def.h (rt-thread\components\utilities\ulog) line 39 : #undef LOG_RAW
ulog_def.h (rt-thread\components\utilities\ulog) line 45 : #define DBG_ERROR                      LOG_LVL_ERROR
ulog_def.h (rt-thread\components\utilities\ulog) line 46 : #define DBG_WARNING                    LOG_LVL_WARNING
ulog_def.h (rt-thread\components\utilities\ulog) line 47 : #define DBG_INFO                       LOG_LVL_INFO
ulog_def.h (rt-thread\components\utilities\ulog) line 48 : #define DBG_LOG                        LOG_LVL_DBG
dbg_log in ulog_def.h (rt-thread\components\utilities\ulog) :     if ((level) <= LOG_LVL)                                \
dbg_log in ulog_def.h (rt-thread\components\utilities\ulog) :         ulog_output(level, LOG_TAG, RT_FALSE, __VA_ARGS__);\
ulog_def.h (rt-thread\components\utilities\ulog) line 55 : #if !defined(LOG_TAG)
ulog_def.h (rt-thread\components\utilities\ulog) line 58 :         #define LOG_TAG                DBG_TAG
ulog_def.h (rt-thread\components\utilities\ulog) line 60 :         #define LOG_TAG                DBG_SECTION_NAME
ulog_def.h (rt-thread\components\utilities\ulog) line 62 :         #define LOG_TAG                "NO_TAG"
ulog_def.h (rt-thread\components\utilities\ulog) line 64 : #endif /* !defined(LOG_TAG) */
ulog_def.h (rt-thread\components\utilities\ulog) line 66 : #if !defined(LOG_LVL)
ulog_def.h (rt-thread\components\utilities\ulog) line 69 :         #define LOG_LVL                DBG_LVL
ulog_def.h (rt-thread\components\utilities\ulog) line 71 :         #define LOG_LVL                DBG_LEVEL
ulog_def.h (rt-thread\components\utilities\ulog) line 73 :         #define LOG_LVL                LOG_LVL_DBG
ulog_def.h (rt-thread\components\utilities\ulog) line 75 : #endif /* !defined(LOG_LVL) */
ulog_def.h (rt-thread\components\utilities\ulog) line 77 : #if (LOG_LVL >= LOG_LVL_DBG) && (ULOG_OUTPUT_LVL >= LOG_LVL_DBG)
ulog_def.h (rt-thread\components\utilities\ulog) line 78 :     #define ulog_d(TAG, ...)           ulog_output(LOG_LVL_DBG, TAG, RT_TRUE, __VA_ARGS__)
ulog_def.h (rt-thread\components\utilities\ulog) line 80 :     #define ulog_d(TAG, ...)
ulog_def.h (rt-thread\components\utilities\ulog) line 81 : #endif /* (LOG_LVL >= LOG_LVL_DBG) && (ULOG_OUTPUT_LVL >= LOG_LVL_DBG) */
ulog_def.h (rt-thread\components\utilities\ulog) line 83 : #if (LOG_LVL >= LOG_LVL_INFO) && (ULOG_OUTPUT_LVL >= LOG_LVL_INFO)
ulog_def.h (rt-thread\components\utilities\ulog) line 84 :     #define ulog_i(TAG, ...)           ulog_output(LOG_LVL_INFO, TAG, RT_TRUE, __VA_ARGS__)
ulog_def.h (rt-thread\components\utilities\ulog) line 86 :     #define ulog_i(TAG, ...)
ulog_def.h (rt-thread\components\utilities\ulog) line 87 : #endif /* (LOG_LVL >= LOG_LVL_INFO) && (ULOG_OUTPUT_LVL >= LOG_LVL_INFO) */
ulog_def.h (rt-thread\components\utilities\ulog) line 89 : #if (LOG_LVL >= LOG_LVL_WARNING) && (ULOG_OUTPUT_LVL >= LOG_LVL_WARNING)
ulog_def.h (rt-thread\components\utilities\ulog) line 90 :     #define ulog_w(TAG, ...)           ulog_output(LOG_LVL_WARNING, TAG, RT_TRUE, __VA_ARGS__)
ulog_def.h (rt-thread\components\utilities\ulog) line 92 :     #define ulog_w(TAG, ...)
ulog_def.h (rt-thread\components\utilities\ulog) line 93 : #endif /* (LOG_LVL >= LOG_LVL_WARNING) && (ULOG_OUTPUT_LVL >= LOG_LVL_WARNING) */
ulog_def.h (rt-thread\components\utilities\ulog) line 95 : #if (LOG_LVL >= LOG_LVL_ERROR) && (ULOG_OUTPUT_LVL >= LOG_LVL_ERROR)
ulog_def.h (rt-thread\components\utilities\ulog) line 96 :     #define ulog_e(TAG, ...)           ulog_output(LOG_LVL_ERROR, TAG, RT_TRUE, __VA_ARGS__)
ulog_def.h (rt-thread\components\utilities\ulog) line 98 :     #define ulog_e(TAG, ...)
ulog_def.h (rt-thread\components\utilities\ulog) line 99 : #endif /* (LOG_LVL >= LOG_LVL_ERROR) && (ULOG_OUTPUT_LVL >= LOG_LVL_ERROR) */
ulog_def.h (rt-thread\components\utilities\ulog) line 101 : #if (LOG_LVL >= LOG_LVL_DBG) && (ULOG_OUTPUT_LVL >= LOG_LVL_DBG)
ulog_def.h (rt-thread\components\utilities\ulog) line 102 :     #define ulog_hex(TAG, width, buf, size)     ulog_hexdump(TAG, width, buf, size)
ulog_def.h (rt-thread\components\utilities\ulog) line 104 :     #define ulog_hex(TAG, width, buf, size)
ulog_def.h (rt-thread\components\utilities\ulog) line 105 : #endif /* (LOG_LVL >= LOG_LVL_DBG) && (ULOG_OUTPUT_LVL >= LOG_LVL_DBG) */    
ulog_def.h (rt-thread\components\utilities\ulog) line 108 : #ifdef ULOG_ASSERT_ENABLE
ulog_def.h (rt-thread\components\utilities\ulog) line 109 :     #define ULOG_ASSERT(EXPR)                                                 \
ULOG_ASSERT in ulog_def.h (rt-thread\components\utilities\ulog) :         ulog_output(LOG_LVL_ASSERT, LOG_TAG, RT_TRUE, "(%s) has assert failed at %s:%ld.", #EXPR, __FUNCTION__, __LINE__); \
ULOG_ASSERT in ulog_def.h (rt-thread\components\utilities\ulog) :         ulog_flush();                                                         \
ulog_def.h (rt-thread\components\utilities\ulog) line 117 :     #define ULOG_ASSERT(EXPR)
ulog_def.h (rt-thread\components\utilities\ulog) line 122 :     #define ASSERT           ULOG_ASSERT
ulog_def.h (rt-thread\components\utilities\ulog) line 127 : #undef log_e
ulog_def.h (rt-thread\components\utilities\ulog) line 128 : #undef log_w
ulog_def.h (rt-thread\components\utilities\ulog) line 129 : #undef log_i
ulog_def.h (rt-thread\components\utilities\ulog) line 130 : #undef log_d
ulog_def.h (rt-thread\components\utilities\ulog) line 131 : #undef log_v
ulog_def.h (rt-thread\components\utilities\ulog) line 132 : #undef ELOG_LVL_ASSERT
ulog_def.h (rt-thread\components\utilities\ulog) line 133 : #undef ELOG_LVL_ERROR
ulog_def.h (rt-thread\components\utilities\ulog) line 134 : #undef ELOG_LVL_WARN
ulog_def.h (rt-thread\components\utilities\ulog) line 135 : #undef ELOG_LVL_INFO
ulog_def.h (rt-thread\components\utilities\ulog) line 136 : #undef ELOG_LVL_DEBUG
ulog_def.h (rt-thread\components\utilities\ulog) line 137 : #undef ELOG_LVL_VERBOSE
ulog_def.h (rt-thread\components\utilities\ulog) line 139 : #define log_e                          LOG_E
ulog_def.h (rt-thread\components\utilities\ulog) line 140 : #define log_w                          LOG_W
ulog_def.h (rt-thread\components\utilities\ulog) line 141 : #define log_i                          LOG_I
ulog_def.h (rt-thread\components\utilities\ulog) line 142 : #define log_d                          LOG_D
ulog_def.h (rt-thread\components\utilities\ulog) line 143 : #define log_v                          LOG_D
ulog_def.h (rt-thread\components\utilities\ulog) line 144 : #define log_raw                        LOG_RAW
ulog_def.h (rt-thread\components\utilities\ulog) line 145 : #define log_hex                        LOG_HEX    
ulog_def.h (rt-thread\components\utilities\ulog) line 146 : #define ELOG_LVL_ASSERT                LOG_LVL_ASSERT
ulog_def.h (rt-thread\components\utilities\ulog) line 147 : #define ELOG_LVL_ERROR                 LOG_LVL_ERROR
ulog_def.h (rt-thread\components\utilities\ulog) line 148 : #define ELOG_LVL_WARN                  LOG_LVL_WARNING
ulog_def.h (rt-thread\components\utilities\ulog) line 149 : #define ELOG_LVL_INFO                  LOG_LVL_INFO
ulog_def.h (rt-thread\components\utilities\ulog) line 150 : #define ELOG_LVL_DEBUG                 LOG_LVL_DBG
ulog_def.h (rt-thread\components\utilities\ulog) line 151 : #define ELOG_LVL_VERBOSE               LOG_LVL_DBG
ulog_def.h (rt-thread\components\utilities\ulog) line 154 : #ifndef ULOG_OUTPUT_LVL
ulog_def.h (rt-thread\components\utilities\ulog) line 155 : #define ULOG_OUTPUT_LVL                LOG_LVL_DBG
ulog_def.h (rt-thread\components\utilities\ulog) line 159 : #ifndef ULOG_LINE_BUF_SIZE
ulog_def.h (rt-thread\components\utilities\ulog) line 160 : #define ULOG_LINE_BUF_SIZE             128
ulog_def.h (rt-thread\components\utilities\ulog) line 164 : #ifndef ULOG_FILTER_TAG_MAX_LEN
ulog_def.h (rt-thread\components\utilities\ulog) line 165 : #define ULOG_FILTER_TAG_MAX_LEN        23
ulog_def.h (rt-thread\components\utilities\ulog) line 169 : #ifndef ULOG_FILTER_KW_MAX_LEN
ulog_def.h (rt-thread\components\utilities\ulog) line 170 : #define ULOG_FILTER_KW_MAX_LEN         15
ulog_def.h (rt-thread\components\utilities\ulog) line 173 : #ifndef ULOG_NEWLINE_SIGN
ulog_def.h (rt-thread\components\utilities\ulog) line 174 : #define ULOG_NEWLINE_SIGN              "\r\n"
ulog_def.h (rt-thread\components\utilities\ulog) line 177 : #define ULOG_FRAME_MAGIC               0x10
ulog_def.h (rt-thread\components\utilities\ulog) line 180 : struct ulog_tag_lvl_filter
ulog_tag_lvl_filter in ulog_def.h (rt-thread\components\utilities\ulog) :     char tag[ULOG_FILTER_TAG_MAX_LEN + 1];
ulog_def.h (rt-thread\components\utilities\ulog) line 186 : typedef struct ulog_tag_lvl_filter *ulog_tag_lvl_filter_t;
ulog_def.h (rt-thread\components\utilities\ulog) line 188 : struct ulog_frame
ulog_frame in ulog_def.h (rt-thread\components\utilities\ulog) :     rt_uint32_t log_len:23;
ulog_def.h (rt-thread\components\utilities\ulog) line 198 : typedef struct ulog_frame *ulog_frame_t;
ulog_def.h (rt-thread\components\utilities\ulog) line 200 : struct ulog_backend
ulog_backend in ulog_def.h (rt-thread\components\utilities\ulog) :     void (*init)  (struct ulog_backend *backend);
ulog_backend in ulog_def.h (rt-thread\components\utilities\ulog) :     void (*output)(struct ulog_backend *backend, rt_uint32_t level, const char *tag, rt_bool_t is_raw, const char *log, size_t len);
ulog_backend in ulog_def.h (rt-thread\components\utilities\ulog) :     void (*flush) (struct ulog_backend *backend);
ulog_backend in ulog_def.h (rt-thread\components\utilities\ulog) :     void (*deinit)(struct ulog_backend *backend);
ulog_def.h (rt-thread\components\utilities\ulog) line 210 : typedef struct ulog_backend *ulog_backend_t;
ulog_def.h (rt-thread\components\utilities\ulog) line 216 : #endif /* _ULOG_DEF_H_ */
utest.c (rt-thread\components\utilities\utest) line 45 : static rt_uint8_t utest_log_lv = UTEST_LOG_ALL;
utest.c (rt-thread\components\utilities\utest) line 55 : void utest_log_lv_set(rt_uint8_t lv)
utest_log_lv_set in utest.c (rt-thread\components\utilities\utest) :     if (lv == UTEST_LOG_ALL || lv == UTEST_LOG_ASSERT)
utest_log_lv_set in utest.c (rt-thread\components\utilities\utest) :         utest_log_lv = lv;
utest_init in utest.c (rt-thread\components\utilities\utest) :     LOG_I("utest is initialize success.");
utest_init in utest.c (rt-thread\components\utilities\utest) :     LOG_I("total utest testcase num: (%d)", tc_num);
utest_tc_list in utest.c (rt-thread\components\utilities\utest) :     LOG_I("Commands list : ");
utest_tc_list in utest.c (rt-thread\components\utilities\utest) :         LOG_I("[testcase name]:%s; [run timeout]:%d", tc_table[i].name, tc_table[i].run_timeout);
utest_run in utest.c (rt-thread\components\utilities\utest) :         LOG_I("[==========] [ utest    ] loop %d/%d", index + 1, tc_loop);
utest_run in utest.c (rt-thread\components\utilities\utest) :         LOG_I("[==========] [ utest    ] started");
utest_run in utest.c (rt-thread\components\utilities\utest) :             LOG_I("[----------] [ testcase ] (%s) started", tc_table[i].name);
utest_run in utest.c (rt-thread\components\utilities\utest) :                     LOG_E("[  FAILED  ] [ result   ] testcase (%s)", tc_table[i].name);
utest_run in utest.c (rt-thread\components\utilities\utest) :                     LOG_I("[  PASSED  ] [ result   ] testcase (%s)", tc_table[i].name);
utest_run in utest.c (rt-thread\components\utilities\utest) :                     LOG_E("[  FAILED  ] [ result   ] testcase (%s)", tc_table[i].name);
utest_run in utest.c (rt-thread\components\utilities\utest) :                 LOG_E("[  FAILED  ] [ result   ] testcase (%s)", tc_table[i].name);
utest_run in utest.c (rt-thread\components\utilities\utest) :                     LOG_E("[  FAILED  ] [ result   ] testcase (%s)", tc_table[i].name);
utest_run in utest.c (rt-thread\components\utilities\utest) :             LOG_I("[----------] [ testcase ] (%s) finished", tc_table[i].name);
utest_run in utest.c (rt-thread\components\utilities\utest) :             LOG_I("[==========] [ utest    ] Not find (%s)", utest_name);
utest_run in utest.c (rt-thread\components\utilities\utest) :             LOG_I("[==========] [ utest    ] finished");
utest_run in utest.c (rt-thread\components\utilities\utest) :         LOG_I("[==========] [ utest    ] finished");
utest_testcase_run in utest.c (rt-thread\components\utilities\utest) :         LOG_E("[  error   ] at (%s:%d), in param error.", __func__, __LINE__);
utest_unit_run in utest.c (rt-thread\components\utilities\utest) :     // LOG_I("[==========] utest unit name: (%s)", unit_func_name);
utest_assert in utest.c (rt-thread\components\utilities\utest) :         LOG_E("[  ASSERT  ] [ unit     ] at (%s); func: (%s:%d); msg: (%s)", file_basename(file), func, line, msg);
utest_assert in utest.c (rt-thread\components\utilities\utest) :         if (utest_log_lv == UTEST_LOG_ALL)
utest_assert in utest.c (rt-thread\components\utilities\utest) :             LOG_D("[    OK    ] [ unit     ] (%s:%d) is passed", func, line);
utest_log.h (rt-thread\components\utilities\utest) line 11 : #ifndef __UTEST_LOG_H__
utest_log.h (rt-thread\components\utilities\utest) line 12 : #define __UTEST_LOG_H__
utest_log.h (rt-thread\components\utilities\utest) line 29 : #define UTEST_LOG_ALL    (1u)
utest_log.h (rt-thread\components\utilities\utest) line 30 : #define UTEST_LOG_ASSERT (2u)
utest_log.h (rt-thread\components\utilities\utest) line 32 : void utest_log_lv_set(rt_uint8_t lv);
utest_log.h (rt-thread\components\utilities\utest) line 34 : #endif /* __UTEST_LOG_H__ */
utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) line 73 : static void ppp_log_write(int level, char *buf);
utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) line 427 :  * log_packet - format a packet and log it.
utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) line 431 : log_packet(p, len, prefix, level)
utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) line 516 : 		ppp_log_write(llevel, line);
utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) line 550 : 		ppp_log_write(llevel, line);
utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) line 556 : 		ppp_log_write(llevel, p);
ppp_logit in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     ppp_log_write(level, buf);
utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) line 614 : static void ppp_log_write(int level, char *buf) {
ppp_log_write in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     if (log_to_fd >= 0 && (level != LOG_DEBUG || debug)) {
ppp_log_write in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	if (write(log_to_fd, buf, n) != n
ppp_log_write in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	    || write(log_to_fd, "\n", 1) != 1)
ppp_log_write in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) : 	    log_to_fd = -1;
ppp_fatal in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     ppp_logit(LOG_ERR, fmt, pvar);
ppp_error in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     ppp_logit(LOG_ERR, fmt, pvar);
ppp_warn in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     ppp_logit(LOG_WARNING, fmt, pvar);
ppp_notice in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     ppp_logit(LOG_NOTICE, fmt, pvar);
ppp_info in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     ppp_logit(LOG_INFO, fmt, pvar);
ppp_dbglog in utils.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     ppp_logit(LOG_DEBUG, fmt, pvar);
utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) line 71 : static void ppp_log_write(int level, char *buf);
utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) line 425 :  * log_packet - format a packet and log it.
utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) line 429 : log_packet(p, len, prefix, level)
utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) line 514 : 		ppp_log_write(llevel, line);
utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) line 548 : 		ppp_log_write(llevel, line);
utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) line 554 : 		ppp_log_write(llevel, p);
ppp_logit in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     ppp_log_write(level, buf);
utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) line 612 : static void ppp_log_write(int level, char *buf) {
ppp_log_write in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     if (log_to_fd >= 0 && (level != LOG_DEBUG || debug)) {
ppp_log_write in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 	if (write(log_to_fd, buf, n) != n
ppp_log_write in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 	    || write(log_to_fd, "\n", 1) != 1)
ppp_log_write in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) : 	    log_to_fd = -1;
ppp_fatal in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     ppp_logit(LOG_ERR, fmt, pvar);
ppp_error in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     ppp_logit(LOG_ERR, fmt, pvar);
ppp_warn in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     ppp_logit(LOG_WARNING, fmt, pvar);
ppp_notice in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     ppp_logit(LOG_NOTICE, fmt, pvar);
ppp_info in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     ppp_logit(LOG_INFO, fmt, pvar);
ppp_dbglog in utils.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     ppp_logit(LOG_DEBUG, fmt, pvar);
vj_compress_tcp in vj.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("vj_compress_tcp: header len %d spans buffers\n", hlen));
vj_uncompress_uncomp in vj.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n", 
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: bad cid=%d\n", *cp));
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: tossing\n"));
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: head buffer %d too short %d\n", 
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("vj_uncompress_tcp: realign failed\n"));
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-1.4.1\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("vj_uncompress_tcp: prepend failed\n"));
vj_compress_tcp in vj.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("vj_compress_tcp: header len %d spans buffers\n", hlen));
vj_uncompress_uncomp in vj.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n",
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: bad cid=%d\n", *cp));
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: tossing\n"));
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: head buffer %d too short %d\n",
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("vj_uncompress_tcp: realign failed\n"));
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.0.2\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("vj_uncompress_tcp: prepend failed\n"));
vj_compress_tcp in vj.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("vj_compress_tcp: header len %d spans buffers\n", hlen));
vj_uncompress_uncomp in vj.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n",
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: bad cid=%d\n", *cp));
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: tossing\n"));
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :     PPPDEBUG(LOG_INFO, ("vj_uncompress_tcp: head buffer %d too short %d\n",
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("vj_uncompress_tcp: realign failed\n"));
vj_uncompress_tcp in vj.c (rt-thread\components\net\lwip-2.1.0\src\netif\ppp) :       PPPDEBUG(LOG_WARNING, ("vj_uncompress_tcp: prepend failed\n"));
vmm_context.c (rt-thread\components\vmm) line 16 : #include <log_trace.h>
rt_wlan_cfg_cache_refresh in wlan_cfg.c (rt-thread\components\drivers\wlan) :     LOG_D("head->magic:0x%08x  RT_WLAN_CFG_MAGIC:0x%08x", head->magic, RT_WLAN_CFG_MAGIC);
rt_wlan_cfg_cache_refresh in wlan_cfg.c (rt-thread\components\drivers\wlan) :     LOG_D("head->len:%d len:%d", head->len, len);
rt_wlan_cfg_cache_refresh in wlan_cfg.c (rt-thread\components\drivers\wlan) :     LOG_D("head->num:%d num:%d", head->num, (len - sizeof(struct cfg_save_info_head)) / sizeof(struct rt_wlan_cfg_info));
rt_wlan_cfg_cache_refresh in wlan_cfg.c (rt-thread\components\drivers\wlan) :     LOG_D("hred->crc:0x%04x crc:0x%04x", head->crc, crc);
rt_wlan_dev_init in wlan_dev.c (rt-thread\components\drivers\wlan) :     LOG_D("F:%s L:%d is run device:0x%08x mode:%d", __FUNCTION__, __LINE__, device, mode);
rt_wlan_dev_init in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d Parameter Wrongful device:0x%08x mode:%d", __FUNCTION__, __LINE__, device, mode);
rt_wlan_dev_init in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d This wlan device can only be set to sta mode!", __FUNCTION__, __LINE__);
rt_wlan_dev_init in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d This wlan device can only be set to ap mode!", __FUNCTION__, __LINE__);
rt_wlan_dev_init in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_E("L:%d wlan init failed", __LINE__);
rt_wlan_dev_init in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_E("L:%d wlan config mode failed", __LINE__);
rt_wlan_dev_connect in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_E("L:%d password or ssid is to long", __LINE__);
rt_wlan_dev_ap_start in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_E("L:%d password or ssid is to long", __LINE__);
rt_wlan_dev_scan in wlan_dev.c (rt-thread\components\drivers\wlan) :             LOG_E("L:%d ssid is to long", __LINE__);
_rt_wlan_dev_init in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_I("wlan init success");
_rt_wlan_dev_init in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_I("wlan init failed");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_MODE, "RT_WLAN_CMD_MODE");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_SCAN, "RT_WLAN_CMD_SCAN");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_JOIN, "RT_WLAN_CMD_JOIN");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_SOFTAP, "RT_WLAN_CMD_SOFTAP");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_DISCONNECT, "RT_WLAN_CMD_DISCONNECT");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_AP_STOP, "RT_WLAN_CMD_AP_STOP");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_AP_DEAUTH, "RT_WLAN_CMD_AP_DEAUTH");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_SCAN_STOP, "RT_WLAN_CMD_SCAN_STOP");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_GET_RSSI, "RT_WLAN_CMD_GET_RSSI");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_SET_POWERSAVE, "RT_WLAN_CMD_SET_POWERSAVE");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_GET_POWERSAVE, "RT_WLAN_CMD_GET_POWERSAVE");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_CFG_PROMISC, "RT_WLAN_CMD_CFG_PROMISC");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_CFG_FILTER, "RT_WLAN_CMD_CFG_FILTER");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_SET_CHANNEL, "RT_WLAN_CMD_SET_CHANNEL");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_GET_CHANNEL, "RT_WLAN_CMD_GET_CHANNEL");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_SET_COUNTRY, "RT_WLAN_CMD_SET_COUNTRY");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_GET_COUNTRY, "RT_WLAN_CMD_GET_COUNTRY");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_SET_MAC, "RT_WLAN_CMD_SET_MAC");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, RT_WLAN_CMD_GET_MAC, "RT_WLAN_CMD_GET_MAC");
_rt_wlan_dev_control in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_D("%s %d cmd[%d]:%s  run......", __FUNCTION__, __LINE__, -1, "UNKUOWN");
rt_wlan_dev_register in wlan_dev.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d parameter Wrongful", __FUNCTION__, __LINE__);
rt_wlan_dev_register in wlan_dev.c (rt-thread\components\drivers\wlan) :     LOG_D("F:%s L:%d run", __FUNCTION__, __LINE__);
netif_is_ready in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_W("F:%s L:%d ip addr type not support", __FUNCTION__, __LINE__);
netif_is_ready in wlan_lwip.c (rt-thread\components\drivers\wlan) :     LOG_I("Got IP address : %s", str);
netif_set_connected in wlan_lwip.c (rt-thread\components\drivers\wlan) :             LOG_D("F:%s L:%d dhcp start run", __FUNCTION__, __LINE__);
netif_set_connected in wlan_lwip.c (rt-thread\components\drivers\wlan) :             LOG_D("F:%s L:%d dhcpd start run", __FUNCTION__, __LINE__);
netif_set_connected in wlan_lwip.c (rt-thread\components\drivers\wlan) :             LOG_D("F:%s L:%d dhcp stop run", __FUNCTION__, __LINE__);
netif_set_connected in wlan_lwip.c (rt-thread\components\drivers\wlan) :             LOG_D("F:%s L:%d dhcpd stop run", __FUNCTION__, __LINE__);
rt_wlan_lwip_event_handle in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_D("event: CONNECT");
rt_wlan_lwip_event_handle in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_D("event: DISCONNECT");
rt_wlan_lwip_event_handle in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_D("event: AP_START");
rt_wlan_lwip_event_handle in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_D("event: AP_STOP");
rt_wlan_lwip_event_handle in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_D("event: ASSOCIATED");
rt_wlan_lwip_event_handle in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_D("event: DISASSOCIATED");
rt_wlan_lwip_event_handle in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_D("event: UNKNOWN");
rt_wlan_lwip_protocol_control in wlan_lwip.c (rt-thread\components\drivers\wlan) :     LOG_D("F:%s L:%d device:0x%08x user_data:0x%08x", __FUNCTION__, __LINE__, eth_dev, eth_dev->parent.user_data);
rt_wlan_lwip_protocol_recv in wlan_lwip.c (rt-thread\components\drivers\wlan) :     LOG_D("F:%s L:%d run", __FUNCTION__, __LINE__);
rt_wlan_lwip_protocol_recv in wlan_lwip.c (rt-thread\components\drivers\wlan) :             LOG_D("F:%s L:%d wait for pbuf_alloc!", __FUNCTION__, __LINE__);
rt_wlan_lwip_protocol_recv in wlan_lwip.c (rt-thread\components\drivers\wlan) :                 LOG_W("F:%s L:%d pbuf allocate fail!!!", __FUNCTION__, __LINE__);
rt_wlan_lwip_protocol_recv in wlan_lwip.c (rt-thread\components\drivers\wlan) :             LOG_D("F:%s L:%d IP input error", __FUNCTION__, __LINE__);
rt_wlan_lwip_protocol_recv in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_D("F:%s L:%d netif iput success! len:%d", __FUNCTION__, __LINE__, len);
rt_wlan_lwip_protocol_send in wlan_lwip.c (rt-thread\components\drivers\wlan) :     LOG_D("F:%s L:%d run", __FUNCTION__, __LINE__);
rt_wlan_lwip_protocol_send in wlan_lwip.c (rt-thread\components\drivers\wlan) :             LOG_D("F:%s L:%d run len:%d", __FUNCTION__, __LINE__, p->tot_len);
rt_wlan_lwip_protocol_send in wlan_lwip.c (rt-thread\components\drivers\wlan) :             LOG_E("F:%s L:%d malloc out_buf fail\n", __FUNCTION__, __LINE__);
rt_wlan_lwip_protocol_send in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_D("F:%s L:%d run len:%d", __FUNCTION__, __LINE__, p->tot_len);
rt_wlan_lwip_protocol_register in wlan_lwip.c (rt-thread\components\drivers\wlan) :     LOG_D("F:%s L:%d is run wlan:0x%08x", __FUNCTION__, __LINE__, wlan);
rt_wlan_lwip_protocol_register in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d not find Empty name", __FUNCTION__, __LINE__, eth_name);
rt_wlan_lwip_protocol_register in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d open wlan failed", __FUNCTION__, __LINE__);
rt_wlan_lwip_protocol_register in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d malloc mem failed", __FUNCTION__, __LINE__);
rt_wlan_lwip_protocol_register in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_E("eth device init failed");
rt_wlan_lwip_protocol_register in wlan_lwip.c (rt-thread\components\drivers\wlan) :     LOG_I("eth device init ok name:%s", eth_name);
rt_wlan_lwip_protocol_unregister in wlan_lwip.c (rt-thread\components\drivers\wlan) :     LOG_D("F:%s L:%d is run wlan:0x%08x", __FUNCTION__, __LINE__, wlan);
rt_wlan_lwip_init in wlan_lwip.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d protocol regisetr failed", __FUNCTION__, __LINE__);
wlan_mgnt.c (rt-thread\components\drivers\wlan) line 33 : #define RT_WLAN_LOG_D(_fmt, ...) LOG_D("L:%d "_fmt"", __LINE__, ##__VA_ARGS__)
wlan_mgnt.c (rt-thread\components\drivers\wlan) line 34 : #define RT_WLAN_LOG_I(...) LOG_I(__VA_ARGS__)
wlan_mgnt.c (rt-thread\components\drivers\wlan) line 35 : #define RT_WLAN_LOG_W(_fmt, ...) LOG_W("F:%s L:%d "_fmt"", __FUNCTION__, __LINE__, ##__VA_ARGS__)
wlan_mgnt.c (rt-thread\components\drivers\wlan) line 36 : #define RT_WLAN_LOG_E(_fmt, ...) LOG_E("F:%s L:%d "_fmt"", __FUNCTION__, __LINE__, ##__VA_ARGS__)
rt_wlan_mgnt_work in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("wlan work thread run user callback, event:%d", msg->event);
rt_wlan_mgnt_work in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_D("run save config! ssid:%s len%d", _sta_mgnt.info.ssid.val, _sta_mgnt.info.ssid.len);
rt_wlan_send_to_thread in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("F:%s is run event:%d", __FUNCTION__, event);
rt_wlan_send_to_thread in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("wlan mgnt send msg err! No memory");
rt_wlan_send_to_thread in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("wlan mgnt do work fail");
rt_wlan_scan_result_cache in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("ssid:%s len:%d mac:%02x:%02x:%02x:%02x:%02x:%02x", info->ssid.val, info->ssid.len,
rt_wlan_scan_result_cache in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("wlan info malloc failed!");
rt_wlan_sta_info_add in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_E("sta list malloc failed!");
rt_wlan_sta_info_add in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("sta associated mac:%02x:%02x:%02x:%02x:%02x:%02x",
rt_wlan_sta_info_del in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("sta exit mac:%02x:%02x:%02x:%02x:%02x:%02x",
rt_wlan_sta_info_del_all in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_W("\n\n!!!Program runing exception!!!\n\n");
rt_wlan_auto_connect_run in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("F:%s is run", __FUNCTION__);
rt_wlan_auto_connect_run in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("not connection");
rt_wlan_auto_connect_run in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("read cfg fail");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: CONNECT");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("wifi connect success ssid:%s", &_sta_mgnt.info.ssid.val[0]);
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: CONNECT_FAIL");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: DISCONNECT");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: AP_START");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: AP_STOP");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_W("AP_STOP event handle fail");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: ASSOCIATED");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_W("AP_ASSOCIATED event handle fail");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: DISASSOCIATED");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_W("AP_DISASSOCIATED event handle fail");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: AP_ASSOCIATE_FAILED");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: SCAN_REPORT");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: SCAN_DONE");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("event: UNKNOWN");
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_D("&complete_tab[i]->complete:0x%08x", &complete_tab[i]->complete);
rt_wlan_event_dispatch in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_D("unknown thread run user callback, event:%d", user_event);
rt_wlan_complete_create in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("complete event create failed");
rt_wlan_set_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("Parameter Wrongful name:%s mode:%d", dev_name, mode);
rt_wlan_set_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run dev_name:%s mode:%s%s%s", __FUNCTION__, dev_name,
rt_wlan_set_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("not find device, set mode failed! name:%s", dev_name);
rt_wlan_set_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_D("L:%d this device mode is set");
rt_wlan_set_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("this device ap mode only");
rt_wlan_set_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("this device sta mode only");
rt_wlan_set_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_E("change mode failed!");
rt_wlan_set_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("F:%s L:%d wlan init failed", __FUNCTION__, __LINE__);
rt_wlan_get_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("name is null");
rt_wlan_get_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("device not find! name:%s", dev_name);
rt_wlan_get_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run dev_name:%s mode:%s%s%s", __FUNCTION__, dev_name,
rt_wlan_connect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run ssid:%s password:%s", __FUNCTION__, ssid, password);
rt_wlan_connect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("ssid is null!");
rt_wlan_connect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("ssid is to long! ssid:%s len:%d", ssid, ssid_len);
rt_wlan_connect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("wifi is connect ssid:%s", ssid);
rt_wlan_connect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_W("not find ap! ssid:%s", ssid);
rt_wlan_connect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("find best info ssid:%s mac: %02x %02x %02x %02x %02x %02x",
rt_wlan_connect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("wifi connect failed!");
rt_wlan_connect_adv in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("info is null!");
rt_wlan_connect_adv in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run ssid:%s password:%s", __FUNCTION__, info->ssid.val, password);
rt_wlan_connect_adv in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_E("password is to long! password:%s len:%d", password, password_len);
rt_wlan_connect_adv in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("ssid is zero or to long! ssid:%s len:%d", info->ssid.val, info->ssid.len);
rt_wlan_connect_adv in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_I("wifi Already Connected");
rt_wlan_disconnect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run", __FUNCTION__);
rt_wlan_disconnect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("wifi disconnect fail");
rt_wlan_disconnect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("disconnect failed!");
rt_wlan_disconnect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_I("disconnect success!");
rt_wlan_is_connected in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run : %s", __FUNCTION__, _connect ? "connect" : "disconnect");
rt_wlan_is_ready in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run : %s", __FUNCTION__, _ready ? "ready" : "not ready");
rt_wlan_set_mac in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run mac: %02x:%02x:%02x:%02x:%02x:%02x",
rt_wlan_set_mac in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("set sta mac addr fail");
rt_wlan_get_mac in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("get sta mac addr fail");
rt_wlan_get_mac in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run mac: %02x:%02x:%02x:%02x:%02x:%02x",
rt_wlan_get_info in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run", __FUNCTION__);
rt_wlan_get_rssi in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run rssi:%d", __FUNCTION__, rssi);
rt_wlan_start_ap in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run ssid:%s password:%s", __FUNCTION__, ssid, password);
rt_wlan_start_ap in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("ssid is to long! len:%d", ssid_len);
rt_wlan_start_ap in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("start ap failed!");
rt_wlan_start_ap in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("start ap failed!");
rt_wlan_start_ap in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_I("start ap successs!");
rt_wlan_start_ap_adv in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run", __FUNCTION__);
rt_wlan_start_ap_adv in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("key is to long! len:%d", password_len);
rt_wlan_start_ap_adv in wlan_mgnt.c (rt-thread\components\drivers\wlan) :             RT_WLAN_LOG_D("wifi Already Start");
rt_wlan_ap_is_active in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run active:%s", __FUNCTION__, _active ? "Active" : "Inactive");
rt_wlan_ap_stop in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run", __FUNCTION__);
rt_wlan_ap_stop in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("ap stop fail");
rt_wlan_ap_stop in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_I("ap stop failed!");
rt_wlan_ap_stop in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_I("ap stop success!");
rt_wlan_ap_get_info in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run", __FUNCTION__);
rt_wlan_ap_get_sta_num in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run num:%d", __FUNCTION__, sta_num);
rt_wlan_ap_get_sta_info in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run num:%d", __FUNCTION__, i);
rt_wlan_ap_deauth_sta in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run mac: %02x:%02x:%02x:%02x:%02x:%02x:%d",
rt_wlan_ap_deauth_sta in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("mac addr is null");
rt_wlan_ap_deauth_sta in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("No AP");
rt_wlan_ap_deauth_sta in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("Not find mac addr");
rt_wlan_ap_deauth_sta in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("deauth sta failed");
rt_wlan_ap_set_country in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run country:%d", __FUNCTION__, country_code);
rt_wlan_ap_get_country in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run country:%d", __FUNCTION__, country_code);
rt_wlan_config_autoreconnect in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run enable:%d", __FUNCTION__, enable);
rt_wlan_get_autoreconnect_mode in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run enable:%d", __FUNCTION__, enable);
rt_wlan_scan in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run", __FUNCTION__);
rt_wlan_scan_with_info in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run", __FUNCTION__);
rt_wlan_scan_with_info in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("ssid is to long!");
rt_wlan_scan_with_info in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("scan sync fail");
rt_wlan_scan_with_info in wlan_mgnt.c (rt-thread\components\drivers\wlan) :         RT_WLAN_LOG_E("scan wait timeout!");
rt_wlan_scan_get_info_num in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run num:%d", __FUNCTION__, num);
rt_wlan_set_powersave in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run", __FUNCTION__);
rt_wlan_get_powersave in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run", __FUNCTION__);
rt_wlan_register_event_handler in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run event:%d", __FUNCTION__, event);
rt_wlan_unregister_event_handler in wlan_mgnt.c (rt-thread\components\drivers\wlan) :     RT_WLAN_LOG_D("%s is run event:%d", __FUNCTION__, event);
rt_wlan_prot_event_handle in wlan_prot.c (rt-thread\components\drivers\wlan) :     LOG_D("F:%s L:%d event:%d", __FUNCTION__, __LINE__, event);
rt_wlan_prot_event_handle in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_D("L%d event: INIT_DONE", __LINE__);
rt_wlan_prot_event_handle in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_D("L%d event: CONNECT", __LINE__);
rt_wlan_prot_event_handle in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_D("L%d event: DISCONNECT", __LINE__);
rt_wlan_prot_event_handle in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_D("L%d event: AP_START", __LINE__);
rt_wlan_prot_event_handle in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_D("L%d event: AP_STOP", __LINE__);
rt_wlan_prot_event_handle in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_D("L%d event: AP_ASSOCIATED", __LINE__);
rt_wlan_prot_event_handle in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_D("L%d event: AP_DISASSOCIATED", __LINE__);
rt_wlan_prot_find_by_name in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d Parameter Wrongful", __FUNCTION__, __LINE__);
rt_wlan_prot_find_by_name in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d not find wlan dev!! name:%s", __FUNCTION__, __LINE__, name);
rt_wlan_prot_attach_dev in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d wlan is null", __FUNCTION__, __LINE__);
rt_wlan_prot_attach_dev in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_D("prot is register");
rt_wlan_prot_attach_dev in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d not find wlan protocol", __FUNCTION__, __LINE__);
rt_wlan_prot_regisetr in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d Parameter Wrongful", __FUNCTION__, __LINE__);
rt_wlan_prot_regisetr in wlan_prot.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d Space full", __FUNCTION__, __LINE__);
rt_wlan_workqueue_dowork in wlan_workqueue.c (rt-thread\components\drivers\wlan) :     LOG_D("F:%s is run", __FUNCTION__);
rt_wlan_workqueue_dowork in wlan_workqueue.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d func is null", __FUNCTION__, __LINE__);
rt_wlan_workqueue_dowork in wlan_workqueue.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d not init wlan work queue", __FUNCTION__, __LINE__);
rt_wlan_workqueue_dowork in wlan_workqueue.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d create work failed", __FUNCTION__, __LINE__);
rt_wlan_workqueue_dowork in wlan_workqueue.c (rt-thread\components\drivers\wlan) :         LOG_E("F:%s L:%d do work failed", __FUNCTION__, __LINE__);
rt_wlan_workqueue_init in wlan_workqueue.c (rt-thread\components\drivers\wlan) :             LOG_E("F:%s L:%d wlan work queue create failed", __FUNCTION__, __LINE__);
HAL_SetProductKey in wrapper.c (packages\ali-iotkit-latest\ports) :     LOG_I("ProductKey is fixed [Read-only]");
HAL_SetDeviceName in wrapper.c (packages\ali-iotkit-latest\ports) :     LOG_I("DeviceName is fixed [Read-only]");
HAL_SetDeviceSecret in wrapper.c (packages\ali-iotkit-latest\ports) : 		LOG_D("DeviceSecret length exceed limit.");
HAL_SetDeviceSecret in wrapper.c (packages\ali-iotkit-latest\ports) : 		LOG_D("DeviceSecret write error.");
HAL_SetProductSecret in wrapper.c (packages\ali-iotkit-latest\ports) :     LOG_I("ProductSecret is fixed [Read-only]");
HAL_GetDeviceSecret in wrapper.c (packages\ali-iotkit-latest\ports) : 		LOG_D("Read DeviceSecret Error");
HAL_GetDeviceSecret in wrapper.c (packages\ali-iotkit-latest\ports) : 		LOG_D("DeviceSecret None Configuration");
HAL_Kv_Set in wrapper.c (packages\ali-iotkit-latest\ports) : 	LOG_I("Kv Set... [Not implemented]");
HAL_Kv_Get in wrapper.c (packages\ali-iotkit-latest\ports) : 	LOG_I("Kv Get... [Not implemented]");
HAL_Firmware_Persistence_Start in wrapper.c (packages\ali-iotkit-latest\ports) :     LOG_I("OTA start... [Not implemented]");
HAL_Firmware_Persistence_Write in wrapper.c (packages\ali-iotkit-latest\ports) :     LOG_I("OTA write... [Not implemented]");
HAL_Firmware_Persistence_Stop in wrapper.c (packages\ali-iotkit-latest\ports) :     LOG_I("OTA finish... [Not implemented]");
---- LOG_ Search Errors Encountered (1) ----
The following 1 files could not be processed:
D:\Project\stm32f407-netbox\JLinkLog.txt : File could not be opened.
